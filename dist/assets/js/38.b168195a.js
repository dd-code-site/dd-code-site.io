(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{533:function(e,v,_){"use strict";_.r(v);var l=_(6),i=Object(l.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("命令格式："),_("code",[e._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG...]")]),e._v("\nUsage: Run a command in a new container\n中文意思为：通过run命令创建一个新的容器（container）")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("常用选项说明")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("-d, --detach=false")]),e._v("， 指定容器运行于前台还是后台，默认为false")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("-i, --interactive=false")]),e._v("， 打开STDIN，用于控制台交互")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("-t, --tty=false")]),e._v("， 分配tty设备，该可以支持终端登录，默认为false")])]),e._v(" "),_("li",[_("p",[_("code",[e._v('-u, --user=""')]),e._v("， 指定容器的用户")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("-a, --attach=[]")]),e._v("， 登录容器（必须是以docker run -d启动的容器）")])]),e._v(" "),_("li",[_("p",[_("code",[e._v('-w, --workdir=""')]),e._v("， 指定容器的工作目录")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("-c, --cpu-shares=0")]),e._v("， 设置容器CPU权重，在CPU共享场景使用")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("-e, --env=[]")]),e._v("， 指定环境变量，容器中可以使用该环境变量")])]),e._v(" "),_("li",[_("p",[_("code",[e._v('-m, --memory=""')]),e._v("， 指定容器的内存上限")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("-P, --publish-all=false")]),e._v("， 指定容器暴露的端口")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("-p, --publish=[]")]),e._v("， 指定容器暴露的端口")])]),e._v(" "),_("li",[_("p",[_("code",[e._v('-h, --hostname=""')]),e._v("， 指定容器的主机名")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("-v, --volume=[]")]),e._v("， 给容器挂载存储卷，挂载到容器的某个目录")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--volumes-from=[]")]),e._v("， 给容器挂载其他容器上的卷，挂载到容器的某个目录")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--cap-add=[]")]),e._v("， 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--cap-drop=[]")]),e._v("， 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities")])]),e._v(" "),_("li",[_("p",[_("code",[e._v('--cidfile=""')]),e._v("， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法")])]),e._v(" "),_("li",[_("p",[_("code",[e._v('--cpuset=""')]),e._v("， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--device=[]")]),e._v("， 添加主机设备给容器，相当于设备直通")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--dns=[]")]),e._v("， 指定容器的dns服务器")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--dns-search=[]")]),e._v("， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件")])]),e._v(" "),_("li",[_("p",[_("code",[e._v('--entrypoint=""')]),e._v("， 覆盖image的入口点")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--env-file=[]")]),e._v("， 指定环境变量文件，文件格式为每行一个环境变量")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--expose=[]")]),e._v("， 指定容器暴露的端口，即修改镜像的暴露端口")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--link=[]")]),e._v("， 指定容器间的关联，使用其他容器的IP、env等信息")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--lxc-conf=[]")]),e._v("， 指定容器的配置文件，只有在指定--exec-driver=lxc时使用")])]),e._v(" "),_("li",[_("p",[_("code",[e._v('--name=""')]),e._v("， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字")])]),e._v(" "),_("li",[_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v('--net="bridge"\n')])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br")])]),_("p",[e._v("， 容器网络设置:")]),e._v(" "),_("ul",[_("li",[e._v("bridge 使用docker daemon指定的网桥")]),e._v(" "),_("li",[e._v("host //容器使用主机的网络")]),e._v(" "),_("li",[e._v("container:NAME_or_ID >//使用其他容器的网路，共享IP和PORT等网络资源")]),e._v(" "),_("li",[e._v("none 容器使用自己的网络（类似--net=bridge），但是不进行配置")])])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--privileged=false")]),e._v("， 指定容器是否为特权容器，特权容器拥有所有的capabilities")])]),e._v(" "),_("li",[_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v('--restart="no"\n')])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br")])]),_("p",[e._v("， 指定容器停止后的重启策略:")]),e._v(" "),_("ul",[_("li",[e._v("no：容器退出时不重启")]),e._v(" "),_("li",[e._v("on-failure：容器故障退出（返回值非零）时重启")]),e._v(" "),_("li",[e._v("always：容器退出时总是重启")])])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--rm=false")]),e._v("， 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("--sig-proxy=true")]),e._v("， 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理")])])])])]),e._v(" "),_("h1",{attrs:{id:"示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),_("ul",[_("li",[e._v("运行一个在后台执行的容器，同时，还能用控制台管理："),_("code",[e._v("docker run -i -t -d ubuntu:latest")])]),e._v(" "),_("li",[e._v("运行一个带命令在后台不断执行的容器，不直接展示容器内部信息："),_("code",[e._v("docker run -d ubuntu:latest ping www.docker.com")])]),e._v(" "),_("li",[e._v("运行一个在后台不断执行的容器，同时带有命令，程序被终止后还能重启继续跑，还能用控制台管理，"),_("code",[e._v("docker run -d --restart=always ubuntu:latest ping www.docker.com")])]),e._v(" "),_("li",[e._v("为容器指定一个名字，"),_("code",[e._v("docker run -d --name=ubuntu_server ubuntu:latest")])]),e._v(" "),_("li",[e._v("容器暴露80端口，并指定宿主机80端口与其通信("),_("strong",[e._v(":")]),e._v(" 之前是宿主机端口，之后是容器需暴露的端口)，"),_("code",[e._v("docker run -d --name=ubuntu_server -p 80:80 ubuntu:latest")])]),e._v(" "),_("li",[e._v("指定容器内目录与宿主机目录共享("),_("strong",[e._v(":")]),e._v(" 之前是宿主机文件夹，之后是容器需共享的文件夹)，"),_("code",[e._v("docker run -d --name=ubuntu_server -v /etc/www:/var/www ubuntu:latest")])])])])}),[],!1,null,null,null);v.default=i.exports}}]);