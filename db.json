{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/Wikitten/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile1.png","path":"images/mobile1.png","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile2.png","path":"images/mobile2.png","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","path":"libs/fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","path":"libs/fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","path":"libs/fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","path":"libs/fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","path":"libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"9c7cfba7d76b83d4f674c3fdaaf1c18610383993","modified":1618894423658},{"_id":"source/tags/index.md","hash":"cccf1086f65dc00aa437dcd870dc6a29c03d1f73","modified":1618894436600},{"_id":"source/.DS_Store","hash":"130f27e48f52ebf53d14a75d99042efb75eb7da7","modified":1619312505433},{"_id":"source/categories/index.md","hash":"cf5bc2d07b3fff693fd439ae4f41514d607ee6d8","modified":1618894501949},{"_id":"source/share/Go进阶训练营课程大纲学习体系.md","hash":"9c74a76889fef61e679c1cf4b16a524cb1846ee7","modified":1621302151618},{"_id":"source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1618377112813},{"_id":"source/share/不错的在线学习平台.md","hash":"143596d15a3412c6b45bbcc767a3a0d627911ab4","modified":1619856677129},{"_id":"source/share/高级 Go 工程师岗位职责.md","hash":"c38a1edf43f7059854133b96e804792869866fa8","modified":1621301917973},{"_id":"source/share/.md","hash":"a14ee98bc5eadc377622f9ea51e9924a90f2b96a","modified":1619854423238},{"_id":"source/share/index.md","hash":"a9af2dcab677ee5105c68f59be9aa9d6e16dbc84","modified":1619854187816},{"_id":"source/share/优秀的博主站点.md","hash":"a14ee98bc5eadc377622f9ea51e9924a90f2b96a","modified":1619854430359},{"_id":"source/_posts/Class/.DS_Store","hash":"50f7a356ac3c89b8399d1eb2ff240cec6ab23105","modified":1619312521678},{"_id":"source/_posts/.DS_Store","hash":"56f43e3dad6711c93da1c5982f50bf609cab8f0b","modified":1619312510982},{"_id":"source/_posts/Algorithm/快速排序解析.md","hash":"544004c4babc3f4505faeb64de4574bdb9b9dc22","modified":1619691898834},{"_id":"source/_posts/Algorithm/两两对比算法.md","hash":"a74b5851cfe2190245ce97760898f9580f3c5f2e","modified":1619691898772},{"_id":"source/_posts/Other/面试题整理1.md","hash":"82bccab80e471182ebcc014220f128205e3baa85","modified":1619691898978},{"_id":"source/_posts/Other/面试题整理2.md","hash":"6b097bc23b6bc6161416f9bbb13dec1dba223195","modified":1619691898993},{"_id":"source/_posts/Algorithm/编码-冒泡排序.md","hash":"9655c87d904f13ae33faecc47ad3a3b74ca0b3c8","modified":1619691898906},{"_id":"source/_posts/Algorithm/编码-快排算法.md","hash":"567418da7787d6344159053e6f02f8225f3b1018","modified":1619691898932},{"_id":"source/_posts/Algorithm/检查给定数组是否成对排序.md","hash":"bfcce6bb802ea4f42a6457ee8815b4487b6f97ee","modified":1619691898866},{"_id":"source/_posts/Algorithm/冒泡排序解析.md","hash":"f487025aeb31be952ad580850b7bd8ce97c2fe20","modified":1619691898778},{"_id":"source/_posts/Algorithm/国外一个学习算法很好的网站.md","hash":"31b62692034b8f6949bb0162d98665eddfa0ba31","modified":1619691898788},{"_id":"source/_posts/Class/22-speaking-go-language/ch1-0.md","hash":"9c0f73b470911d78ee18564f8f0b0442fecfb6da","modified":1619691899026},{"_id":"source/_posts/Class/22-speaking-go-language/ch1-2-1.md","hash":"4e8498f0648010bf0514fc734c26d58c6ae5dc02","modified":1619691899031},{"_id":"source/_posts/Class/22-speaking-go-language/ch1-2-2.md","hash":"2e8d021e23f4a454d2337713dd3b27875cca751e","modified":1619691899036},{"_id":"source/_posts/Class/22-speaking-go-language/ch1-2-3.md","hash":"3fa58a1bd06c2e0d74dd429e67f4b1ce43024747","modified":1619691899041},{"_id":"source/_posts/Class/22-speaking-go-language/ch1-3-2.md","hash":"9c234b8ddd9b397ad0c3336940819d6b4de2b731","modified":1619691899049},{"_id":"source/_posts/Class/22-speaking-go-language/ch1-3-1.md","hash":"7c47aa997c7cd578e5eba1dcb837f48ca88bc252","modified":1619691899045},{"_id":"source/_posts/Class/22-speaking-go-language/ch1-1.md","hash":"1db8c8923013bef664419a79344f9e56f721d1ab","modified":1619691899014},{"_id":"source/_posts/Class/22-speaking-go-language/ch1-3-3.md","hash":"f83af8297ad3a5ed7603d5c03160422a7318b1a4","modified":1619691899054},{"_id":"source/_posts/CodeLanguage/PHP/PHP-FPM是什么.md","hash":"41f8f8795784b10e0f0051b9111ee6e2a2bea986","modified":1619691899091},{"_id":"source/_posts/CodeLanguage/PHP/PHP中self、static、$this的区别&后期静态绑定详解.md","hash":"d40cc2cf2ebb059452011fb499464b195fd33d24","modified":1619691899098},{"_id":"source/_posts/Class/22-speaking-go-language/ch1-4.md","hash":"dfc6dd3a86118d926f421ecaaf2264ae63a40f17","modified":1619691899057},{"_id":"source/_posts/CodeLanguage/PHP/PHP-FPM的三种运行模式的三种运行模式.md","hash":"ddf7886d856bdfa89beea431b3b65fa4cdcf7c29","modified":1619691899095},{"_id":"source/_posts/CodeLanguage/PHP/PHP基础-数据类型-boolean.md","hash":"e39b731628a890416e7e3142ae18b27f93e6dcec","modified":1619691899100},{"_id":"source/_posts/CodeLanguage/PHP/PHP基础-数据类型-float.md","hash":"d533842d669f1d4de8520405c75d630c9a082ac9","modified":1619691899104},{"_id":"source/_posts/CodeLanguage/PHP/PHP基础-数据类型-integet.md","hash":"fb02919262206287a10ba92c036f0ada7b93d0e8","modified":1619691899103},{"_id":"source/_posts/CodeLanguage/PHP/PHP基础-数据类型-string.md","hash":"907721914e072de37d9f3915868faeae9b329cb0","modified":1619691899107},{"_id":"source/_posts/CodeLanguage/PHP/PHP基础-数据类型-string和int比较.md","hash":"eea5fb37631cd5c789e858bf51669ef1746de789","modified":1619691899106},{"_id":"source/_posts/CodeLanguage/PHP/PHP字符串函数.md","hash":"00706f4e0b94100f746144abd00b7f7333f97f01","modified":1619691899123},{"_id":"source/_posts/CodeLanguage/PHP/PHP基础-数据类型.md","hash":"38508e075e3e0723328818c929b0697610ad21c5","modified":1619691899122},{"_id":"source/_posts/CodeLanguage/PHP/PHP控制反转(IOC)和依赖注入(DI).md","hash":"a45ff70c3ece35c48f2f2971fdfdf82d3d2026ea","modified":1619691899126},{"_id":"source/_posts/CodeLanguage/PHP/PHP的垃圾回收机制-回收周期.md","hash":"38eb078f992771fd91c054b26994e23875ea86eb","modified":1619691899128},{"_id":"source/_posts/CodeLanguage/PHP/PHP的垃圾回收机制.md","hash":"6f3534f8751f12ee874d34995a57a4065167019f","modified":1619691899136},{"_id":"source/_posts/CodeLanguage/PHP/PHP的垃圾回收机制-性能方面考虑的因素.md","hash":"3f66e63c2c5ec6e7d5486a9a50a5ddb9e6c46e7b","modified":1619691899132},{"_id":"source/_posts/CodeLanguage/PHP/PHP自动加载机制.md","hash":"d2158f85371d2b8e91e13b9fa77794d48567e789","modified":1619691899140},{"_id":"source/_posts/CodeLanguage/PHP/self和$this的区别.md","hash":"c1be7718825418dd37ebe8d42b858c20b96ae0a1","modified":1619691899143},{"_id":"source/_posts/CodeLanguage/PHP/在Mac上使用Homebrew升级到PHP7.4.md","hash":"14115667b09e183321a62407324c216b54d4f778","modified":1619691899147},{"_id":"source/_posts/CodeLanguage/PHP/PHP的垃圾回收机制-引用计数.md","hash":"50b0f6649c79a1a73b72469631b0b58640f86177","modified":1619691899130},{"_id":"source/_posts/Technology/Docker/Docker相关命令.md","hash":"ac6c8c55d6798e08a0b2f0877e658ae13175e504","modified":1619691899063},{"_id":"source/_posts/Technology/Docker/Docker命令详解（run篇）.md","hash":"efad29e9b64b1301a7656b51bdbad8beee6aa6ba","modified":1619691899061},{"_id":"source/_posts/Technology/Mongo/mongo数据库角色.md","hash":"39e37e68a1084b9dd09bf46b44898de8c421769a","modified":1619691899155},{"_id":"source/_posts/Technology/Mongo/mongo新建用户.md","hash":"400d453288991ddef1293f335f44201758206df2","modified":1619691899156},{"_id":"source/_posts/Technology/Mongo/mongo常用命令.md","hash":"3d90be4e35d19fc8b646f036317c3c88ad823c26","modified":1619691899153},{"_id":"source/_posts/Technology/LeetCode/一个很好的leetcode项目.md","hash":"7a283ed64a900a5fe68234ad9d3be3cd565f23b1","modified":1619691899064},{"_id":"source/_posts/Technology/Oracle/Centos7下Oracle19c的安装.md","hash":"3b5ac2f7420fe36c3871c51869c415e95cf32dcb","modified":1619691899066},{"_id":"source/_posts/Technology/Oracle/docker安装oracle19c.md","hash":"710da766d83f058d0b6a2fb31b0b6c2246c3e8b8","modified":1619691899067},{"_id":"source/_posts/Technology/Redis/Redis持久化.md","hash":"2f3567577cdb14fa82d21e41bbd9c00afbdfd217","modified":1619691899071},{"_id":"source/_posts/Technology/Redis/Redis数据类型比较和使用场景.md","hash":"63a5bd9073e55d74612963e7da389b5ef0657772","modified":1619691899074},{"_id":"source/_posts/Technology/Redis/Redis设置密码.md","hash":"cd4dfc8d69ffebeab981f699913917d63f916d07","modified":1619691899075},{"_id":"source/_posts/CodeLanguage/PHP/如何使用brew安装多个PHP版本.md","hash":"fe459ce86112c5a2f04355281fb1e480bfbf01f8","modified":1619691899150},{"_id":"source/_posts/Technology/Redis/了解Memcache.md","hash":"9b30336e278d55692fcaf0d2bc6d4e8bd9768842","modified":1619691899080},{"_id":"source/_posts/Technology/Redis/了解Redis.md","hash":"c7fe811df3fb4cac8d60e0a640c8d9bedd30fc82","modified":1619691899078},{"_id":"source/_posts/Technology/Redis/安装SSDB.md","hash":"bd72767e4246041d62d72bc65de73aea96c3b938","modified":1619691899081},{"_id":"source/_posts/Technology/Redis/缓存Memcache和Redis的区别.md","hash":"8335cfd1e13d91903f055c59f9b2b4cbb54b6287","modified":1619691899084},{"_id":"source/_posts/Technology/MySQL/MyISAM和InnoDB的区别.md","hash":"7d89d71fc182751e8cb0a910e29a74901ecd2d74","modified":1619691899159},{"_id":"source/_posts/Technology/MySQL/MySQL基础-小数类型.md","hash":"0ead8408d4333332d565ef337a48be8f7ef1dfeb","modified":1619691899165},{"_id":"source/_posts/Technology/MySQL/MySQL优化.md","hash":"ebabad20097cb5f6e3b457e65e60b08fe18d75ca","modified":1619691899162},{"_id":"source/_posts/Technology/MySQL/MySQL千万级大数据量查询优化.md","hash":"e35d2beb6c601a6f2119db04b7f5d1fbe7b4bac1","modified":1619691899164},{"_id":"source/_posts/Technology/MySQL/MySQL基础-整数类型.md","hash":"9f3e2708d2db6399827c4010fcf7882f4a563fd6","modified":1619691899171},{"_id":"source/_posts/Technology/MySQL/MySQL常见问题.md","hash":"e1c8945a72664c29346c6c958f69a0de40ac2918","modified":1619691899175},{"_id":"source/_posts/Technology/MySQL/MySQL查询重复的数据.md","hash":"324eead6e27eddb645c297976554a785dbe06fa4","modified":1619691899176},{"_id":"source/_posts/Technology/MySQL/MySQL索引和存储引擎.md","hash":"abde770ccfedfe869fd78d1f9babbf5a03132dde","modified":1619691899184},{"_id":"source/_posts/Technology/MySQL/MySQL索引失效情况.md","hash":"79445f04bf1f70cd2f72d497b960435f93f4d9e3","modified":1619691899254},{"_id":"source/_posts/Technology/MySQL/事务的四个特性.md","hash":"01e19e055c678969d0fe87901e830d29e998f482","modified":1619691899260},{"_id":"source/_posts/Technology/MySQL/MySQL索引类型.md","hash":"e40a3b72b68487ee14a4f87f0c5271360b8ed96b","modified":1619691899255},{"_id":"source/_posts/Technology/MySQL/使用MySqlDump备份.md","hash":"011e113d7e7ca41ec4bbee3e1455065a321b29af","modified":1619691899266},{"_id":"source/_posts/Technology/Service/ubuntu防火墙的使用和开放关闭端口.md","hash":"1e35056f6c4fb75b11a352352a1bb3248590d987","modified":1619691899090},{"_id":"source/_posts/Technology/Service/linux系统scp文件传输.md","hash":"829c1539a6c0cc25de5d7c6f4612c5d5cac2dc10","modified":1619691899088},{"_id":"themes/Wikitten/README.md","hash":"8c9fc9b9ebdf37c9289a4e1d72ac8aedbe23316c","modified":1618377105032},{"_id":"themes/Wikitten/_config.yml","hash":"304355bca70dd2f29a87c7674bb54181884336c8","modified":1619519473051},{"_id":"themes/Wikitten/LICENSE","hash":"feadcd728a8e828cfc507b4586d7a7ab94b66fe8","modified":1618377105031},{"_id":"themes/Wikitten/README_zh-CN.md","hash":"8a4e600ff1f75007df8facf15a9c127aafec5e18","modified":1618377105032},{"_id":"themes/Wikitten/_config.yml.example","hash":"e8d451b59680232c5fb3b5f41b64ad248d1ba6e1","modified":1618377105032},{"_id":"themes/Wikitten/package.json","hash":"45d85fca94aa5f2066abc08dec6cc7009558e300","modified":1618377105052},{"_id":"themes/Wikitten/_scaffolds/embed.md","hash":"0830c3a5b134fbd21a6ddeda141a4de8345cabb1","modified":1618377105032},{"_id":"themes/Wikitten/_scaffolds/post.md","hash":"af892af6f7dafdd617c5aa17ee91e9e445d20fa4","modified":1618377105033},{"_id":"themes/Wikitten/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1618377105034},{"_id":"themes/Wikitten/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1618377105034},{"_id":"themes/Wikitten/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1618377105034},{"_id":"themes/Wikitten/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1618377105034},{"_id":"themes/Wikitten/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1618377105035},{"_id":"themes/Wikitten/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1618377105036},{"_id":"themes/Wikitten/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1618377105035},{"_id":"themes/Wikitten/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1618377105035},{"_id":"themes/Wikitten/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1618377105036},{"_id":"themes/Wikitten/layout/archive.ejs","hash":"34180dcc26b8fcc59f8644ce506aadf7db5f07e5","modified":1618377105037},{"_id":"themes/Wikitten/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1618377105036},{"_id":"themes/Wikitten/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1618377105036},{"_id":"themes/Wikitten/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1618377105037},{"_id":"themes/Wikitten/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1618377105037},{"_id":"themes/Wikitten/layout/layout.ejs","hash":"61c0dad38893fb9fe4eba7fe2afaf7464310b925","modified":1618377105045},{"_id":"themes/Wikitten/layout/embed.ejs","hash":"9e4e14d7adf20225e26d3943bdae8d08cf2d0d8b","modified":1618377105045},{"_id":"themes/Wikitten/layout/index.ejs","hash":"0980482c3b37acffd1b724ebc51240ca6967be5c","modified":1618377105045},{"_id":"themes/Wikitten/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1618377105045},{"_id":"themes/Wikitten/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1618377105052},{"_id":"themes/Wikitten/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1618377105047},{"_id":"themes/Wikitten/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1618377105053},{"_id":"themes/Wikitten/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1618377105050},{"_id":"themes/Wikitten/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1618377105050},{"_id":"themes/Wikitten/_source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1618377105033},{"_id":"themes/Wikitten/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1618377105038},{"_id":"themes/Wikitten/layout/comment/counter.ejs","hash":"e109d3256b004b027d029bd5bd67feeb72dc5388","modified":1618377105038},{"_id":"themes/Wikitten/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1618377105038},{"_id":"themes/Wikitten/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1618377105039},{"_id":"themes/Wikitten/layout/common/article.ejs","hash":"595a086a42a156dd44d30ee7f9e7189ca370bcf1","modified":1618377105040},{"_id":"themes/Wikitten/layout/comment/index.ejs","hash":"f0f00cce7a5c37f00dbc4acf49529bdd6a6bdc5d","modified":1618377105038},{"_id":"themes/Wikitten/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1618377105039},{"_id":"themes/Wikitten/layout/common/head.ejs","hash":"5f2df8713f0ef723b3bfc79ae580fe8707ea2036","modified":1618377105041},{"_id":"themes/Wikitten/layout/common/iframe.ejs","hash":"c3a8e71e1660d58b6ed106a045c6829e77e65881","modified":1618377105041},{"_id":"themes/Wikitten/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1618377105041},{"_id":"themes/Wikitten/layout/common/footer.ejs","hash":"c666216877453d67db8637e8de7a7f2c1b92d9cb","modified":1618377105040},{"_id":"themes/Wikitten/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1618377105044},{"_id":"themes/Wikitten/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1618377105043},{"_id":"themes/Wikitten/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1618377105044},{"_id":"themes/Wikitten/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1618377105046},{"_id":"themes/Wikitten/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1618377105044},{"_id":"themes/Wikitten/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1618377105046},{"_id":"themes/Wikitten/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1618377105044},{"_id":"themes/Wikitten/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1618377105047},{"_id":"themes/Wikitten/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1618377105048},{"_id":"themes/Wikitten/layout/plugin/scripts.ejs","hash":"6e410c120dabac0dccbd8b0c312f261c9566cacb","modified":1618377105046},{"_id":"themes/Wikitten/layout/plugin/mathjax.ejs","hash":"a5578fd682da0f26c85428bfb59043f9f5c682a7","modified":1618377105046},{"_id":"themes/Wikitten/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1618377105048},{"_id":"themes/Wikitten/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1618377105048},{"_id":"themes/Wikitten/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1618377105047},{"_id":"themes/Wikitten/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1618377105048},{"_id":"themes/Wikitten/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1618377105049},{"_id":"themes/Wikitten/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1618377105049},{"_id":"themes/Wikitten/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1618377105049},{"_id":"themes/Wikitten/layout/widget/archive.ejs","hash":"91a4675876990c12bd252f00e13894e0e7e5e50a","modified":1618377105050},{"_id":"themes/Wikitten/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1618377105049},{"_id":"themes/Wikitten/layout/widget/category.ejs","hash":"d09317d5e328a9c6ff8fded93604ebe04764cc4c","modified":1618377105051},{"_id":"themes/Wikitten/layout/widget/recent_posts.ejs","hash":"dc83051ae67cfae0db0a6d9790c923ff2883ee25","modified":1618377105051},{"_id":"themes/Wikitten/layout/widget/links.ejs","hash":"0f58cafed5156488f550df6d560814f835a46854","modified":1618377105051},{"_id":"themes/Wikitten/layout/widget/tag.ejs","hash":"5d70b1bf3b1fc977135e458f9a50cb65cff91f17","modified":1618377105051},{"_id":"themes/Wikitten/layout/widget/tagcloud.ejs","hash":"73638a7c91c6d6433e766b35199508719bf27d19","modified":1618377105052},{"_id":"themes/Wikitten/source/css/_extend.styl","hash":"9a5c72663c0da1b32ecb6a75773a5ccfb8c467ca","modified":1618377105053},{"_id":"themes/Wikitten/source/css/_variables.styl","hash":"2eba1250b39115da9f32e8a70d271e04186419c0","modified":1618377105079},{"_id":"themes/Wikitten/source/css/style.styl","hash":"d37d6c7754805c60564c0d9a50b7b058e7f830c9","modified":1618377105080},{"_id":"themes/Wikitten/source/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1618377105083},{"_id":"themes/Wikitten/source/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1618377105084},{"_id":"themes/Wikitten/source/js/insight.js","hash":"c9dfd20ae82a446facad01439b7bb75332e3705b","modified":1618377105085},{"_id":"themes/Wikitten/source/js/main.js","hash":"16b8b4c87801386fbbd144d8a803454d175505f9","modified":1618377105085},{"_id":"themes/Wikitten/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1618377105033},{"_id":"themes/Wikitten/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1618377105033},{"_id":"themes/Wikitten/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1618377105034},{"_id":"themes/Wikitten/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1618377105041},{"_id":"themes/Wikitten/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1618377105042},{"_id":"themes/Wikitten/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1618377105042},{"_id":"themes/Wikitten/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1618377105042},{"_id":"themes/Wikitten/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1618377105043},{"_id":"themes/Wikitten/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1618377105043},{"_id":"themes/Wikitten/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1618377105043},{"_id":"themes/Wikitten/source/css/_partial/archive.styl","hash":"146b5a86d6f602232d86e246ea20620ec923cccc","modified":1618377105075},{"_id":"themes/Wikitten/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1618377105076},{"_id":"themes/Wikitten/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1618377105076},{"_id":"themes/Wikitten/source/css/_partial/article.styl","hash":"85db02a6f51d81ac317a7f0727fa16b7ce7d5e9e","modified":1618377105076},{"_id":"themes/Wikitten/source/css/_partial/header.styl","hash":"154fcfe17c4a9833903b3a91efb1ddf315e7fcba","modified":1618377105077},{"_id":"themes/Wikitten/source/css/_partial/insight.styl","hash":"d3195723c373a68a05b76d430f8aeb2d2dd1957f","modified":1618377105077},{"_id":"themes/Wikitten/source/css/_partial/profile.styl","hash":"2ecc48d48ad8769556036f19f2769c84c428cbc6","modified":1618377105077},{"_id":"themes/Wikitten/source/css/_partial/timeline.styl","hash":"4ea679287d49f91634dd32ad812746cccc1e6281","modified":1618377105078},{"_id":"themes/Wikitten/source/css/_partial/sidebar.styl","hash":"4a11aace0de3aeafdd88caef7cd238543ce1cd95","modified":1618377105078},{"_id":"themes/Wikitten/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1618377105079},{"_id":"themes/Wikitten/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1618377105079},{"_id":"themes/Wikitten/source/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1618377105079},{"_id":"themes/Wikitten/source/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1618377105080},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1618377105080},{"_id":"themes/Wikitten/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1618377105054},{"_id":"themes/Wikitten/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1618377105053},{"_id":"themes/Wikitten/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1618377105054},{"_id":"themes/Wikitten/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1618377105054},{"_id":"themes/Wikitten/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1618377105055},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1618377105055},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1618377105055},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1618377105056},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1618377105056},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1618377105057},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1618377105058},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1618377105057},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1618377105058},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1618377105058},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1618377105059},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1618377105059},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1618377105059},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1618377105060},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1618377105060},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1618377105060},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1618377105061},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1618377105061},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1618377105061},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1618377105061},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1618377105062},{"_id":"themes/Wikitten/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1618377105063},{"_id":"themes/Wikitten/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1618377105062},{"_id":"themes/Wikitten/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1618377105062},{"_id":"themes/Wikitten/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1618377105063},{"_id":"themes/Wikitten/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1618377105064},{"_id":"themes/Wikitten/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1618377105064},{"_id":"themes/Wikitten/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1618377105064},{"_id":"themes/Wikitten/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1618377105064},{"_id":"themes/Wikitten/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1618377105065},{"_id":"themes/Wikitten/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1618377105065},{"_id":"themes/Wikitten/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1618377105065},{"_id":"themes/Wikitten/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1618377105065},{"_id":"themes/Wikitten/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1618377105066},{"_id":"themes/Wikitten/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1618377105066},{"_id":"themes/Wikitten/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1618377105066},{"_id":"themes/Wikitten/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1618377105066},{"_id":"themes/Wikitten/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1618377105067},{"_id":"themes/Wikitten/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1618377105067},{"_id":"themes/Wikitten/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1618377105067},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1618377105067},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1618377105068},{"_id":"themes/Wikitten/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1618377105068},{"_id":"themes/Wikitten/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1618377105068},{"_id":"themes/Wikitten/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1618377105069},{"_id":"themes/Wikitten/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1618377105069},{"_id":"themes/Wikitten/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1618377105069},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1618377105070},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1618377105070},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1618377105070},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1618377105070},{"_id":"themes/Wikitten/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1618377105071},{"_id":"themes/Wikitten/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1618377105071},{"_id":"themes/Wikitten/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1618377105071},{"_id":"themes/Wikitten/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1618377105071},{"_id":"themes/Wikitten/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1618377105072},{"_id":"themes/Wikitten/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1618377105072},{"_id":"themes/Wikitten/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1618377105073},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1618377105073},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1618377105073},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1618377105073},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1618377105074},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1618377105074},{"_id":"themes/Wikitten/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1618377105074},{"_id":"themes/Wikitten/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1618377105075},{"_id":"themes/Wikitten/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1618377105075},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1618377105101},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1618377105103},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1618377105103},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1618377105104},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1618377105107},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1618377105106},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1618377105127},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1618377105129},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1618377105086},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1618377105107},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1618377105087},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1618377105108},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1618377105107},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1618377105108},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1618377105108},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1618377105109},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1618377105109},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1618377105110},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1618377105111},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1618377105110},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1618377105111},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1618377105111},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1618377105112},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1618377105112},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1618377105112},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1618377105113},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1618377105113},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1618377105113},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1618377105114},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1618377105114},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1618377105114},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1618377105114},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1618377105115},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1618377105115},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1618377105116},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1618377105115},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1618377105116},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1618377105116},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1618377105116},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1618377105117},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1618377105117},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1618377105118},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1618377105118},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1618377105120},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1618377105118},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1618377105119},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1618377105121},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1618377105120},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1618377105120},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1618377105121},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1618377105121},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1618377105122},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1618377105122},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1618377105123},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1618377105123},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1618377105123},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1618377105124},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1618377105124},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1618377105125},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1618377105125},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1618377105125},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1618377105126},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1618377105126},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1618377105126},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1618377105127},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1618377105127},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8","modified":1618377105106},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1618377105128},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1618377105128},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1618377105105},{"_id":"themes/Wikitten/db.json","hash":"75f90be0264c8b1abcc05cabfd740e171e72200d","modified":1619701050806},{"_id":"public/atom.xml","hash":"41bfe049b3d15fcab562479367056fecb40fab8d","modified":1621302211112},{"_id":"public/sitemap.xml","hash":"52c9c304a6d40dac8eba62361754a82363e89a13","modified":1621302211112},{"_id":"public/content.json","hash":"10fbf8d98bef8cbee8de60102510e9b08f14ca8a","modified":1621302211112},{"_id":"public/about/index.html","hash":"1fba30b799bf3c9719504bca69a78c72b3806a1b","modified":1621302211112},{"_id":"public/categories/index.html","hash":"e737d76d7729024ca4c84b29b9c1fc8465290713","modified":1621302211112},{"_id":"public/tags/index.html","hash":"abca9bf2b90af025adbf8d21f6197d9eaa874d21","modified":1621302211112},{"_id":"public/share/Go进阶训练营课程大纲学习体系.html","hash":"6cf8b7fc11a41014624a00e2acdca8702b0c498a","modified":1621302211112},{"_id":"public/share/index.html","hash":"29ed8539cf5e38b0e456ad60511c4c3512f11457","modified":1621302211112},{"_id":"public/share/不错的在线学习平台.html","hash":"fedc41492665a57e0b690746da30e8a8672a242d","modified":1621302211112},{"_id":"public/share/高级 Go 工程师岗位职责.html","hash":"1a323e9d23727f7e61d3e7e0633c2628bdf8daa3","modified":1621302211112},{"_id":"public/share/优秀的博主站点.html","hash":"815e72f142050516ec67ab862c09b2e872c964c2","modified":1621302211112},{"_id":"public/post/1632346433.html","hash":"afab662d770cd719ff2aa541dbb8be471052952a","modified":1621302211112},{"_id":"public/post/1946029743.html","hash":"f97a4185fe085d3fdd3baad7df9a3712d9a1de5d","modified":1621302211112},{"_id":"public/post/1956865009.html","hash":"cf5d9c92826645dcbc6e7945d3394201c338a177","modified":1621302211112},{"_id":"public/post/3410127306.html","hash":"f25b056a295b469fbe06652bdbc7d3d0f10a5269","modified":1621302211112},{"_id":"public/post/2755664247.html","hash":"6e99d68ded48c676bd6fd611071785bb7ec5a073","modified":1621302211112},{"_id":"public/post/3069556377.html","hash":"a699176e8673f81c16903303cc578df644fd9416","modified":1621302211112},{"_id":"public/post/239718908.html","hash":"fe8ffb926d1fe03298ff5a7d1577e0f52b59ac11","modified":1621302211112},{"_id":"public/post/188254796.html","hash":"015bf4742f30a126d83e5c7b8a8b55a3640b579a","modified":1621302211112},{"_id":"public/post/1991213779.html","hash":"1516531e08592adf3bfcfedfe2c119fa1cbca15e","modified":1621302211112},{"_id":"public/post/1719467524.html","hash":"6e20a085668fca75593a8ec5271c8f84adef45f2","modified":1621302211112},{"_id":"public/post/73634619.html","hash":"55a1e0597b51e775dc0138e16138bbbca3224267","modified":1621302211112},{"_id":"public/post/3516134866.html","hash":"e65ded266efe38c812073c3c7d56496cf4626be1","modified":1621302211112},{"_id":"public/post/82110573.html","hash":"6ee96a16fffabb03f22fe5c1690467130d08157d","modified":1621302211112},{"_id":"public/post/1879866913.html","hash":"9531242269ddd2ae53744dabc7de57ca3b147083","modified":1621302211112},{"_id":"public/post/295621084.html","hash":"454ccd456e34bac10c3975d58e9c3780d3e7ac50","modified":1621302211112},{"_id":"public/post/894376550.html","hash":"18fb3bbbd785c3a697f17873d84935161768de13","modified":1621302211112},{"_id":"public/post/2253204330.html","hash":"650c6b1aed8f8a6f5be3cb9b734aaf3d6eef3a53","modified":1621302211112},{"_id":"public/post/1099414406.html","hash":"a89224bc811a29530d18658191bc9530104056df","modified":1621302211112},{"_id":"public/post/1058490118.html","hash":"dae16f54e541eaca13da6a03edf18784595ef2d5","modified":1621302211112},{"_id":"public/post/1349846639.html","hash":"7965a5f990e05fe9e9c96c6985dcf08ba69eab9e","modified":1621302211112},{"_id":"public/post/1685059487.html","hash":"5974e7a5fd8fb42a329b8d67a08e50405e61c411","modified":1621302211112},{"_id":"public/post/137484498.html","hash":"8f2eae1bf1adddad595284f9b57b6811274e4051","modified":1621302211112},{"_id":"public/post/512206887.html","hash":"01ab004d3aacc6f295842456fed94abe21c43b2b","modified":1621302211112},{"_id":"public/post/886155297.html","hash":"b4bb7d98f982cd21cd6c5d247e3c94e4203cef65","modified":1621302211112},{"_id":"public/post/2943915566.html","hash":"a4fd9923280be39fd0e7724ae9585e5114cd218d","modified":1621302211112},{"_id":"public/post/2518559853.html","hash":"eb9e4bd3bc0f84d2f27bc0dd4328737435c47263","modified":1621302211112},{"_id":"public/post/1171510126.html","hash":"479cd61d4cb71d3e9ae21dcf3b7f7d3435b000a8","modified":1621302211112},{"_id":"public/post/2776614029.html","hash":"d4b6b8fecc301be508b986b51b2be51fa4f6d93b","modified":1621302211112},{"_id":"public/post/3981571320.html","hash":"85726c9c1384c8af0bbb25adf4ebcb8d8bad82b4","modified":1621302211112},{"_id":"public/post/2140386669.html","hash":"f02837be4059bcc7264194f03ef1fdd0cadd6337","modified":1621302211112},{"_id":"public/post/2844724790.html","hash":"e419658bec1b62a65a52ff5d6a003eb1e80cfc70","modified":1621302211112},{"_id":"public/post/1503101483.html","hash":"8aed64d31cd2a5339be53ef986293e303c1ef651","modified":1621302211112},{"_id":"public/post/3712615104.html","hash":"fdad50b721965dc8a55be69ad19c1cea8ac9a4f4","modified":1621302211112},{"_id":"public/post/2916108243.html","hash":"d6ccfa11c2fb49938063c126dd992eb9badf0a69","modified":1621302211112},{"_id":"public/post/221785719.html","hash":"cb34be7dafa9181edbaba2833fefd05db8993897","modified":1621302211112},{"_id":"public/post/4276646924.html","hash":"56845742dcb4ce2152ba32815ccbd243316c386b","modified":1621302211112},{"_id":"public/post/4235469996.html","hash":"8f13ef7f3dd82f372755c3ed27d27babec8df90a","modified":1621302211112},{"_id":"public/post/1247192045.html","hash":"ebbf210f8600c7dcc01be4f2749b2ca5ddaa11d0","modified":1621302211112},{"_id":"public/post/3247369179.html","hash":"452a869293908505d7ffac3dd8b9c0457fa44e55","modified":1621302211112},{"_id":"public/post/740536292.html","hash":"e4b0277427001e392d93327dc6364d3b97df64ff","modified":1621302211112},{"_id":"public/post/2003578900.html","hash":"a3bded8b0ce67e2e5fb845e4e909e81a7c230022","modified":1621302211112},{"_id":"public/post/1256719031.html","hash":"3098e7a96fa512895490623bb702806a02772815","modified":1621302211112},{"_id":"public/post/3032572741.html","hash":"db822e93dc049868b7a08d3ac7f78b5ba34e3329","modified":1621302211112},{"_id":"public/post/1452475922.html","hash":"ebb3654c1a6a014953cc51ca7556c5c494460e55","modified":1621302211112},{"_id":"public/post/3220316175.html","hash":"58d7ddaceceeb0e7ef9360e3773ef4887a70dc0d","modified":1621302211112},{"_id":"public/post/564644262.html","hash":"63c0ca375d273f8e1c98bdbfdbcffe2038bae08b","modified":1621302211112},{"_id":"public/post/2104589309.html","hash":"8be2b407927e88c145dd1ebbfee3ce8615d7cd03","modified":1621302211112},{"_id":"public/post/548465112.html","hash":"be84a5c06bd9b8270a2500af838ad7e53f7a61e3","modified":1621302211112},{"_id":"public/post/1868093003.html","hash":"4cee9b68d6dc175753ba9df5628328d5d7304d8b","modified":1621302211112},{"_id":"public/post/2178661577.html","hash":"1858d997be435fd39629b1c557dc557922392756","modified":1621302211112},{"_id":"public/post/1647528259.html","hash":"469f03cf9ea214f6070bb4e381a9bd9e603f8026","modified":1621302211112},{"_id":"public/post/1213461122.html","hash":"2d19ec86c23a109aff259563a1ecf7a155067ae4","modified":1621302211112},{"_id":"public/post/70487411.html","hash":"6041561d36ec10f7550847edacb08bfb08a62446","modified":1621302211112},{"_id":"public/post/3140326379.html","hash":"93b7d96dd0c4412cfb4d0c07c2fc93d8ddfffea0","modified":1621302211112},{"_id":"public/post/570953535.html","hash":"31a95f1177984e4795908559f43cafa59c408a1e","modified":1621302211112},{"_id":"public/post/445316081.html","hash":"1ff61b24ff8d05459a164fbeaea0ae1882a76bea","modified":1621302211112},{"_id":"public/post/1988337205.html","hash":"0d5c72d6074510eaf9fd2f22b7754aa452bf4016","modified":1621302211112},{"_id":"public/post/1724192415.html","hash":"b81f4c228135f2b76705ef0a3676e6f304763120","modified":1621302211112},{"_id":"public/post/961775144.html","hash":"ae2d3878164215148d59c2ba0f144800c1a96d95","modified":1621302211112},{"_id":"public/post/2235748871.html","hash":"8bf1bdf28c7644b77acade9b1be790d9fe6e32c3","modified":1621302211112},{"_id":"public/post/1323723771.html","hash":"8a8cb724baa7d086a5045fa92674d90298c2b3ea","modified":1621302211112},{"_id":"public/post/1691421171.html","hash":"03a3ad2195996721d15fb19388f80e7a58ffdedd","modified":1621302211112},{"_id":"public/post/1898961614.html","hash":"87d9e2838d5db117a5431b76abd510cb07cf556f","modified":1621302211112},{"_id":"public/post/2412115213.html","hash":"518d4f0721763d1362508f05a4049e1d14c84503","modified":1621302211112},{"_id":"public/post/4025057969.html","hash":"1f4830ac48d06a0cd03e98ae33329171266a25fc","modified":1621302211112},{"_id":"public/post/748313607.html","hash":"1807775fa106874f153fa6d9ab784b9e0af4e0bc","modified":1621302211112},{"_id":"public/archives/index.html","hash":"4a02cf083e2e43d9ee53e46a0073e01b1e04e717","modified":1621302211112},{"_id":"public/archives/page/2/index.html","hash":"50b8c93ea95d54db5589c270d85e68d33c0052c8","modified":1621302211112},{"_id":"public/archives/page/3/index.html","hash":"80a7f3b9d1756d249c8926a369df5736041be162","modified":1621302211112},{"_id":"public/archives/page/4/index.html","hash":"05d997e198610d8afce0a08c9f46d085ad678014","modified":1621302211112},{"_id":"public/archives/page/5/index.html","hash":"3f31ad53caf5fee1ec68cea879fba11f27c6a014","modified":1621302211112},{"_id":"public/archives/page/6/index.html","hash":"6eeb5a852f42627a8bf9f8711f1d745a49dc0b8d","modified":1621302211112},{"_id":"public/archives/page/7/index.html","hash":"389203bf2e3514f0f7d81972ece5b1263f33bfa9","modified":1621302211112},{"_id":"public/archives/2021/index.html","hash":"e1b9fdf4005d7295beca2e02689c58fbdfd82369","modified":1621302211112},{"_id":"public/archives/2021/page/2/index.html","hash":"6e6e4da79e45f6be498cff8c83077fdfad3cc988","modified":1621302211112},{"_id":"public/archives/2021/page/3/index.html","hash":"efe39368d7cf97ab579d12ed99b951246a59437c","modified":1621302211112},{"_id":"public/archives/2021/page/4/index.html","hash":"d3fb7e3d87ad06d7eb7440f6732984dc2cc2aacf","modified":1621302211112},{"_id":"public/archives/2021/page/5/index.html","hash":"45961899786282a6b766e34c8484498eca5957eb","modified":1621302211112},{"_id":"public/archives/2021/page/6/index.html","hash":"04a851a58c26f3f772fdb6972154a25bd83b8660","modified":1621302211112},{"_id":"public/archives/2021/page/7/index.html","hash":"0f92659dcb19934603119aa59d2972bae59f1ee7","modified":1621302211112},{"_id":"public/archives/2021/04/index.html","hash":"6462944621cf4aa0a60fde72b7ac88a9f0d65371","modified":1621302211112},{"_id":"public/archives/2021/04/page/2/index.html","hash":"72a94824cef11e5e5f06caf99e41be63f78cf00c","modified":1621302211112},{"_id":"public/archives/2021/04/page/3/index.html","hash":"d90297792c7b98b0eb34a9e9c872d65c3de066f9","modified":1621302211112},{"_id":"public/archives/2021/04/page/4/index.html","hash":"1cc8af13d1627fe5f24d41002c7666ebb13bf108","modified":1621302211112},{"_id":"public/archives/2021/04/page/5/index.html","hash":"e5056cced062d66bf36fcbc14d0532a69305483f","modified":1621302211112},{"_id":"public/archives/2021/04/page/6/index.html","hash":"c56c4e7d4779eacd9a0c694318973390a05064e2","modified":1621302211112},{"_id":"public/archives/2021/04/page/7/index.html","hash":"bb29b7e09cc142b5be8f75497acbda0435c1715b","modified":1621302211112},{"_id":"public/categories/课程笔记/index.html","hash":"9c2586274643d19adaf48d71c444c3e8e708850f","modified":1621302211112},{"_id":"public/categories/算法学习/index.html","hash":"3cacd3640bc8d05e8d98e68e791e17db71e3a801","modified":1621302211112},{"_id":"public/categories/课程笔记/22讲通关Go语言/index.html","hash":"736a63ca9ac464ae00be77f613e5a3b81f19a013","modified":1621302211112},{"_id":"public/categories/程序语言/index.html","hash":"c4ae6016349ac1dc3ac1f2822207d5fb9dd0538a","modified":1621302211112},{"_id":"public/categories/课程笔记/22讲通关Go语言/第一部分：Go语言快速入门/index.html","hash":"9debe30b417c9c7a84554b7bf099f21ae396624f","modified":1621302211112},{"_id":"public/categories/程序语言/page/2/index.html","hash":"a2f1fcd4d6294dd571939955ed0f59ee4c8a692b","modified":1621302211112},{"_id":"public/categories/课程笔记/22讲通关Go语言/开篇词/index.html","hash":"626a680bce24877c068e8e18db35f389568f125c","modified":1621302211112},{"_id":"public/categories/程序语言/PHP/index.html","hash":"85ca016e1333bb6ac405f828eeef1692344ba6e9","modified":1621302211112},{"_id":"public/categories/技术开发/index.html","hash":"139e6b7d4ccfee168bf12b70ca79b8a9543c8d33","modified":1621302211112},{"_id":"public/categories/程序语言/PHP/page/2/index.html","hash":"6b236eba9fea4093b9f3ca73431998df58a6ecc0","modified":1621302211112},{"_id":"public/categories/技术开发/page/3/index.html","hash":"78a0b96df0f3b7d0a6daa0fe9351eaa68f147612","modified":1621302211112},{"_id":"public/categories/技术开发/page/2/index.html","hash":"327cba890a7992312ebcbbb6eca56a57e4770472","modified":1621302211112},{"_id":"public/categories/技术开发/Docker/index.html","hash":"7220b0c33988a17da2de5bc99f51ef6a3be7100d","modified":1621302211112},{"_id":"public/categories/服务Server/index.html","hash":"9f47df7c0dc93c2a65bc490b1ee44ee2b0babfb1","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/index.html","hash":"7302cff29181e0146b73b0f532985045d61325a0","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/page/2/index.html","hash":"18bfb8034979b68b4dd8ebf61911b38a5b35e51b","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/page/3/index.html","hash":"62d513a0e27c4ee6a78d9a66945e7090a26f21d2","modified":1621302211112},{"_id":"public/categories/技术开发/Leetcode/index.html","hash":"3aeebf3fb0c0eb1fd03682b9b92ef7e805b76640","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/Mongo/index.html","hash":"fa6b2822d47f7961a6967d992e13f57836f88055","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/Oracle/index.html","hash":"398731171d24f2590987e3c649fd6ec283882aee","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/Redis/index.html","hash":"fe4c4e2e40154c719d4e5bd44cd75be12ba5139e","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/Memcache/index.html","hash":"0100ba4a60a64bc55812764470f3d4d92addff33","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/MySQL/index.html","hash":"3abf7b00c75014d0632de9f9ecc6ecf789de962e","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/SSDB/index.html","hash":"d08507e06e9fc8e164979a1735dbc819118f49c7","modified":1621302211112},{"_id":"public/categories/Other/index.html","hash":"f18e6e3c5db88ae3b8b780c62c4155e54e692999","modified":1621302211112},{"_id":"public/categories/技术开发/数据库/MySQL/page/2/index.html","hash":"930f21269d84a5b14bd10e689f1f1ded89dc3c0e","modified":1621302211112},{"_id":"public/index.html","hash":"c3129dd51ac90615bdfba4e884ac5598e02cedad","modified":1621302211112},{"_id":"public/page/2/index.html","hash":"84a40e068977e3a074578e275e8384c1fb2481ba","modified":1621302211112},{"_id":"public/page/3/index.html","hash":"b939eee00528798f7b9d9b3bcbdb84a573fcf78b","modified":1621302211112},{"_id":"public/page/4/index.html","hash":"300283d87d72d298aaf1d6ba6334543abf8f3725","modified":1621302211112},{"_id":"public/page/5/index.html","hash":"a50e0d5d644610433cf6ec5bd5005bcbb3cb63c8","modified":1621302211112},{"_id":"public/page/6/index.html","hash":"16300b2fd109549bad35e036af41345f9b4bbe87","modified":1621302211112},{"_id":"public/page/7/index.html","hash":"d402bf415ff706a38432d2f926486a14ce6a6ec9","modified":1621302211112},{"_id":"public/tags/面试/index.html","hash":"ccdef302ad2d3f5723a06644898f7c6bd3ccb522","modified":1621302211112},{"_id":"public/tags/排序/index.html","hash":"a97b6cc614442a3f2fc8883c0e6c4a54c5b7b54b","modified":1621302211112},{"_id":"public/tags/优秀网站/index.html","hash":"2c847d108e1cca8133f3d52b29541ea547c84d4d","modified":1621302211112},{"_id":"public/tags/SSDB/index.html","hash":"755a584fa9091b8d3e70f013755aec7f23303d06","modified":1621302211112},{"_id":"public/tags/技术开发/index.html","hash":"e787e5778e469cc274f43612fbe708b841814a46","modified":1621302211112},{"_id":"public/tags/Ubuntu/index.html","hash":"3f4f26f59b18a9f0ae24dc4d5a4635269df8a7c0","modified":1621302211112},{"_id":"public/tags/Linux/index.html","hash":"1b7fb407de2d1062b968534f85b593cfcc8034ee","modified":1621302211112},{"_id":"public/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1621302211112},{"_id":"public/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1621302211112},{"_id":"public/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1621302211112},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1621302211112},{"_id":"public/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1621302211112},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1621302211112},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1621302211112},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1621302211112},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1621302211112},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1621302211112},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1621302211112},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1621302211112},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1621302211112},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1621302211112},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1621302211112},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1621302211112},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1621302211112},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1621302211112},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1621302211112},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1621302211112},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1621302211112},{"_id":"public/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1621302211112},{"_id":"public/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1621302211112},{"_id":"public/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1621302211112},{"_id":"public/js/main.js","hash":"16b8b4c87801386fbbd144d8a803454d175505f9","modified":1621302211112},{"_id":"public/js/insight.js","hash":"c9dfd20ae82a446facad01439b7bb75332e3705b","modified":1621302211112},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1621302211112},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1621302211112},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1621302211112},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1621302211112},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1621302211112},{"_id":"public/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8","modified":1621302211112},{"_id":"public/css/style.css","hash":"2a4510832cf8c753a54ab29f0bab3346b8e68463","modified":1621302211112},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1621302211112},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1621302211112},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1621302211112},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1621302211112},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1621302211112},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1621302211112},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1621302211112},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1621302211112},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1621302211112}],"Category":[{"name":"算法学习","_id":"ckotdh5u30009kw8zgf5364n6"},{"name":"课程笔记","_id":"ckotdh5uq000ykw8z0jxo091s"},{"name":"22讲通关Go语言","parent":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5v4001hkw8zhqwe1x2m"},{"name":"程序语言","_id":"ckotdh5vx0029kw8zhliw4l4w"},{"name":"第一部分：Go语言快速入门","parent":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5vz002ckw8z7d4f937w"},{"name":"开篇词","parent":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5wd002nkw8z14td2igt"},{"name":"PHP","parent":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5xi004skw8z71899wvg"},{"name":"技术开发","_id":"ckotdh5xk004xkw8z04zb7ge2"},{"name":"服务Server","_id":"ckotdh5y8006gkw8z62t7f2u7"},{"name":"Docker","parent":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5yk0077kw8z8bl42hq0"},{"name":"数据库","parent":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5yp007dkw8z6xzidbk0"},{"name":"Leetcode","parent":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5yt007jkw8z8nusb2q2"},{"name":"Mongo","parent":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5z60088kw8zgtj153kh"},{"name":"Oracle","parent":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5z9008dkw8z9fs88rlq"},{"name":"Redis","parent":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zc008kkw8zes8t16dh"},{"name":"Memcache","parent":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zf008tkw8zff10a1ls"},{"name":"SSDB","parent":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zh008zkw8zd7z63hr9"},{"name":"MySQL","parent":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zj0095kw8zf4f4dv7i"},{"name":"Other","_id":"ckotdh63r00awkw8zewsyhvfg"}],"Data":[],"Page":[{"title":"About","layout":"page","_content":"我就是我，最美的烟火","source":"about/index.md","raw":"---\ntitle: \"About\"\nlayout: \"page\"\n---\n我就是我，最美的烟火","date":"2021-05-18T01:40:54.042Z","updated":"2021-04-20T04:53:43.658Z","path":"about/index.html","comments":1,"_id":"ckotdh5th0000kw8zg8kcgd2m","content":"<p>我就是我，最美的烟火</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我就是我，最美的烟火</p>\n"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2021-04-20T04:56:34.695Z","updated":"2021-04-20T04:55:01.949Z","path":"categories/index.html","comments":1,"_id":"ckotdh5tv0002kw8z1hfq7o4c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2021-05-18T01:41:20.618Z","updated":"2021-04-20T04:53:56.600Z","path":"tags/index.html","comments":1,"_id":"ckotdh5u00005kw8z2dx3gvx4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Go进阶训练营课程大纲学习体系","_content":"\n### 模块一Go 语言实践 - Runtime\n\n### 教学目标\n\n1. 了解 Go 语言中 Goroutine 的调度原理\n\n2. 了解 Go 语言中的内存模型\n\n3. 了解 Go 语言中 GC（垃圾回收）的原理\n\n4. 了解 Go 语言中 channel 的消息通讯原理\n\n### 学习和工作中的痛点\n\n1. 分不清 Goroutine 和线程的区别\n\n2. 不熟悉 Go 的内存分配机制\n\n3. 搞不懂 GC 三色标记算法\n\n4. 不了解 channel 的底层实现\n\n### 详细内容\n\n1. Goroutine 的实现、GPM 调度模型、调度状态及流转、调度原理、协作式抢占以及和网络库的协作\n\n2. Go 内存分配的内部结构和分配机制\n\n3. Go GC 介绍、三色标记的实现原理、GC 的流程以及 GC 的一些优化方案\n\n4. Go channel 的通讯机制、环形队列的结构、调度和唤醒的原理\n\n### 模块二：Go 语言实践 - 并行编程\n\n### 教学目标\n\n1. 了解 Go 语言中的 Memory Model\n\n2. 了解 Go 语言的并发特性并发编程模式：Timeout、Pipeline、Cancellation、Fanout、errgroup 等模式\n\n3. 了解 Go 语言中 Context 的原理并掌握其使用方法\n\n### 学习和工作中的痛点\n\n1. 搞不清楚 Go 中内存模型和同步语义\n\n2. 无法熟练使用基于 channel 通讯方式的并行编程模式\n\n3. 不明白 Context 传播式传递有什么意义\n\n### 详细内容\n\n1. 内存模型：Happens Before、同步语义、channel 通讯、锁\n\n2. 利用 channel 完成并行开发的设计模式，包含超时控制、管道、扇出、errgroup 并发\n\n3. 使用 Go 标准库 Context 的原理和最佳实践，包含超时控制、元数据传递、生命周期控制\n\n### 模块三：Go 语言实践 - 网络编程\n\n### 教学目标\n\n1. 熟练掌握 Go 语言中的 TCP 网络编程\n\n2. 熟练掌握 Go 语言中的 HTTP 网络编程\n\n### 学习和工作中的痛点\n\n1. 不知道怎么用 Go 实现高性能的 TCP Server\n\n2. HTTP 框架有不少，但不知道怎样做选型\n\n3. 不会针对业务需求对 HTTP 框架做针对性的扩展\n\n### 详细内容\n\n1. 结合 goim 项目了解 Go 语言中 TCP Server 的基础库和性能优化方案\n\n2. 结合 gin 项目了解 Go 语言中的 HTTP Server 的基础库和框架\n\n### 模块四：Go 语言实践 - 异常处理\n\n### 教学目标\n\n1. 了解 Go 语言中 error 的处理方法\n\n2. 了解 Go 语言中业务错误的处理方法\n\n### 学习和工作中的痛点\n\n1. error 的处理复杂，不会正确使用\n\n2. 业务错误定义和 error 整合难度较高\n\n### 详细内容\n\n1. Go 语言中的 error 处理实践：检查错误、定义错误、追加上下文\n\n2. Go 项目中的业务错误码如何结合 error 的最佳实践\n\n### 模块五：Go 工程化实践\n\n### 教学目标\n\n1. 了解 Go 项目中良好的项目目录组织原则和规范\n\n2. 了解 Go 项目中 API 的设计方法和规范\n\n3. 了解 Go 项目中 Package 的管理和设计方法\n\n4. 了解 Go 项目中的单元测试方法\n\n### 学习和工作中的痛点\n\n1. 不知道怎么做 Go 项目的标准化管理\n\n2. 总是设计出各种不合理的 API\n\n3. 不知道怎么做包管理\n\n### 详细内容\n\n1. 良好的 Go 项目中的分层目录结构组织和代码规范\n\n2. Go 项目中 API 的设计原则和方法：定义、状态和业务错误码处理\n\n3. Go 项目中包的设计和最佳实践、go mod 的使用\n\n4. go test 工具链的使用方法、单元测试的最佳实践以及 Mock 技术\n\n### 模块六：Go 架构实践 - 分布式架构（前端负载均衡）\n\n### 教学目标\n\n1. 掌握高可用 DNS 的最佳实践\n\n2. 了解 CDN 的架构和应用场景\n\n3. 深入理解 4/7 层负载均衡的原理\n\n### 学习和工作中的痛点\n\n1. 缺乏对在线服务的全链路视野\n\n2. 不了解应用服务上层的负载均衡\n\n### 详细内容\n\n1. DNS 的原理、防劫持的方法、HTTPDNS + IP 长连接\n\n2. CDN 的系统架构、应用领域以及保证数据一致性的方法\n\n3. LVS、Nginx 4/7 层负载均衡的原理和实践\n\n### 模块七：Go 架构实践 - 分布式架构（数据分片）\n\n### 教学目标\n\n1. 掌握数据 Sharding 的设计原则\n\n2. 了解 Hash 分片的算法和演进历史\n\n### 学习和工作中的痛点\n\n1. 不了解 Sharding 的应用场景，不会合理使用\n\n2. 搞不清楚各种变种 Hash 算法的使用场景\n\n### 详细内容\n\n1. 架构设计中的数据分片设计，如：分库分表、多活的 Shard 设计等等\n\n2. 分片算法的 Hash 实现和演进：Hash 求余、一致性 Hash、有界负载一致性 Hash、节点映射\n\n### 模块八：Go 架构实践 - 微服务（微服务概览与治理）\n\n### 教学目标\n\n1. 了解微服务的演进历史及它的优缺点\n\n2. 了解微服务的设计方法\n\n3. 了解微服务中 RPC 的底层原理\n\n### 学习和工作中的痛点\n\n1. 不理解微服务的服务角色：API Gateway、BFF 还是 Service？\n\n2. 不知道怎么做微服务拆分\n\n3. 不理解 RPC 的原理，不知道如何进行微服务 RPC 框架的选型\n\n### 详细内容\n\n1. 微服务的原理、概念，以及微服务的实现细节\n\n2. API Gateway、BFF、Service 等概念精讲\n\n3. 微服务通讯 RPC 框架的细节和选型\n\n### 模块九：Go 架构实践 - 微服务（可用性设计）\n\n### 教学目标\n\n1. 掌握可用性设计的最佳实践\n\n2. 了解可用性设计的几大关键点：隔离、超时控制、过载保护、限流、容错&重试\n\n### 学习和工作中的痛点\n\n1. 不知道如何设计高可用的分布式服务\n\n2. 不清楚如何提升服务自愈能力\n\n### 详细内容\n\n1. 微服务的隔离实现，以及架构设计中的隔离实现\n\n2. 进程内超时控制和跨进程超时控制\n\n3. 程序自保护避免过载，抛弃一定的流量完成自适应限流\n\n4. 单机限流、多租户场景的分布式限流\n\n5. 节点故障的容错逻辑、重试容错的策略和设计\n\n### 模块十：Go 架构实践 - 中间件（日志、指标、链路追踪）\n\n### 教学目标\n\n1. 了解 Go 项目中的日志收集\n\n2. 了解 Go 项目中的监控指标体系\n\n3. 了解 Go 项目中的分布式链路追踪\n\n### 学习和工作中的痛点\n\n1. 不知道如何解决微服务的可观测性难题\n\n2. 不清楚怎么做微服务的可视化和标准化\n\n3. 出故障后，难以对微服务进行问题诊断\n\n### 详细内容\n\n1. 实现一个可以集中收集所有微服务实例的日志，并能统一查看和检索的日志采集架构\n\n2. 指标监控、使用 Prometheus 解决监控可视化、指标采集\n\n3. 微服务中的跨服务性能问题诊断，结合 Jaeger 实现分布式链路追踪\n\n### 模块十一：Go 架构实践 - 中间件（缓存、数据库）\n\n### 教学目标\n\n1. 了解 Redis、Memcache 的原理和实战技巧\n\n2. 了解 MySQL 的常用设计和优化方法\n\n### 学习和工作中的痛点\n\n1. 不会解决缓存的一致性问题\n\n2. 不知道怎样合理地设计 MySQL 的表\n\n### 详细内容\n\n1. Redis、Memcache 的应用场景、最佳实践，以及缓存的一致性设计\n\n2. MySQL 的表设计、常用优化手段，以及如何解决分布式事务\n\n### 模块十二：Go 架构实践 - 中间件（消息队列、服务发现）\n\n### 教学目标\n\n1. 深入理解消息队列的原理，掌握基于消息队列的架构设计方法\n\n2. 服务发现原理、选型策略，以及服务发现实现的微服务多租户架构\n\n### 学习和工作中的痛点\n\n1. 不会做消息解耦的架构设计\n\n2. 不清楚如何实现服务发现对平滑发布的支持\n\n3. 不知道怎样利用多租户实现多测试环境\n\n### 详细内容\n\n1. Kafka 的实现原理、异步消息系统的架构设计\n\n2. RPC 服务发现、动态地址的选型和实现原理，以及基于服务发现的平滑重启和多租户架构","source":"share/Go进阶训练营课程大纲学习体系.md","raw":"---\ntitle: Go进阶训练营课程大纲学习体系\n\n---\n\n### 模块一Go 语言实践 - Runtime\n\n### 教学目标\n\n1. 了解 Go 语言中 Goroutine 的调度原理\n\n2. 了解 Go 语言中的内存模型\n\n3. 了解 Go 语言中 GC（垃圾回收）的原理\n\n4. 了解 Go 语言中 channel 的消息通讯原理\n\n### 学习和工作中的痛点\n\n1. 分不清 Goroutine 和线程的区别\n\n2. 不熟悉 Go 的内存分配机制\n\n3. 搞不懂 GC 三色标记算法\n\n4. 不了解 channel 的底层实现\n\n### 详细内容\n\n1. Goroutine 的实现、GPM 调度模型、调度状态及流转、调度原理、协作式抢占以及和网络库的协作\n\n2. Go 内存分配的内部结构和分配机制\n\n3. Go GC 介绍、三色标记的实现原理、GC 的流程以及 GC 的一些优化方案\n\n4. Go channel 的通讯机制、环形队列的结构、调度和唤醒的原理\n\n### 模块二：Go 语言实践 - 并行编程\n\n### 教学目标\n\n1. 了解 Go 语言中的 Memory Model\n\n2. 了解 Go 语言的并发特性并发编程模式：Timeout、Pipeline、Cancellation、Fanout、errgroup 等模式\n\n3. 了解 Go 语言中 Context 的原理并掌握其使用方法\n\n### 学习和工作中的痛点\n\n1. 搞不清楚 Go 中内存模型和同步语义\n\n2. 无法熟练使用基于 channel 通讯方式的并行编程模式\n\n3. 不明白 Context 传播式传递有什么意义\n\n### 详细内容\n\n1. 内存模型：Happens Before、同步语义、channel 通讯、锁\n\n2. 利用 channel 完成并行开发的设计模式，包含超时控制、管道、扇出、errgroup 并发\n\n3. 使用 Go 标准库 Context 的原理和最佳实践，包含超时控制、元数据传递、生命周期控制\n\n### 模块三：Go 语言实践 - 网络编程\n\n### 教学目标\n\n1. 熟练掌握 Go 语言中的 TCP 网络编程\n\n2. 熟练掌握 Go 语言中的 HTTP 网络编程\n\n### 学习和工作中的痛点\n\n1. 不知道怎么用 Go 实现高性能的 TCP Server\n\n2. HTTP 框架有不少，但不知道怎样做选型\n\n3. 不会针对业务需求对 HTTP 框架做针对性的扩展\n\n### 详细内容\n\n1. 结合 goim 项目了解 Go 语言中 TCP Server 的基础库和性能优化方案\n\n2. 结合 gin 项目了解 Go 语言中的 HTTP Server 的基础库和框架\n\n### 模块四：Go 语言实践 - 异常处理\n\n### 教学目标\n\n1. 了解 Go 语言中 error 的处理方法\n\n2. 了解 Go 语言中业务错误的处理方法\n\n### 学习和工作中的痛点\n\n1. error 的处理复杂，不会正确使用\n\n2. 业务错误定义和 error 整合难度较高\n\n### 详细内容\n\n1. Go 语言中的 error 处理实践：检查错误、定义错误、追加上下文\n\n2. Go 项目中的业务错误码如何结合 error 的最佳实践\n\n### 模块五：Go 工程化实践\n\n### 教学目标\n\n1. 了解 Go 项目中良好的项目目录组织原则和规范\n\n2. 了解 Go 项目中 API 的设计方法和规范\n\n3. 了解 Go 项目中 Package 的管理和设计方法\n\n4. 了解 Go 项目中的单元测试方法\n\n### 学习和工作中的痛点\n\n1. 不知道怎么做 Go 项目的标准化管理\n\n2. 总是设计出各种不合理的 API\n\n3. 不知道怎么做包管理\n\n### 详细内容\n\n1. 良好的 Go 项目中的分层目录结构组织和代码规范\n\n2. Go 项目中 API 的设计原则和方法：定义、状态和业务错误码处理\n\n3. Go 项目中包的设计和最佳实践、go mod 的使用\n\n4. go test 工具链的使用方法、单元测试的最佳实践以及 Mock 技术\n\n### 模块六：Go 架构实践 - 分布式架构（前端负载均衡）\n\n### 教学目标\n\n1. 掌握高可用 DNS 的最佳实践\n\n2. 了解 CDN 的架构和应用场景\n\n3. 深入理解 4/7 层负载均衡的原理\n\n### 学习和工作中的痛点\n\n1. 缺乏对在线服务的全链路视野\n\n2. 不了解应用服务上层的负载均衡\n\n### 详细内容\n\n1. DNS 的原理、防劫持的方法、HTTPDNS + IP 长连接\n\n2. CDN 的系统架构、应用领域以及保证数据一致性的方法\n\n3. LVS、Nginx 4/7 层负载均衡的原理和实践\n\n### 模块七：Go 架构实践 - 分布式架构（数据分片）\n\n### 教学目标\n\n1. 掌握数据 Sharding 的设计原则\n\n2. 了解 Hash 分片的算法和演进历史\n\n### 学习和工作中的痛点\n\n1. 不了解 Sharding 的应用场景，不会合理使用\n\n2. 搞不清楚各种变种 Hash 算法的使用场景\n\n### 详细内容\n\n1. 架构设计中的数据分片设计，如：分库分表、多活的 Shard 设计等等\n\n2. 分片算法的 Hash 实现和演进：Hash 求余、一致性 Hash、有界负载一致性 Hash、节点映射\n\n### 模块八：Go 架构实践 - 微服务（微服务概览与治理）\n\n### 教学目标\n\n1. 了解微服务的演进历史及它的优缺点\n\n2. 了解微服务的设计方法\n\n3. 了解微服务中 RPC 的底层原理\n\n### 学习和工作中的痛点\n\n1. 不理解微服务的服务角色：API Gateway、BFF 还是 Service？\n\n2. 不知道怎么做微服务拆分\n\n3. 不理解 RPC 的原理，不知道如何进行微服务 RPC 框架的选型\n\n### 详细内容\n\n1. 微服务的原理、概念，以及微服务的实现细节\n\n2. API Gateway、BFF、Service 等概念精讲\n\n3. 微服务通讯 RPC 框架的细节和选型\n\n### 模块九：Go 架构实践 - 微服务（可用性设计）\n\n### 教学目标\n\n1. 掌握可用性设计的最佳实践\n\n2. 了解可用性设计的几大关键点：隔离、超时控制、过载保护、限流、容错&重试\n\n### 学习和工作中的痛点\n\n1. 不知道如何设计高可用的分布式服务\n\n2. 不清楚如何提升服务自愈能力\n\n### 详细内容\n\n1. 微服务的隔离实现，以及架构设计中的隔离实现\n\n2. 进程内超时控制和跨进程超时控制\n\n3. 程序自保护避免过载，抛弃一定的流量完成自适应限流\n\n4. 单机限流、多租户场景的分布式限流\n\n5. 节点故障的容错逻辑、重试容错的策略和设计\n\n### 模块十：Go 架构实践 - 中间件（日志、指标、链路追踪）\n\n### 教学目标\n\n1. 了解 Go 项目中的日志收集\n\n2. 了解 Go 项目中的监控指标体系\n\n3. 了解 Go 项目中的分布式链路追踪\n\n### 学习和工作中的痛点\n\n1. 不知道如何解决微服务的可观测性难题\n\n2. 不清楚怎么做微服务的可视化和标准化\n\n3. 出故障后，难以对微服务进行问题诊断\n\n### 详细内容\n\n1. 实现一个可以集中收集所有微服务实例的日志，并能统一查看和检索的日志采集架构\n\n2. 指标监控、使用 Prometheus 解决监控可视化、指标采集\n\n3. 微服务中的跨服务性能问题诊断，结合 Jaeger 实现分布式链路追踪\n\n### 模块十一：Go 架构实践 - 中间件（缓存、数据库）\n\n### 教学目标\n\n1. 了解 Redis、Memcache 的原理和实战技巧\n\n2. 了解 MySQL 的常用设计和优化方法\n\n### 学习和工作中的痛点\n\n1. 不会解决缓存的一致性问题\n\n2. 不知道怎样合理地设计 MySQL 的表\n\n### 详细内容\n\n1. Redis、Memcache 的应用场景、最佳实践，以及缓存的一致性设计\n\n2. MySQL 的表设计、常用优化手段，以及如何解决分布式事务\n\n### 模块十二：Go 架构实践 - 中间件（消息队列、服务发现）\n\n### 教学目标\n\n1. 深入理解消息队列的原理，掌握基于消息队列的架构设计方法\n\n2. 服务发现原理、选型策略，以及服务发现实现的微服务多租户架构\n\n### 学习和工作中的痛点\n\n1. 不会做消息解耦的架构设计\n\n2. 不清楚如何实现服务发现对平滑发布的支持\n\n3. 不知道怎样利用多租户实现多测试环境\n\n### 详细内容\n\n1. Kafka 的实现原理、异步消息系统的架构设计\n\n2. RPC 服务发现、动态地址的选型和实现原理，以及基于服务发现的平滑重启和多租户架构","date":"2021-05-18T01:42:31.618Z","updated":"2021-05-18T01:42:31.618Z","path":"share/Go进阶训练营课程大纲学习体系.html","comments":1,"layout":"page","_id":"ckotdh5u20007kw8z0npedmr4","content":"<h3 id=\"模块一Go-语言实践-Runtime\"><a href=\"#模块一Go-语言实践-Runtime\" class=\"headerlink\" title=\"模块一Go 语言实践 - Runtime\"></a>模块一Go 语言实践 - Runtime</h3><h3 id=\"教学目标\"><a href=\"#教学目标\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 语言中 Goroutine 的调度原理</p>\n</li>\n<li><p>了解 Go 语言中的内存模型</p>\n</li>\n<li><p>了解 Go 语言中 GC（垃圾回收）的原理</p>\n</li>\n<li><p>了解 Go 语言中 channel 的消息通讯原理</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点\"><a href=\"#学习和工作中的痛点\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>分不清 Goroutine 和线程的区别</p>\n</li>\n<li><p>不熟悉 Go 的内存分配机制</p>\n</li>\n<li><p>搞不懂 GC 三色标记算法</p>\n</li>\n<li><p>不了解 channel 的底层实现</p>\n</li>\n</ol>\n<h3 id=\"详细内容\"><a href=\"#详细内容\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>Goroutine 的实现、GPM 调度模型、调度状态及流转、调度原理、协作式抢占以及和网络库的协作</p>\n</li>\n<li><p>Go 内存分配的内部结构和分配机制</p>\n</li>\n<li><p>Go GC 介绍、三色标记的实现原理、GC 的流程以及 GC 的一些优化方案</p>\n</li>\n<li><p>Go channel 的通讯机制、环形队列的结构、调度和唤醒的原理</p>\n</li>\n</ol>\n<h3 id=\"模块二：Go-语言实践-并行编程\"><a href=\"#模块二：Go-语言实践-并行编程\" class=\"headerlink\" title=\"模块二：Go 语言实践 - 并行编程\"></a>模块二：Go 语言实践 - 并行编程</h3><h3 id=\"教学目标-1\"><a href=\"#教学目标-1\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 语言中的 Memory Model</p>\n</li>\n<li><p>了解 Go 语言的并发特性并发编程模式：Timeout、Pipeline、Cancellation、Fanout、errgroup 等模式</p>\n</li>\n<li><p>了解 Go 语言中 Context 的原理并掌握其使用方法</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-1\"><a href=\"#学习和工作中的痛点-1\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>搞不清楚 Go 中内存模型和同步语义</p>\n</li>\n<li><p>无法熟练使用基于 channel 通讯方式的并行编程模式</p>\n</li>\n<li><p>不明白 Context 传播式传递有什么意义</p>\n</li>\n</ol>\n<h3 id=\"详细内容-1\"><a href=\"#详细内容-1\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>内存模型：Happens Before、同步语义、channel 通讯、锁</p>\n</li>\n<li><p>利用 channel 完成并行开发的设计模式，包含超时控制、管道、扇出、errgroup 并发</p>\n</li>\n<li><p>使用 Go 标准库 Context 的原理和最佳实践，包含超时控制、元数据传递、生命周期控制</p>\n</li>\n</ol>\n<h3 id=\"模块三：Go-语言实践-网络编程\"><a href=\"#模块三：Go-语言实践-网络编程\" class=\"headerlink\" title=\"模块三：Go 语言实践 - 网络编程\"></a>模块三：Go 语言实践 - 网络编程</h3><h3 id=\"教学目标-2\"><a href=\"#教学目标-2\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>熟练掌握 Go 语言中的 TCP 网络编程</p>\n</li>\n<li><p>熟练掌握 Go 语言中的 HTTP 网络编程</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-2\"><a href=\"#学习和工作中的痛点-2\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不知道怎么用 Go 实现高性能的 TCP Server</p>\n</li>\n<li><p>HTTP 框架有不少，但不知道怎样做选型</p>\n</li>\n<li><p>不会针对业务需求对 HTTP 框架做针对性的扩展</p>\n</li>\n</ol>\n<h3 id=\"详细内容-2\"><a href=\"#详细内容-2\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>结合 goim 项目了解 Go 语言中 TCP Server 的基础库和性能优化方案</p>\n</li>\n<li><p>结合 gin 项目了解 Go 语言中的 HTTP Server 的基础库和框架</p>\n</li>\n</ol>\n<h3 id=\"模块四：Go-语言实践-异常处理\"><a href=\"#模块四：Go-语言实践-异常处理\" class=\"headerlink\" title=\"模块四：Go 语言实践 - 异常处理\"></a>模块四：Go 语言实践 - 异常处理</h3><h3 id=\"教学目标-3\"><a href=\"#教学目标-3\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 语言中 error 的处理方法</p>\n</li>\n<li><p>了解 Go 语言中业务错误的处理方法</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-3\"><a href=\"#学习和工作中的痛点-3\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>error 的处理复杂，不会正确使用</p>\n</li>\n<li><p>业务错误定义和 error 整合难度较高</p>\n</li>\n</ol>\n<h3 id=\"详细内容-3\"><a href=\"#详细内容-3\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>Go 语言中的 error 处理实践：检查错误、定义错误、追加上下文</p>\n</li>\n<li><p>Go 项目中的业务错误码如何结合 error 的最佳实践</p>\n</li>\n</ol>\n<h3 id=\"模块五：Go-工程化实践\"><a href=\"#模块五：Go-工程化实践\" class=\"headerlink\" title=\"模块五：Go 工程化实践\"></a>模块五：Go 工程化实践</h3><h3 id=\"教学目标-4\"><a href=\"#教学目标-4\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 项目中良好的项目目录组织原则和规范</p>\n</li>\n<li><p>了解 Go 项目中 API 的设计方法和规范</p>\n</li>\n<li><p>了解 Go 项目中 Package 的管理和设计方法</p>\n</li>\n<li><p>了解 Go 项目中的单元测试方法</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-4\"><a href=\"#学习和工作中的痛点-4\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不知道怎么做 Go 项目的标准化管理</p>\n</li>\n<li><p>总是设计出各种不合理的 API</p>\n</li>\n<li><p>不知道怎么做包管理</p>\n</li>\n</ol>\n<h3 id=\"详细内容-4\"><a href=\"#详细内容-4\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>良好的 Go 项目中的分层目录结构组织和代码规范</p>\n</li>\n<li><p>Go 项目中 API 的设计原则和方法：定义、状态和业务错误码处理</p>\n</li>\n<li><p>Go 项目中包的设计和最佳实践、go mod 的使用</p>\n</li>\n<li><p>go test 工具链的使用方法、单元测试的最佳实践以及 Mock 技术</p>\n</li>\n</ol>\n<h3 id=\"模块六：Go-架构实践-分布式架构（前端负载均衡）\"><a href=\"#模块六：Go-架构实践-分布式架构（前端负载均衡）\" class=\"headerlink\" title=\"模块六：Go 架构实践 - 分布式架构（前端负载均衡）\"></a>模块六：Go 架构实践 - 分布式架构（前端负载均衡）</h3><h3 id=\"教学目标-5\"><a href=\"#教学目标-5\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>掌握高可用 DNS 的最佳实践</p>\n</li>\n<li><p>了解 CDN 的架构和应用场景</p>\n</li>\n<li><p>深入理解 4/7 层负载均衡的原理</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-5\"><a href=\"#学习和工作中的痛点-5\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>缺乏对在线服务的全链路视野</p>\n</li>\n<li><p>不了解应用服务上层的负载均衡</p>\n</li>\n</ol>\n<h3 id=\"详细内容-5\"><a href=\"#详细内容-5\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>DNS 的原理、防劫持的方法、HTTPDNS + IP 长连接</p>\n</li>\n<li><p>CDN 的系统架构、应用领域以及保证数据一致性的方法</p>\n</li>\n<li><p>LVS、Nginx 4/7 层负载均衡的原理和实践</p>\n</li>\n</ol>\n<h3 id=\"模块七：Go-架构实践-分布式架构（数据分片）\"><a href=\"#模块七：Go-架构实践-分布式架构（数据分片）\" class=\"headerlink\" title=\"模块七：Go 架构实践 - 分布式架构（数据分片）\"></a>模块七：Go 架构实践 - 分布式架构（数据分片）</h3><h3 id=\"教学目标-6\"><a href=\"#教学目标-6\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>掌握数据 Sharding 的设计原则</p>\n</li>\n<li><p>了解 Hash 分片的算法和演进历史</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-6\"><a href=\"#学习和工作中的痛点-6\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不了解 Sharding 的应用场景，不会合理使用</p>\n</li>\n<li><p>搞不清楚各种变种 Hash 算法的使用场景</p>\n</li>\n</ol>\n<h3 id=\"详细内容-6\"><a href=\"#详细内容-6\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>架构设计中的数据分片设计，如：分库分表、多活的 Shard 设计等等</p>\n</li>\n<li><p>分片算法的 Hash 实现和演进：Hash 求余、一致性 Hash、有界负载一致性 Hash、节点映射</p>\n</li>\n</ol>\n<h3 id=\"模块八：Go-架构实践-微服务（微服务概览与治理）\"><a href=\"#模块八：Go-架构实践-微服务（微服务概览与治理）\" class=\"headerlink\" title=\"模块八：Go 架构实践 - 微服务（微服务概览与治理）\"></a>模块八：Go 架构实践 - 微服务（微服务概览与治理）</h3><h3 id=\"教学目标-7\"><a href=\"#教学目标-7\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解微服务的演进历史及它的优缺点</p>\n</li>\n<li><p>了解微服务的设计方法</p>\n</li>\n<li><p>了解微服务中 RPC 的底层原理</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-7\"><a href=\"#学习和工作中的痛点-7\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不理解微服务的服务角色：API Gateway、BFF 还是 Service？</p>\n</li>\n<li><p>不知道怎么做微服务拆分</p>\n</li>\n<li><p>不理解 RPC 的原理，不知道如何进行微服务 RPC 框架的选型</p>\n</li>\n</ol>\n<h3 id=\"详细内容-7\"><a href=\"#详细内容-7\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>微服务的原理、概念，以及微服务的实现细节</p>\n</li>\n<li><p>API Gateway、BFF、Service 等概念精讲</p>\n</li>\n<li><p>微服务通讯 RPC 框架的细节和选型</p>\n</li>\n</ol>\n<h3 id=\"模块九：Go-架构实践-微服务（可用性设计）\"><a href=\"#模块九：Go-架构实践-微服务（可用性设计）\" class=\"headerlink\" title=\"模块九：Go 架构实践 - 微服务（可用性设计）\"></a>模块九：Go 架构实践 - 微服务（可用性设计）</h3><h3 id=\"教学目标-8\"><a href=\"#教学目标-8\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>掌握可用性设计的最佳实践</p>\n</li>\n<li><p>了解可用性设计的几大关键点：隔离、超时控制、过载保护、限流、容错&amp;重试</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-8\"><a href=\"#学习和工作中的痛点-8\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不知道如何设计高可用的分布式服务</p>\n</li>\n<li><p>不清楚如何提升服务自愈能力</p>\n</li>\n</ol>\n<h3 id=\"详细内容-8\"><a href=\"#详细内容-8\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>微服务的隔离实现，以及架构设计中的隔离实现</p>\n</li>\n<li><p>进程内超时控制和跨进程超时控制</p>\n</li>\n<li><p>程序自保护避免过载，抛弃一定的流量完成自适应限流</p>\n</li>\n<li><p>单机限流、多租户场景的分布式限流</p>\n</li>\n<li><p>节点故障的容错逻辑、重试容错的策略和设计</p>\n</li>\n</ol>\n<h3 id=\"模块十：Go-架构实践-中间件（日志、指标、链路追踪）\"><a href=\"#模块十：Go-架构实践-中间件（日志、指标、链路追踪）\" class=\"headerlink\" title=\"模块十：Go 架构实践 - 中间件（日志、指标、链路追踪）\"></a>模块十：Go 架构实践 - 中间件（日志、指标、链路追踪）</h3><h3 id=\"教学目标-9\"><a href=\"#教学目标-9\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 项目中的日志收集</p>\n</li>\n<li><p>了解 Go 项目中的监控指标体系</p>\n</li>\n<li><p>了解 Go 项目中的分布式链路追踪</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-9\"><a href=\"#学习和工作中的痛点-9\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不知道如何解决微服务的可观测性难题</p>\n</li>\n<li><p>不清楚怎么做微服务的可视化和标准化</p>\n</li>\n<li><p>出故障后，难以对微服务进行问题诊断</p>\n</li>\n</ol>\n<h3 id=\"详细内容-9\"><a href=\"#详细内容-9\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>实现一个可以集中收集所有微服务实例的日志，并能统一查看和检索的日志采集架构</p>\n</li>\n<li><p>指标监控、使用 Prometheus 解决监控可视化、指标采集</p>\n</li>\n<li><p>微服务中的跨服务性能问题诊断，结合 Jaeger 实现分布式链路追踪</p>\n</li>\n</ol>\n<h3 id=\"模块十一：Go-架构实践-中间件（缓存、数据库）\"><a href=\"#模块十一：Go-架构实践-中间件（缓存、数据库）\" class=\"headerlink\" title=\"模块十一：Go 架构实践 - 中间件（缓存、数据库）\"></a>模块十一：Go 架构实践 - 中间件（缓存、数据库）</h3><h3 id=\"教学目标-10\"><a href=\"#教学目标-10\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Redis、Memcache 的原理和实战技巧</p>\n</li>\n<li><p>了解 MySQL 的常用设计和优化方法</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-10\"><a href=\"#学习和工作中的痛点-10\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不会解决缓存的一致性问题</p>\n</li>\n<li><p>不知道怎样合理地设计 MySQL 的表</p>\n</li>\n</ol>\n<h3 id=\"详细内容-10\"><a href=\"#详细内容-10\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>Redis、Memcache 的应用场景、最佳实践，以及缓存的一致性设计</p>\n</li>\n<li><p>MySQL 的表设计、常用优化手段，以及如何解决分布式事务</p>\n</li>\n</ol>\n<h3 id=\"模块十二：Go-架构实践-中间件（消息队列、服务发现）\"><a href=\"#模块十二：Go-架构实践-中间件（消息队列、服务发现）\" class=\"headerlink\" title=\"模块十二：Go 架构实践 - 中间件（消息队列、服务发现）\"></a>模块十二：Go 架构实践 - 中间件（消息队列、服务发现）</h3><h3 id=\"教学目标-11\"><a href=\"#教学目标-11\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>深入理解消息队列的原理，掌握基于消息队列的架构设计方法</p>\n</li>\n<li><p>服务发现原理、选型策略，以及服务发现实现的微服务多租户架构</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-11\"><a href=\"#学习和工作中的痛点-11\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不会做消息解耦的架构设计</p>\n</li>\n<li><p>不清楚如何实现服务发现对平滑发布的支持</p>\n</li>\n<li><p>不知道怎样利用多租户实现多测试环境</p>\n</li>\n</ol>\n<h3 id=\"详细内容-11\"><a href=\"#详细内容-11\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>Kafka 的实现原理、异步消息系统的架构设计</p>\n</li>\n<li><p>RPC 服务发现、动态地址的选型和实现原理，以及基于服务发现的平滑重启和多租户架构</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"模块一Go-语言实践-Runtime\"><a href=\"#模块一Go-语言实践-Runtime\" class=\"headerlink\" title=\"模块一Go 语言实践 - Runtime\"></a>模块一Go 语言实践 - Runtime</h3><h3 id=\"教学目标\"><a href=\"#教学目标\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 语言中 Goroutine 的调度原理</p>\n</li>\n<li><p>了解 Go 语言中的内存模型</p>\n</li>\n<li><p>了解 Go 语言中 GC（垃圾回收）的原理</p>\n</li>\n<li><p>了解 Go 语言中 channel 的消息通讯原理</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点\"><a href=\"#学习和工作中的痛点\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>分不清 Goroutine 和线程的区别</p>\n</li>\n<li><p>不熟悉 Go 的内存分配机制</p>\n</li>\n<li><p>搞不懂 GC 三色标记算法</p>\n</li>\n<li><p>不了解 channel 的底层实现</p>\n</li>\n</ol>\n<h3 id=\"详细内容\"><a href=\"#详细内容\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>Goroutine 的实现、GPM 调度模型、调度状态及流转、调度原理、协作式抢占以及和网络库的协作</p>\n</li>\n<li><p>Go 内存分配的内部结构和分配机制</p>\n</li>\n<li><p>Go GC 介绍、三色标记的实现原理、GC 的流程以及 GC 的一些优化方案</p>\n</li>\n<li><p>Go channel 的通讯机制、环形队列的结构、调度和唤醒的原理</p>\n</li>\n</ol>\n<h3 id=\"模块二：Go-语言实践-并行编程\"><a href=\"#模块二：Go-语言实践-并行编程\" class=\"headerlink\" title=\"模块二：Go 语言实践 - 并行编程\"></a>模块二：Go 语言实践 - 并行编程</h3><h3 id=\"教学目标-1\"><a href=\"#教学目标-1\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 语言中的 Memory Model</p>\n</li>\n<li><p>了解 Go 语言的并发特性并发编程模式：Timeout、Pipeline、Cancellation、Fanout、errgroup 等模式</p>\n</li>\n<li><p>了解 Go 语言中 Context 的原理并掌握其使用方法</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-1\"><a href=\"#学习和工作中的痛点-1\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>搞不清楚 Go 中内存模型和同步语义</p>\n</li>\n<li><p>无法熟练使用基于 channel 通讯方式的并行编程模式</p>\n</li>\n<li><p>不明白 Context 传播式传递有什么意义</p>\n</li>\n</ol>\n<h3 id=\"详细内容-1\"><a href=\"#详细内容-1\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>内存模型：Happens Before、同步语义、channel 通讯、锁</p>\n</li>\n<li><p>利用 channel 完成并行开发的设计模式，包含超时控制、管道、扇出、errgroup 并发</p>\n</li>\n<li><p>使用 Go 标准库 Context 的原理和最佳实践，包含超时控制、元数据传递、生命周期控制</p>\n</li>\n</ol>\n<h3 id=\"模块三：Go-语言实践-网络编程\"><a href=\"#模块三：Go-语言实践-网络编程\" class=\"headerlink\" title=\"模块三：Go 语言实践 - 网络编程\"></a>模块三：Go 语言实践 - 网络编程</h3><h3 id=\"教学目标-2\"><a href=\"#教学目标-2\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>熟练掌握 Go 语言中的 TCP 网络编程</p>\n</li>\n<li><p>熟练掌握 Go 语言中的 HTTP 网络编程</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-2\"><a href=\"#学习和工作中的痛点-2\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不知道怎么用 Go 实现高性能的 TCP Server</p>\n</li>\n<li><p>HTTP 框架有不少，但不知道怎样做选型</p>\n</li>\n<li><p>不会针对业务需求对 HTTP 框架做针对性的扩展</p>\n</li>\n</ol>\n<h3 id=\"详细内容-2\"><a href=\"#详细内容-2\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>结合 goim 项目了解 Go 语言中 TCP Server 的基础库和性能优化方案</p>\n</li>\n<li><p>结合 gin 项目了解 Go 语言中的 HTTP Server 的基础库和框架</p>\n</li>\n</ol>\n<h3 id=\"模块四：Go-语言实践-异常处理\"><a href=\"#模块四：Go-语言实践-异常处理\" class=\"headerlink\" title=\"模块四：Go 语言实践 - 异常处理\"></a>模块四：Go 语言实践 - 异常处理</h3><h3 id=\"教学目标-3\"><a href=\"#教学目标-3\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 语言中 error 的处理方法</p>\n</li>\n<li><p>了解 Go 语言中业务错误的处理方法</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-3\"><a href=\"#学习和工作中的痛点-3\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>error 的处理复杂，不会正确使用</p>\n</li>\n<li><p>业务错误定义和 error 整合难度较高</p>\n</li>\n</ol>\n<h3 id=\"详细内容-3\"><a href=\"#详细内容-3\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>Go 语言中的 error 处理实践：检查错误、定义错误、追加上下文</p>\n</li>\n<li><p>Go 项目中的业务错误码如何结合 error 的最佳实践</p>\n</li>\n</ol>\n<h3 id=\"模块五：Go-工程化实践\"><a href=\"#模块五：Go-工程化实践\" class=\"headerlink\" title=\"模块五：Go 工程化实践\"></a>模块五：Go 工程化实践</h3><h3 id=\"教学目标-4\"><a href=\"#教学目标-4\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 项目中良好的项目目录组织原则和规范</p>\n</li>\n<li><p>了解 Go 项目中 API 的设计方法和规范</p>\n</li>\n<li><p>了解 Go 项目中 Package 的管理和设计方法</p>\n</li>\n<li><p>了解 Go 项目中的单元测试方法</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-4\"><a href=\"#学习和工作中的痛点-4\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不知道怎么做 Go 项目的标准化管理</p>\n</li>\n<li><p>总是设计出各种不合理的 API</p>\n</li>\n<li><p>不知道怎么做包管理</p>\n</li>\n</ol>\n<h3 id=\"详细内容-4\"><a href=\"#详细内容-4\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>良好的 Go 项目中的分层目录结构组织和代码规范</p>\n</li>\n<li><p>Go 项目中 API 的设计原则和方法：定义、状态和业务错误码处理</p>\n</li>\n<li><p>Go 项目中包的设计和最佳实践、go mod 的使用</p>\n</li>\n<li><p>go test 工具链的使用方法、单元测试的最佳实践以及 Mock 技术</p>\n</li>\n</ol>\n<h3 id=\"模块六：Go-架构实践-分布式架构（前端负载均衡）\"><a href=\"#模块六：Go-架构实践-分布式架构（前端负载均衡）\" class=\"headerlink\" title=\"模块六：Go 架构实践 - 分布式架构（前端负载均衡）\"></a>模块六：Go 架构实践 - 分布式架构（前端负载均衡）</h3><h3 id=\"教学目标-5\"><a href=\"#教学目标-5\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>掌握高可用 DNS 的最佳实践</p>\n</li>\n<li><p>了解 CDN 的架构和应用场景</p>\n</li>\n<li><p>深入理解 4/7 层负载均衡的原理</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-5\"><a href=\"#学习和工作中的痛点-5\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>缺乏对在线服务的全链路视野</p>\n</li>\n<li><p>不了解应用服务上层的负载均衡</p>\n</li>\n</ol>\n<h3 id=\"详细内容-5\"><a href=\"#详细内容-5\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>DNS 的原理、防劫持的方法、HTTPDNS + IP 长连接</p>\n</li>\n<li><p>CDN 的系统架构、应用领域以及保证数据一致性的方法</p>\n</li>\n<li><p>LVS、Nginx 4/7 层负载均衡的原理和实践</p>\n</li>\n</ol>\n<h3 id=\"模块七：Go-架构实践-分布式架构（数据分片）\"><a href=\"#模块七：Go-架构实践-分布式架构（数据分片）\" class=\"headerlink\" title=\"模块七：Go 架构实践 - 分布式架构（数据分片）\"></a>模块七：Go 架构实践 - 分布式架构（数据分片）</h3><h3 id=\"教学目标-6\"><a href=\"#教学目标-6\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>掌握数据 Sharding 的设计原则</p>\n</li>\n<li><p>了解 Hash 分片的算法和演进历史</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-6\"><a href=\"#学习和工作中的痛点-6\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不了解 Sharding 的应用场景，不会合理使用</p>\n</li>\n<li><p>搞不清楚各种变种 Hash 算法的使用场景</p>\n</li>\n</ol>\n<h3 id=\"详细内容-6\"><a href=\"#详细内容-6\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>架构设计中的数据分片设计，如：分库分表、多活的 Shard 设计等等</p>\n</li>\n<li><p>分片算法的 Hash 实现和演进：Hash 求余、一致性 Hash、有界负载一致性 Hash、节点映射</p>\n</li>\n</ol>\n<h3 id=\"模块八：Go-架构实践-微服务（微服务概览与治理）\"><a href=\"#模块八：Go-架构实践-微服务（微服务概览与治理）\" class=\"headerlink\" title=\"模块八：Go 架构实践 - 微服务（微服务概览与治理）\"></a>模块八：Go 架构实践 - 微服务（微服务概览与治理）</h3><h3 id=\"教学目标-7\"><a href=\"#教学目标-7\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解微服务的演进历史及它的优缺点</p>\n</li>\n<li><p>了解微服务的设计方法</p>\n</li>\n<li><p>了解微服务中 RPC 的底层原理</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-7\"><a href=\"#学习和工作中的痛点-7\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不理解微服务的服务角色：API Gateway、BFF 还是 Service？</p>\n</li>\n<li><p>不知道怎么做微服务拆分</p>\n</li>\n<li><p>不理解 RPC 的原理，不知道如何进行微服务 RPC 框架的选型</p>\n</li>\n</ol>\n<h3 id=\"详细内容-7\"><a href=\"#详细内容-7\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>微服务的原理、概念，以及微服务的实现细节</p>\n</li>\n<li><p>API Gateway、BFF、Service 等概念精讲</p>\n</li>\n<li><p>微服务通讯 RPC 框架的细节和选型</p>\n</li>\n</ol>\n<h3 id=\"模块九：Go-架构实践-微服务（可用性设计）\"><a href=\"#模块九：Go-架构实践-微服务（可用性设计）\" class=\"headerlink\" title=\"模块九：Go 架构实践 - 微服务（可用性设计）\"></a>模块九：Go 架构实践 - 微服务（可用性设计）</h3><h3 id=\"教学目标-8\"><a href=\"#教学目标-8\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>掌握可用性设计的最佳实践</p>\n</li>\n<li><p>了解可用性设计的几大关键点：隔离、超时控制、过载保护、限流、容错&amp;重试</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-8\"><a href=\"#学习和工作中的痛点-8\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不知道如何设计高可用的分布式服务</p>\n</li>\n<li><p>不清楚如何提升服务自愈能力</p>\n</li>\n</ol>\n<h3 id=\"详细内容-8\"><a href=\"#详细内容-8\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>微服务的隔离实现，以及架构设计中的隔离实现</p>\n</li>\n<li><p>进程内超时控制和跨进程超时控制</p>\n</li>\n<li><p>程序自保护避免过载，抛弃一定的流量完成自适应限流</p>\n</li>\n<li><p>单机限流、多租户场景的分布式限流</p>\n</li>\n<li><p>节点故障的容错逻辑、重试容错的策略和设计</p>\n</li>\n</ol>\n<h3 id=\"模块十：Go-架构实践-中间件（日志、指标、链路追踪）\"><a href=\"#模块十：Go-架构实践-中间件（日志、指标、链路追踪）\" class=\"headerlink\" title=\"模块十：Go 架构实践 - 中间件（日志、指标、链路追踪）\"></a>模块十：Go 架构实践 - 中间件（日志、指标、链路追踪）</h3><h3 id=\"教学目标-9\"><a href=\"#教学目标-9\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Go 项目中的日志收集</p>\n</li>\n<li><p>了解 Go 项目中的监控指标体系</p>\n</li>\n<li><p>了解 Go 项目中的分布式链路追踪</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-9\"><a href=\"#学习和工作中的痛点-9\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不知道如何解决微服务的可观测性难题</p>\n</li>\n<li><p>不清楚怎么做微服务的可视化和标准化</p>\n</li>\n<li><p>出故障后，难以对微服务进行问题诊断</p>\n</li>\n</ol>\n<h3 id=\"详细内容-9\"><a href=\"#详细内容-9\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>实现一个可以集中收集所有微服务实例的日志，并能统一查看和检索的日志采集架构</p>\n</li>\n<li><p>指标监控、使用 Prometheus 解决监控可视化、指标采集</p>\n</li>\n<li><p>微服务中的跨服务性能问题诊断，结合 Jaeger 实现分布式链路追踪</p>\n</li>\n</ol>\n<h3 id=\"模块十一：Go-架构实践-中间件（缓存、数据库）\"><a href=\"#模块十一：Go-架构实践-中间件（缓存、数据库）\" class=\"headerlink\" title=\"模块十一：Go 架构实践 - 中间件（缓存、数据库）\"></a>模块十一：Go 架构实践 - 中间件（缓存、数据库）</h3><h3 id=\"教学目标-10\"><a href=\"#教学目标-10\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>了解 Redis、Memcache 的原理和实战技巧</p>\n</li>\n<li><p>了解 MySQL 的常用设计和优化方法</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-10\"><a href=\"#学习和工作中的痛点-10\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不会解决缓存的一致性问题</p>\n</li>\n<li><p>不知道怎样合理地设计 MySQL 的表</p>\n</li>\n</ol>\n<h3 id=\"详细内容-10\"><a href=\"#详细内容-10\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>Redis、Memcache 的应用场景、最佳实践，以及缓存的一致性设计</p>\n</li>\n<li><p>MySQL 的表设计、常用优化手段，以及如何解决分布式事务</p>\n</li>\n</ol>\n<h3 id=\"模块十二：Go-架构实践-中间件（消息队列、服务发现）\"><a href=\"#模块十二：Go-架构实践-中间件（消息队列、服务发现）\" class=\"headerlink\" title=\"模块十二：Go 架构实践 - 中间件（消息队列、服务发现）\"></a>模块十二：Go 架构实践 - 中间件（消息队列、服务发现）</h3><h3 id=\"教学目标-11\"><a href=\"#教学目标-11\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h3><ol>\n<li><p>深入理解消息队列的原理，掌握基于消息队列的架构设计方法</p>\n</li>\n<li><p>服务发现原理、选型策略，以及服务发现实现的微服务多租户架构</p>\n</li>\n</ol>\n<h3 id=\"学习和工作中的痛点-11\"><a href=\"#学习和工作中的痛点-11\" class=\"headerlink\" title=\"学习和工作中的痛点\"></a>学习和工作中的痛点</h3><ol>\n<li><p>不会做消息解耦的架构设计</p>\n</li>\n<li><p>不清楚如何实现服务发现对平滑发布的支持</p>\n</li>\n<li><p>不知道怎样利用多租户实现多测试环境</p>\n</li>\n</ol>\n<h3 id=\"详细内容-11\"><a href=\"#详细内容-11\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h3><ol>\n<li><p>Kafka 的实现原理、异步消息系统的架构设计</p>\n</li>\n<li><p>RPC 服务发现、动态地址的选型和实现原理，以及基于服务发现的平滑重启和多租户架构</p>\n</li>\n</ol>\n"},{"title":"分享好的资源","layout":"page","_content":"\n- 不错的在线学习平台\n- [优秀的博主站点](https://dd-code.site/post/1628566266.html)\n- 实用提升效率的工具\n\n","source":"share/index.md","raw":"---\ntitle: \"分享好的资源\"\nlayout: \"page\"\n---\n\n- 不错的在线学习平台\n- [优秀的博主站点](https://dd-code.site/post/1628566266.html)\n- 实用提升效率的工具\n\n","date":"2021-05-18T01:41:24.166Z","updated":"2021-05-01T07:29:47.816Z","path":"share/index.html","comments":1,"_id":"ckotdh5u5000akw8zhz2r8fcr","content":"<ul>\n<li>不错的在线学习平台</li>\n<li><a href=\"https://dd-code.site/post/1628566266.html\">优秀的博主站点</a></li>\n<li>实用提升效率的工具</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>不错的在线学习平台</li>\n<li><a href=\"https://dd-code.site/post/1628566266.html\">优秀的博主站点</a></li>\n<li>实用提升效率的工具</li>\n</ul>\n"},{"title":"不错的在线学习平台","_content":"\n- [Udemy](https://www.udemy.com/)\n\n  **简介：**全球最多的课程选择，任选 130000 门在线视频课程，每月都有新内容发布，涉及Python、Excel、网页开发、JavaScript、数据科学、AWS认证、绘图。具体类别有：开发、商务、财务会计、IT与软件、工作效率、个人发展、涉及、市场营销、生活习俗、摄影与录像、健康与健身、音乐、数学和艺术。\n\n- [coursera](https://www.coursera.org/)\n\n  **简介：**借助来自世界级大学和公司的在线课程、证书与学位，培养卓越技能。涉及数据科学、商务、计算机科学、信息技术、语言学习、健康、个人发展、物理科学与工程、社会科学、艺术与人文、数学和逻辑。有部分免费课程可供学习。\n\n- XXX\n\n- XXX\n\n","source":"share/不错的在线学习平台.md","raw":"---\ntitle: 不错的在线学习平台\n---\n\n- [Udemy](https://www.udemy.com/)\n\n  **简介：**全球最多的课程选择，任选 130000 门在线视频课程，每月都有新内容发布，涉及Python、Excel、网页开发、JavaScript、数据科学、AWS认证、绘图。具体类别有：开发、商务、财务会计、IT与软件、工作效率、个人发展、涉及、市场营销、生活习俗、摄影与录像、健康与健身、音乐、数学和艺术。\n\n- [coursera](https://www.coursera.org/)\n\n  **简介：**借助来自世界级大学和公司的在线课程、证书与学位，培养卓越技能。涉及数据科学、商务、计算机科学、信息技术、语言学习、健康、个人发展、物理科学与工程、社会科学、艺术与人文、数学和逻辑。有部分免费课程可供学习。\n\n- XXX\n\n- XXX\n\n","date":"2021-05-18T01:06:50.679Z","updated":"2021-05-01T08:11:17.129Z","path":"share/不错的在线学习平台.html","comments":1,"layout":"page","_id":"ckotdh5ua000ekw8zfjpc2dmu","content":"<ul>\n<li><p><a href=\"https://www.udemy.com/\">Udemy</a></p>\n<p><strong>简介：</strong>全球最多的课程选择，任选 130000 门在线视频课程，每月都有新内容发布，涉及Python、Excel、网页开发、JavaScript、数据科学、AWS认证、绘图。具体类别有：开发、商务、财务会计、IT与软件、工作效率、个人发展、涉及、市场营销、生活习俗、摄影与录像、健康与健身、音乐、数学和艺术。</p>\n</li>\n<li><p><a href=\"https://www.coursera.org/\">coursera</a></p>\n<p><strong>简介：</strong>借助来自世界级大学和公司的在线课程、证书与学位，培养卓越技能。涉及数据科学、商务、计算机科学、信息技术、语言学习、健康、个人发展、物理科学与工程、社会科学、艺术与人文、数学和逻辑。有部分免费课程可供学习。</p>\n</li>\n<li><p>XXX</p>\n</li>\n<li><p>XXX</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p><a href=\"https://www.udemy.com/\">Udemy</a></p>\n<p><strong>简介：</strong>全球最多的课程选择，任选 130000 门在线视频课程，每月都有新内容发布，涉及Python、Excel、网页开发、JavaScript、数据科学、AWS认证、绘图。具体类别有：开发、商务、财务会计、IT与软件、工作效率、个人发展、涉及、市场营销、生活习俗、摄影与录像、健康与健身、音乐、数学和艺术。</p>\n</li>\n<li><p><a href=\"https://www.coursera.org/\">coursera</a></p>\n<p><strong>简介：</strong>借助来自世界级大学和公司的在线课程、证书与学位，培养卓越技能。涉及数据科学、商务、计算机科学、信息技术、语言学习、健康、个人发展、物理科学与工程、社会科学、艺术与人文、数学和逻辑。有部分免费课程可供学习。</p>\n</li>\n<li><p>XXX</p>\n</li>\n<li><p>XXX</p>\n</li>\n</ul>\n"},{"title":"高级 Go 工程师岗位职责","_content":"\n> 数据来源：主流招聘网站、一线公司 JD\n\n- 熟练掌握 Go 语言，熟悉 Goroutine、Channel、锁、GC 等核心特性；\n- 具备 3 年以上后端开发经验，并具有 1 年以上 Go 语言服务端开发经验；\n- 熟练掌握 Golang 常用框架，深入了解框架提供的特性及其实现原理细节；\n- 熟悉常见的中间件技术，包括但不限于 MySQL、RPC、MQ、Redis 等；\n- 了解分布式技术，具备扎实的工程经验和软件设计能力；\n- 熟悉微服务架构，具有高并发或大型 Go 项目经验者优先。\n","source":"share/高级 Go 工程师岗位职责.md","raw":"---\ntitle: 高级 Go 工程师岗位职责\n\n---\n\n> 数据来源：主流招聘网站、一线公司 JD\n\n- 熟练掌握 Go 语言，熟悉 Goroutine、Channel、锁、GC 等核心特性；\n- 具备 3 年以上后端开发经验，并具有 1 年以上 Go 语言服务端开发经验；\n- 熟练掌握 Golang 常用框架，深入了解框架提供的特性及其实现原理细节；\n- 熟悉常见的中间件技术，包括但不限于 MySQL、RPC、MQ、Redis 等；\n- 了解分布式技术，具备扎实的工程经验和软件设计能力；\n- 熟悉微服务架构，具有高并发或大型 Go 项目经验者优先。\n","date":"2021-05-18T01:38:47.354Z","updated":"2021-05-18T01:38:37.973Z","path":"share/高级 Go 工程师岗位职责.html","comments":1,"layout":"page","_id":"ckotdh5ue000gkw8z8rprhduu","content":"<blockquote>\n<p>数据来源：主流招聘网站、一线公司 JD</p>\n</blockquote>\n<ul>\n<li>熟练掌握 Go 语言，熟悉 Goroutine、Channel、锁、GC 等核心特性；</li>\n<li>具备 3 年以上后端开发经验，并具有 1 年以上 Go 语言服务端开发经验；</li>\n<li>熟练掌握 Golang 常用框架，深入了解框架提供的特性及其实现原理细节；</li>\n<li>熟悉常见的中间件技术，包括但不限于 MySQL、RPC、MQ、Redis 等；</li>\n<li>了解分布式技术，具备扎实的工程经验和软件设计能力；</li>\n<li>熟悉微服务架构，具有高并发或大型 Go 项目经验者优先。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>数据来源：主流招聘网站、一线公司 JD</p>\n</blockquote>\n<ul>\n<li>熟练掌握 Go 语言，熟悉 Goroutine、Channel、锁、GC 等核心特性；</li>\n<li>具备 3 年以上后端开发经验，并具有 1 年以上 Go 语言服务端开发经验；</li>\n<li>熟练掌握 Golang 常用框架，深入了解框架提供的特性及其实现原理细节；</li>\n<li>熟悉常见的中间件技术，包括但不限于 MySQL、RPC、MQ、Redis 等；</li>\n<li>了解分布式技术，具备扎实的工程经验和软件设计能力；</li>\n<li>熟悉微服务架构，具有高并发或大型 Go 项目经验者优先。</li>\n</ul>\n"},{"title":"优秀的博主站点","abbrlink":1628566266,"_content":"\n- [风雪之隅-左手代码右手诗](https://www.laruence.com/)\n\n  **作者：**Laruence，人称 \"鸟哥\"\n\n  **简介：**[PHP](http://www.php.net/)开发组核心成员, [Zend](http://www.zend.com/)顾问, PHP7及PHP8 JIT核心作者. Yaf等开源项目作者\n\n- [飞雪无情的博客](https://www.flysnow.org/)\n\n  **作者：**飞雪无情\n\n  **简介：**专注于Android、Java、Go语言(golang)、移动互联网、项目管理、软件架构，《Go 实战笔记》系列作者，《Golang Gin 实战》系列作者，《Android Gradle权威指南》作者，现负责技术管理。\n\n  **公众号：**飞雪无情\n\n- [煎鱼](https://eddycjy.com/)\n\n  **作者：**煎鱼\n\n  **简介：**沉迷于 Go、Kubernetes、Prometheus ，在工作中，目前主要负责公司的基础架构/组件的建设和业务团队推广\n\n  **公众号：**脑子进煎鱼了\n\n- [信春哥，系统稳，闭眼上线不回滚！](http://www.dbdream.com.cn/)\n\n  **作者：**宋春风\n\n  **简介：**BI168社区ORACLE管理版版主([http://www.bi168.cn](http://www.bi168.cn/))，拥有ORACLE 10g、11g OCP，10g OCM，Golden Gate 10g OCS等证书，现就职某大型电商，担任ORACLE DBA职务；\n\n- [前端杂货铺](https://wang.icey.cc/)\n\n- [后端进阶 -- 每一步成长都想与你分享](https://objcoding.com/) \n\n  **作者：**zhangchenghui\n\n  **简介：**微信公众号「后端进阶」，专注后端技术分享：Java、Golang、WEB框架、分布式中间件、服务治理等等，老司机倾囊相授，带你一路进阶，来不及解释了快上车！\n\n- https://stitcher.io\n\n  **姓名：**布伦特（Brent）\n\n  **简介：**一个老外技术，博客质量还可以\n\n- https://www.bruceeckel.com\n\n  **姓名：**布鲁斯·埃克尔（Bruce Eckel）的编程博客\n\n  **简介：**一个老外技术的编程博客，涉及 Java，基本知识\n\n- https://www.itsolutionstuff.com\n\n  **姓名：**itsolutionstuff\n\n  **简介：**一个老外技术，涉及 PHP，Laravel，Angular\n\n- https://jessequinn.info/\n\n  **姓名：**杰西·奎因的个人网站\n\n  **简介：**一个老外的博客，涉及Java，大数据，k8s，值得一看\n\n- XXX\n\n- XXX\n\n- XXX\n\n","source":"share/优秀的博主站点.md","raw":"---\ntitle: 优秀的博主站点\nabbrlink: 1628566266\n---\n\n- [风雪之隅-左手代码右手诗](https://www.laruence.com/)\n\n  **作者：**Laruence，人称 \"鸟哥\"\n\n  **简介：**[PHP](http://www.php.net/)开发组核心成员, [Zend](http://www.zend.com/)顾问, PHP7及PHP8 JIT核心作者. Yaf等开源项目作者\n\n- [飞雪无情的博客](https://www.flysnow.org/)\n\n  **作者：**飞雪无情\n\n  **简介：**专注于Android、Java、Go语言(golang)、移动互联网、项目管理、软件架构，《Go 实战笔记》系列作者，《Golang Gin 实战》系列作者，《Android Gradle权威指南》作者，现负责技术管理。\n\n  **公众号：**飞雪无情\n\n- [煎鱼](https://eddycjy.com/)\n\n  **作者：**煎鱼\n\n  **简介：**沉迷于 Go、Kubernetes、Prometheus ，在工作中，目前主要负责公司的基础架构/组件的建设和业务团队推广\n\n  **公众号：**脑子进煎鱼了\n\n- [信春哥，系统稳，闭眼上线不回滚！](http://www.dbdream.com.cn/)\n\n  **作者：**宋春风\n\n  **简介：**BI168社区ORACLE管理版版主([http://www.bi168.cn](http://www.bi168.cn/))，拥有ORACLE 10g、11g OCP，10g OCM，Golden Gate 10g OCS等证书，现就职某大型电商，担任ORACLE DBA职务；\n\n- [前端杂货铺](https://wang.icey.cc/)\n\n- [后端进阶 -- 每一步成长都想与你分享](https://objcoding.com/) \n\n  **作者：**zhangchenghui\n\n  **简介：**微信公众号「后端进阶」，专注后端技术分享：Java、Golang、WEB框架、分布式中间件、服务治理等等，老司机倾囊相授，带你一路进阶，来不及解释了快上车！\n\n- https://stitcher.io\n\n  **姓名：**布伦特（Brent）\n\n  **简介：**一个老外技术，博客质量还可以\n\n- https://www.bruceeckel.com\n\n  **姓名：**布鲁斯·埃克尔（Bruce Eckel）的编程博客\n\n  **简介：**一个老外技术的编程博客，涉及 Java，基本知识\n\n- https://www.itsolutionstuff.com\n\n  **姓名：**itsolutionstuff\n\n  **简介：**一个老外技术，涉及 PHP，Laravel，Angular\n\n- https://jessequinn.info/\n\n  **姓名：**杰西·奎因的个人网站\n\n  **简介：**一个老外的博客，涉及Java，大数据，k8s，值得一看\n\n- XXX\n\n- XXX\n\n- XXX\n\n","date":"2021-05-18T01:38:46.987Z","updated":"2021-05-01T07:33:50.359Z","path":"share/优秀的博主站点.html","comments":1,"layout":"page","_id":"ckotdh5uh000lkw8zbk8gbuij","content":"<ul>\n<li><p><a href=\"https://www.laruence.com/\">风雪之隅-左手代码右手诗</a></p>\n<p><strong>作者：</strong>Laruence，人称 “鸟哥”</p>\n<p><strong>简介：</strong><a href=\"http://www.php.net/\">PHP</a>开发组核心成员, <a href=\"http://www.zend.com/\">Zend</a>顾问, PHP7及PHP8 JIT核心作者. Yaf等开源项目作者</p>\n</li>\n<li><p><a href=\"https://www.flysnow.org/\">飞雪无情的博客</a></p>\n<p><strong>作者：</strong>飞雪无情</p>\n<p><strong>简介：</strong>专注于Android、Java、Go语言(golang)、移动互联网、项目管理、软件架构，《Go 实战笔记》系列作者，《Golang Gin 实战》系列作者，《Android Gradle权威指南》作者，现负责技术管理。</p>\n<p><strong>公众号：</strong>飞雪无情</p>\n</li>\n<li><p><a href=\"https://eddycjy.com/\">煎鱼</a></p>\n<p><strong>作者：</strong>煎鱼</p>\n<p><strong>简介：</strong>沉迷于 Go、Kubernetes、Prometheus ，在工作中，目前主要负责公司的基础架构/组件的建设和业务团队推广</p>\n<p><strong>公众号：</strong>脑子进煎鱼了</p>\n</li>\n<li><p><a href=\"http://www.dbdream.com.cn/\">信春哥，系统稳，闭眼上线不回滚！</a></p>\n<p><strong>作者：</strong>宋春风</p>\n<p><strong>简介：</strong>BI168社区ORACLE管理版版主(<a href=\"http://www.bi168.cn/\">http://www.bi168.cn</a>)，拥有ORACLE 10g、11g OCP，10g OCM，Golden Gate 10g OCS等证书，现就职某大型电商，担任ORACLE DBA职务；</p>\n</li>\n<li><p><a href=\"https://wang.icey.cc/\">前端杂货铺</a></p>\n</li>\n<li><p><a href=\"https://objcoding.com/\">后端进阶 – 每一步成长都想与你分享</a> </p>\n<p><strong>作者：</strong>zhangchenghui</p>\n<p><strong>简介：</strong>微信公众号「后端进阶」，专注后端技术分享：Java、Golang、WEB框架、分布式中间件、服务治理等等，老司机倾囊相授，带你一路进阶，来不及解释了快上车！</p>\n</li>\n<li><p><a href=\"https://stitcher.io/\">https://stitcher.io</a></p>\n<p><strong>姓名：</strong>布伦特（Brent）</p>\n<p><strong>简介：</strong>一个老外技术，博客质量还可以</p>\n</li>\n<li><p><a href=\"https://www.bruceeckel.com/\">https://www.bruceeckel.com</a></p>\n<p><strong>姓名：</strong>布鲁斯·埃克尔（Bruce Eckel）的编程博客</p>\n<p><strong>简介：</strong>一个老外技术的编程博客，涉及 Java，基本知识</p>\n</li>\n<li><p><a href=\"https://www.itsolutionstuff.com/\">https://www.itsolutionstuff.com</a></p>\n<p><strong>姓名：</strong>itsolutionstuff</p>\n<p><strong>简介：</strong>一个老外技术，涉及 PHP，Laravel，Angular</p>\n</li>\n<li><p><a href=\"https://jessequinn.info/\">https://jessequinn.info/</a></p>\n<p><strong>姓名：</strong>杰西·奎因的个人网站</p>\n<p><strong>简介：</strong>一个老外的博客，涉及Java，大数据，k8s，值得一看</p>\n</li>\n<li><p>XXX</p>\n</li>\n<li><p>XXX</p>\n</li>\n<li><p>XXX</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p><a href=\"https://www.laruence.com/\">风雪之隅-左手代码右手诗</a></p>\n<p><strong>作者：</strong>Laruence，人称 “鸟哥”</p>\n<p><strong>简介：</strong><a href=\"http://www.php.net/\">PHP</a>开发组核心成员, <a href=\"http://www.zend.com/\">Zend</a>顾问, PHP7及PHP8 JIT核心作者. Yaf等开源项目作者</p>\n</li>\n<li><p><a href=\"https://www.flysnow.org/\">飞雪无情的博客</a></p>\n<p><strong>作者：</strong>飞雪无情</p>\n<p><strong>简介：</strong>专注于Android、Java、Go语言(golang)、移动互联网、项目管理、软件架构，《Go 实战笔记》系列作者，《Golang Gin 实战》系列作者，《Android Gradle权威指南》作者，现负责技术管理。</p>\n<p><strong>公众号：</strong>飞雪无情</p>\n</li>\n<li><p><a href=\"https://eddycjy.com/\">煎鱼</a></p>\n<p><strong>作者：</strong>煎鱼</p>\n<p><strong>简介：</strong>沉迷于 Go、Kubernetes、Prometheus ，在工作中，目前主要负责公司的基础架构/组件的建设和业务团队推广</p>\n<p><strong>公众号：</strong>脑子进煎鱼了</p>\n</li>\n<li><p><a href=\"http://www.dbdream.com.cn/\">信春哥，系统稳，闭眼上线不回滚！</a></p>\n<p><strong>作者：</strong>宋春风</p>\n<p><strong>简介：</strong>BI168社区ORACLE管理版版主(<a href=\"http://www.bi168.cn/\">http://www.bi168.cn</a>)，拥有ORACLE 10g、11g OCP，10g OCM，Golden Gate 10g OCS等证书，现就职某大型电商，担任ORACLE DBA职务；</p>\n</li>\n<li><p><a href=\"https://wang.icey.cc/\">前端杂货铺</a></p>\n</li>\n<li><p><a href=\"https://objcoding.com/\">后端进阶 – 每一步成长都想与你分享</a> </p>\n<p><strong>作者：</strong>zhangchenghui</p>\n<p><strong>简介：</strong>微信公众号「后端进阶」，专注后端技术分享：Java、Golang、WEB框架、分布式中间件、服务治理等等，老司机倾囊相授，带你一路进阶，来不及解释了快上车！</p>\n</li>\n<li><p><a href=\"https://stitcher.io/\">https://stitcher.io</a></p>\n<p><strong>姓名：</strong>布伦特（Brent）</p>\n<p><strong>简介：</strong>一个老外技术，博客质量还可以</p>\n</li>\n<li><p><a href=\"https://www.bruceeckel.com/\">https://www.bruceeckel.com</a></p>\n<p><strong>姓名：</strong>布鲁斯·埃克尔（Bruce Eckel）的编程博客</p>\n<p><strong>简介：</strong>一个老外技术的编程博客，涉及 Java，基本知识</p>\n</li>\n<li><p><a href=\"https://www.itsolutionstuff.com/\">https://www.itsolutionstuff.com</a></p>\n<p><strong>姓名：</strong>itsolutionstuff</p>\n<p><strong>简介：</strong>一个老外技术，涉及 PHP，Laravel，Angular</p>\n</li>\n<li><p><a href=\"https://jessequinn.info/\">https://jessequinn.info/</a></p>\n<p><strong>姓名：</strong>杰西·奎因的个人网站</p>\n<p><strong>简介：</strong>一个老外的博客，涉及Java，大数据，k8s，值得一看</p>\n</li>\n<li><p>XXX</p>\n</li>\n<li><p>XXX</p>\n</li>\n<li><p>XXX</p>\n</li>\n</ul>\n"}],"Post":[{"title":"echo (int)((0.1+0.7)*10)输出的结果是？","abbrlink":1256719031,"_content":"\n## 代码\n\n```php\n<?php\necho (int)((0.1+0.7)*10);\n```\n\n## 输出\n\n```shell\n7\n```\n\n## 分析\n\n如果你仔细看过在PHP手册中，对于浮点数据类型的说明，就会看到其中有专门的一个警告提示，就谈到这个问题：\n\n关于浮点数精度的警告：显然简单的十进制分数如同 `0.1` 或 `0.7` 不能在不丢失一点点精度的情况下转换为内部二进制的格式。\n\n这就会造成混乱的结果：\n\n例如，`floor((0.1+0.7)*10)` 通常会返回 `7` 而不是预期中的  `8`，因为该结果内部的表示其实是类似 `7.9`。  \n\n这和一个事实有关，那就是不可能精确的用有限位数表达某些十进制分数。例如，十进制的 `1/3` 变成了 `0.3`。  \n\n所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。如果确实需要更高的精度，应该使用任意精度数学函数或者 `gmp` 函数。\n\n实际上，并不是PHP会有这种现象，对于其他计算机语言，类似的浮点数问题也是差不多的。\n\n","source":"_posts/Other/面试题整理1.md","raw":"---\ntitle: echo (int)((0.1+0.7)*10)输出的结果是？\ntags:\n  - 面试\nabbrlink: 1256719031\n---\n\n## 代码\n\n```php\n<?php\necho (int)((0.1+0.7)*10);\n```\n\n## 输出\n\n```shell\n7\n```\n\n## 分析\n\n如果你仔细看过在PHP手册中，对于浮点数据类型的说明，就会看到其中有专门的一个警告提示，就谈到这个问题：\n\n关于浮点数精度的警告：显然简单的十进制分数如同 `0.1` 或 `0.7` 不能在不丢失一点点精度的情况下转换为内部二进制的格式。\n\n这就会造成混乱的结果：\n\n例如，`floor((0.1+0.7)*10)` 通常会返回 `7` 而不是预期中的  `8`，因为该结果内部的表示其实是类似 `7.9`。  \n\n这和一个事实有关，那就是不可能精确的用有限位数表达某些十进制分数。例如，十进制的 `1/3` 变成了 `0.3`。  \n\n所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。如果确实需要更高的精度，应该使用任意精度数学函数或者 `gmp` 函数。\n\n实际上，并不是PHP会有这种现象，对于其他计算机语言，类似的浮点数问题也是差不多的。\n\n","slug":"Other/面试题整理1","published":1,"date":"2021-04-16T13:48:58.756Z","updated":"2021-04-29T10:24:58.978Z","_id":"ckotdh5ts0001kw8z4me65dic","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"keyword\">int</span>)((<span class=\"number\">0.1</span>+<span class=\"number\">0.7</span>)*<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>如果你仔细看过在PHP手册中，对于浮点数据类型的说明，就会看到其中有专门的一个警告提示，就谈到这个问题：</p>\n<p>关于浮点数精度的警告：显然简单的十进制分数如同 <code>0.1</code> 或 <code>0.7</code> 不能在不丢失一点点精度的情况下转换为内部二进制的格式。</p>\n<p>这就会造成混乱的结果：</p>\n<p>例如，<code>floor((0.1+0.7)*10)</code> 通常会返回 <code>7</code> 而不是预期中的  <code>8</code>，因为该结果内部的表示其实是类似 <code>7.9</code>。  </p>\n<p>这和一个事实有关，那就是不可能精确的用有限位数表达某些十进制分数。例如，十进制的 <code>1/3</code> 变成了 <code>0.3</code>。  </p>\n<p>所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。如果确实需要更高的精度，应该使用任意精度数学函数或者 <code>gmp</code> 函数。</p>\n<p>实际上，并不是PHP会有这种现象，对于其他计算机语言，类似的浮点数问题也是差不多的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"keyword\">int</span>)((<span class=\"number\">0.1</span>+<span class=\"number\">0.7</span>)*<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>如果你仔细看过在PHP手册中，对于浮点数据类型的说明，就会看到其中有专门的一个警告提示，就谈到这个问题：</p>\n<p>关于浮点数精度的警告：显然简单的十进制分数如同 <code>0.1</code> 或 <code>0.7</code> 不能在不丢失一点点精度的情况下转换为内部二进制的格式。</p>\n<p>这就会造成混乱的结果：</p>\n<p>例如，<code>floor((0.1+0.7)*10)</code> 通常会返回 <code>7</code> 而不是预期中的  <code>8</code>，因为该结果内部的表示其实是类似 <code>7.9</code>。  </p>\n<p>这和一个事实有关，那就是不可能精确的用有限位数表达某些十进制分数。例如，十进制的 <code>1/3</code> 变成了 <code>0.3</code>。  </p>\n<p>所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。如果确实需要更高的精度，应该使用任意精度数学函数或者 <code>gmp</code> 函数。</p>\n<p>实际上，并不是PHP会有这种现象，对于其他计算机语言，类似的浮点数问题也是差不多的。</p>\n"},{"title":"常见的面试题整理","abbrlink":2003578900,"_content":"\n1. 服务端返回哪些 http状态码，浏览器会产生两次 http 请求？\n\n   答：302\n\n   http 状态码相关的内容，详细可查看篇目：**http状态码**\n\n2. TCP 和 UDP 有什么区别？画出示意图\n\n   答：详细可查看篇目：**TCP和UDP有什么区别**\n\n","source":"_posts/Other/面试题整理2.md","raw":"---\ntitle: 常见的面试题整理\ntags:\n  - 面试\nabbrlink: 2003578900\n---\n\n1. 服务端返回哪些 http状态码，浏览器会产生两次 http 请求？\n\n   答：302\n\n   http 状态码相关的内容，详细可查看篇目：**http状态码**\n\n2. TCP 和 UDP 有什么区别？画出示意图\n\n   答：详细可查看篇目：**TCP和UDP有什么区别**\n\n","slug":"Other/面试题整理2","published":1,"date":"2021-04-16T13:48:58.761Z","updated":"2021-04-29T10:24:58.993Z","_id":"ckotdh5tw0003kw8zckwd8cp9","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>服务端返回哪些 http状态码，浏览器会产生两次 http 请求？</p>\n<p>答：302</p>\n<p>http 状态码相关的内容，详细可查看篇目：<strong>http状态码</strong></p>\n</li>\n<li><p>TCP 和 UDP 有什么区别？画出示意图</p>\n<p>答：详细可查看篇目：<strong>TCP和UDP有什么区别</strong></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>服务端返回哪些 http状态码，浏览器会产生两次 http 请求？</p>\n<p>答：302</p>\n<p>http 状态码相关的内容，详细可查看篇目：<strong>http状态码</strong></p>\n</li>\n<li><p>TCP 和 UDP 有什么区别？画出示意图</p>\n<p>答：详细可查看篇目：<strong>TCP和UDP有什么区别</strong></p>\n</li>\n</ol>\n"},{"title":"两两对比算法","abbrlink":1991213779,"_content":"\n## PHP两两对比算法\n\n```php\n/**\n * PHP两两对比算法\n */\nfunction Combination($arr)\n{\n    $counts = count($arr);\n    for ($i = 0; $i < $counts - 1; $i++) {\n        for ($j = 0; $j < $counts - 1; $j++) {\n            if ($i > $j) {\n                continue;\n            }\n            print $arr[$i] . \"-\" . $arr[$j + 1] . PHP_EOL;\n        }\n    }\n}\n\n$arr = [1, 2, 3, 4, 5];\nCombination($arr);\n```\n\n## 输出\n\n```shell\n1-2\n1-3\n1-4\n1-5\n2-3\n2-4\n2-5\n3-4\n3-5\n4-5\n```\n\n\n\n###### 在线运行地址\n\nhttp://www.dooccn.com/php7/#id/f1e779eb03e30e7492a4c5d43ff41201\n\n","source":"_posts/Algorithm/两两对比算法.md","raw":"---\ntitle: 两两对比算法\ncategories:\n  - 算法学习\nabbrlink: 1991213779\n---\n\n## PHP两两对比算法\n\n```php\n/**\n * PHP两两对比算法\n */\nfunction Combination($arr)\n{\n    $counts = count($arr);\n    for ($i = 0; $i < $counts - 1; $i++) {\n        for ($j = 0; $j < $counts - 1; $j++) {\n            if ($i > $j) {\n                continue;\n            }\n            print $arr[$i] . \"-\" . $arr[$j + 1] . PHP_EOL;\n        }\n    }\n}\n\n$arr = [1, 2, 3, 4, 5];\nCombination($arr);\n```\n\n## 输出\n\n```shell\n1-2\n1-3\n1-4\n1-5\n2-3\n2-4\n2-5\n3-4\n3-5\n4-5\n```\n\n\n\n###### 在线运行地址\n\nhttp://www.dooccn.com/php7/#id/f1e779eb03e30e7492a4c5d43ff41201\n\n","slug":"Algorithm/两两对比算法","published":1,"date":"2021-04-20T01:12:11.890Z","updated":"2021-04-29T10:24:58.772Z","_id":"ckotdh5u00006kw8zg2o0d0dh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"PHP两两对比算法\"><a href=\"#PHP两两对比算法\" class=\"headerlink\" title=\"PHP两两对比算法\"></a>PHP两两对比算法</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * PHP两两对比算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Combination</span>(<span class=\"params\"><span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$counts</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$j</span> = <span class=\"number\">0</span>; <span class=\"variable\">$j</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$j</span>++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$i</span> &gt; <span class=\"variable\">$j</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>] . <span class=\"string\">&quot;-&quot;</span> . <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>] . PHP_EOL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$arr</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">Combination(<span class=\"variable\">$arr</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1-2</span><br><span class=\"line\">1-3</span><br><span class=\"line\">1-4</span><br><span class=\"line\">1-5</span><br><span class=\"line\">2-3</span><br><span class=\"line\">2-4</span><br><span class=\"line\">2-5</span><br><span class=\"line\">3-4</span><br><span class=\"line\">3-5</span><br><span class=\"line\">4-5</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"在线运行地址\"><a href=\"#在线运行地址\" class=\"headerlink\" title=\"在线运行地址\"></a>在线运行地址</h6><p><a href=\"http://www.dooccn.com/php7/#id/f1e779eb03e30e7492a4c5d43ff41201\">http://www.dooccn.com/php7/#id/f1e779eb03e30e7492a4c5d43ff41201</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"PHP两两对比算法\"><a href=\"#PHP两两对比算法\" class=\"headerlink\" title=\"PHP两两对比算法\"></a>PHP两两对比算法</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * PHP两两对比算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Combination</span>(<span class=\"params\"><span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$counts</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$j</span> = <span class=\"number\">0</span>; <span class=\"variable\">$j</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$j</span>++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$i</span> &gt; <span class=\"variable\">$j</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>] . <span class=\"string\">&quot;-&quot;</span> . <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>] . PHP_EOL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$arr</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">Combination(<span class=\"variable\">$arr</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1-2</span><br><span class=\"line\">1-3</span><br><span class=\"line\">1-4</span><br><span class=\"line\">1-5</span><br><span class=\"line\">2-3</span><br><span class=\"line\">2-4</span><br><span class=\"line\">2-5</span><br><span class=\"line\">3-4</span><br><span class=\"line\">3-5</span><br><span class=\"line\">4-5</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"在线运行地址\"><a href=\"#在线运行地址\" class=\"headerlink\" title=\"在线运行地址\"></a>在线运行地址</h6><p><a href=\"http://www.dooccn.com/php7/#id/f1e779eb03e30e7492a4c5d43ff41201\">http://www.dooccn.com/php7/#id/f1e779eb03e30e7492a4c5d43ff41201</a></p>\n"},{"title":"快速排序解析","abbrlink":2412115213,"_content":"\n## 快速排序原理\n\n快速排序使用分治法策略把一个串行（List）分成两个子串行（sub_Lists）。\n\n## 快速排序思路\n\n从数列中挑出一个元素，称为“基准”。\n\n重新排列数列，所有元素比基准值小的摆放在基准前边，所有元素比基准大的摆在基准后边（相同数可以到任一边）。\n\n在这个分组退出之后，该基准就处于数列的中间位置，这个称为分区操作。\n\n递归的把小于基准元素的子数列和大于基准元素的子数列排序。\n\n## 代码\n\n```php\n/**\n * 快速排序\n * @param $arr=[2, 3, 5, 1]\n * @return array\n */\npublic function quickSort($arr)\n{\n    $len = count($arr);\n    if ($len <= 1) return $arr;\n    $key = $arr[0];\n    $left_arr = array();\n    $right_arr = array();\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $key)\n            $left_arr[] = $arr[$i];\n        else\n            $right_arr[] = $arr[$i];\n    }\n    $left_arr = $this->quickSort($left_arr);\n    $right_arr = $this->quickSort($right_arr);\n    return array_merge($left_arr, array($key), $right_arr);\n}\n```\n\n## 结果\n\n```php\n最终结果：\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n)\n```\n\n①：第一次循环的时候，原始数组：[2, 3, 5, 1]，因为取了第一个值作为基准值，所以开始从第二个元素进行对比，和第一个基准对比\n\n3 和 2 比较，3 大于 2，不满足条件（`$arr[$i] <= $key`），把大的数给到右边 `$right_arr`\n\n②：第二次循环的时候\n\n5 和 2 比较，5 大于 2，不满足条件（`$arr[$i] <= $key`），依旧把大的数给到右边 `$right_arr`\n\n③：第三次循环的时候\n\n1 和 2 比较，1 小于 2，满足条件（`$arr[$i] <= $key`），把小的数给到左边 `$left_arr`\n\n④：第四次循环的时候，数组依旧循环完毕，现在将 `$left_arr` 和 `$left_arr`再次进行遍历\n\n```php\n$left_arr = $this->quickSort($left_arr);\n```\n\n因为 `$left_arr` 只有一个值，直接输出了，不会进行循环\n\n```php\n$right_arr=[3,5];\n```\n\n⑤：第五次循环的时候，`$right_arr`  数组进行循环遍历\n\n5 和 3 比较，5 大于 3，把大的数给到右边 `$right_arr`\n\n## 解析\n\n首先把数组的第一个元素设为 “基准”。\n\n```php\n$key = $arr[0];\n```\n\n定义两个临时数组\n\n```PHP\n$left_arr = array();\n$right_arr = array();\n```\n\n然后对数组进行常规 for 循环\n\n```php\nfor ($i = 1; $i < count($arr); $i++) {\n    ......\n}\n```\n\n按照 基准值 得大小把串行分成两个子串行（也就是把长数组分成两个小数组）\n\n```php\nif ($arr[$i] <= $key)\n    $left_arr[] = $arr[$i];\nelse\n    $right_arr[] = $arr[$i];\n```\n\n这样的话再次对两个小数组进行分治法\n\n```php\n  $left_arr = $this->quickSort($left_arr);\n$right_arr = $this->quickSort($right_arr);\n```\n\n最后把这几个小数组合按照顺序并起来，就分好了，记住，一定要按照顺序\n\n```php\nreturn array_merge($left_arr, array($key), $right_arr);\n```\n\n## 动画演示\n\n![img](https://img.jbzj.com/file_images/article/201404/20144983809211.gif?201439101622)\n\n\n\n\n\n​                                                                                                                                                                  ","source":"_posts/Algorithm/快速排序解析.md","raw":"---\ntitle: 快速排序解析\ncategories:\n  - 算法学习\ntags:\n  - 排序\nabbrlink: 2412115213\n---\n\n## 快速排序原理\n\n快速排序使用分治法策略把一个串行（List）分成两个子串行（sub_Lists）。\n\n## 快速排序思路\n\n从数列中挑出一个元素，称为“基准”。\n\n重新排列数列，所有元素比基准值小的摆放在基准前边，所有元素比基准大的摆在基准后边（相同数可以到任一边）。\n\n在这个分组退出之后，该基准就处于数列的中间位置，这个称为分区操作。\n\n递归的把小于基准元素的子数列和大于基准元素的子数列排序。\n\n## 代码\n\n```php\n/**\n * 快速排序\n * @param $arr=[2, 3, 5, 1]\n * @return array\n */\npublic function quickSort($arr)\n{\n    $len = count($arr);\n    if ($len <= 1) return $arr;\n    $key = $arr[0];\n    $left_arr = array();\n    $right_arr = array();\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $key)\n            $left_arr[] = $arr[$i];\n        else\n            $right_arr[] = $arr[$i];\n    }\n    $left_arr = $this->quickSort($left_arr);\n    $right_arr = $this->quickSort($right_arr);\n    return array_merge($left_arr, array($key), $right_arr);\n}\n```\n\n## 结果\n\n```php\n最终结果：\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n)\n```\n\n①：第一次循环的时候，原始数组：[2, 3, 5, 1]，因为取了第一个值作为基准值，所以开始从第二个元素进行对比，和第一个基准对比\n\n3 和 2 比较，3 大于 2，不满足条件（`$arr[$i] <= $key`），把大的数给到右边 `$right_arr`\n\n②：第二次循环的时候\n\n5 和 2 比较，5 大于 2，不满足条件（`$arr[$i] <= $key`），依旧把大的数给到右边 `$right_arr`\n\n③：第三次循环的时候\n\n1 和 2 比较，1 小于 2，满足条件（`$arr[$i] <= $key`），把小的数给到左边 `$left_arr`\n\n④：第四次循环的时候，数组依旧循环完毕，现在将 `$left_arr` 和 `$left_arr`再次进行遍历\n\n```php\n$left_arr = $this->quickSort($left_arr);\n```\n\n因为 `$left_arr` 只有一个值，直接输出了，不会进行循环\n\n```php\n$right_arr=[3,5];\n```\n\n⑤：第五次循环的时候，`$right_arr`  数组进行循环遍历\n\n5 和 3 比较，5 大于 3，把大的数给到右边 `$right_arr`\n\n## 解析\n\n首先把数组的第一个元素设为 “基准”。\n\n```php\n$key = $arr[0];\n```\n\n定义两个临时数组\n\n```PHP\n$left_arr = array();\n$right_arr = array();\n```\n\n然后对数组进行常规 for 循环\n\n```php\nfor ($i = 1; $i < count($arr); $i++) {\n    ......\n}\n```\n\n按照 基准值 得大小把串行分成两个子串行（也就是把长数组分成两个小数组）\n\n```php\nif ($arr[$i] <= $key)\n    $left_arr[] = $arr[$i];\nelse\n    $right_arr[] = $arr[$i];\n```\n\n这样的话再次对两个小数组进行分治法\n\n```php\n  $left_arr = $this->quickSort($left_arr);\n$right_arr = $this->quickSort($right_arr);\n```\n\n最后把这几个小数组合按照顺序并起来，就分好了，记住，一定要按照顺序\n\n```php\nreturn array_merge($left_arr, array($key), $right_arr);\n```\n\n## 动画演示\n\n![img](https://img.jbzj.com/file_images/article/201404/20144983809211.gif?201439101622)\n\n\n\n\n\n​                                                                                                                                                                  ","slug":"Algorithm/快速排序解析","published":1,"date":"2021-04-16T13:45:36.628Z","updated":"2021-04-29T10:24:58.834Z","_id":"ckotdh5u20008kw8z573m0lm2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"快速排序原理\"><a href=\"#快速排序原理\" class=\"headerlink\" title=\"快速排序原理\"></a>快速排序原理</h2><p>快速排序使用分治法策略把一个串行（List）分成两个子串行（sub_Lists）。</p>\n<h2 id=\"快速排序思路\"><a href=\"#快速排序思路\" class=\"headerlink\" title=\"快速排序思路\"></a>快速排序思路</h2><p>从数列中挑出一个元素，称为“基准”。</p>\n<p>重新排列数列，所有元素比基准值小的摆放在基准前边，所有元素比基准大的摆在基准后边（相同数可以到任一边）。</p>\n<p>在这个分组退出之后，该基准就处于数列的中间位置，这个称为分区操作。</p>\n<p>递归的把小于基准元素的子数列和大于基准元素的子数列排序。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $arr=[2, 3, 5, 1]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\"><span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$len</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$len</span> &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"variable\">$arr</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">1</span>; <span class=\"variable\">$i</span> &lt; count(<span class=\"variable\">$arr</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>] &lt;= <span class=\"variable\">$key</span>)</span><br><span class=\"line\">            <span class=\"variable\">$left_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"variable\">$right_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$left_arr</span>);</span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$right_arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_merge(<span class=\"variable\">$left_arr</span>, <span class=\"keyword\">array</span>(<span class=\"variable\">$key</span>), <span class=\"variable\">$right_arr</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最终结果：</span><br><span class=\"line\"><span class=\"keyword\">Array</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    [<span class=\"number\">0</span>] =&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>] =&gt; <span class=\"number\">2</span></span><br><span class=\"line\">    [<span class=\"number\">2</span>] =&gt; <span class=\"number\">3</span></span><br><span class=\"line\">    [<span class=\"number\">3</span>] =&gt; <span class=\"number\">5</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>①：第一次循环的时候，原始数组：[2, 3, 5, 1]，因为取了第一个值作为基准值，所以开始从第二个元素进行对比，和第一个基准对比</p>\n<p>3 和 2 比较，3 大于 2，不满足条件（<code>$arr[$i] &lt;= $key</code>），把大的数给到右边 <code>$right_arr</code></p>\n<p>②：第二次循环的时候</p>\n<p>5 和 2 比较，5 大于 2，不满足条件（<code>$arr[$i] &lt;= $key</code>），依旧把大的数给到右边 <code>$right_arr</code></p>\n<p>③：第三次循环的时候</p>\n<p>1 和 2 比较，1 小于 2，满足条件（<code>$arr[$i] &lt;= $key</code>），把小的数给到左边 <code>$left_arr</code></p>\n<p>④：第四次循环的时候，数组依旧循环完毕，现在将 <code>$left_arr</code> 和 <code>$left_arr</code>再次进行遍历</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$left_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$left_arr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>因为 <code>$left_arr</code> 只有一个值，直接输出了，不会进行循环</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$right_arr</span>=[<span class=\"number\">3</span>,<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<p>⑤：第五次循环的时候，<code>$right_arr</code>  数组进行循环遍历</p>\n<p>5 和 3 比较，5 大于 3，把大的数给到右边 <code>$right_arr</code></p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>首先把数组的第一个元素设为 “基准”。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$key</span> = <span class=\"variable\">$arr</span>[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p>定义两个临时数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$left_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"><span class=\"variable\">$right_arr</span> = <span class=\"keyword\">array</span>();</span><br></pre></td></tr></table></figure>\n\n<p>然后对数组进行常规 for 循环</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">1</span>; <span class=\"variable\">$i</span> &lt; count(<span class=\"variable\">$arr</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照 基准值 得大小把串行分成两个子串行（也就是把长数组分成两个小数组）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>] &lt;= <span class=\"variable\">$key</span>)</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br></pre></td></tr></table></figure>\n\n<p>这样的话再次对两个小数组进行分治法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"variable\">$left_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$left_arr</span>);</span><br><span class=\"line\"><span class=\"variable\">$right_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$right_arr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后把这几个小数组合按照顺序并起来，就分好了，记住，一定要按照顺序</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> array_merge(<span class=\"variable\">$left_arr</span>, <span class=\"keyword\">array</span>(<span class=\"variable\">$key</span>), <span class=\"variable\">$right_arr</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动画演示\"><a href=\"#动画演示\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h2><p><img src=\"https://img.jbzj.com/file_images/article/201404/20144983809211.gif?201439101622\" alt=\"img\"></p>\n<p>​                                                                                                                                                                  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"快速排序原理\"><a href=\"#快速排序原理\" class=\"headerlink\" title=\"快速排序原理\"></a>快速排序原理</h2><p>快速排序使用分治法策略把一个串行（List）分成两个子串行（sub_Lists）。</p>\n<h2 id=\"快速排序思路\"><a href=\"#快速排序思路\" class=\"headerlink\" title=\"快速排序思路\"></a>快速排序思路</h2><p>从数列中挑出一个元素，称为“基准”。</p>\n<p>重新排列数列，所有元素比基准值小的摆放在基准前边，所有元素比基准大的摆在基准后边（相同数可以到任一边）。</p>\n<p>在这个分组退出之后，该基准就处于数列的中间位置，这个称为分区操作。</p>\n<p>递归的把小于基准元素的子数列和大于基准元素的子数列排序。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $arr=[2, 3, 5, 1]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\"><span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$len</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$len</span> &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"variable\">$arr</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">1</span>; <span class=\"variable\">$i</span> &lt; count(<span class=\"variable\">$arr</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>] &lt;= <span class=\"variable\">$key</span>)</span><br><span class=\"line\">            <span class=\"variable\">$left_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"variable\">$right_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$left_arr</span>);</span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$right_arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_merge(<span class=\"variable\">$left_arr</span>, <span class=\"keyword\">array</span>(<span class=\"variable\">$key</span>), <span class=\"variable\">$right_arr</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最终结果：</span><br><span class=\"line\"><span class=\"keyword\">Array</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    [<span class=\"number\">0</span>] =&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>] =&gt; <span class=\"number\">2</span></span><br><span class=\"line\">    [<span class=\"number\">2</span>] =&gt; <span class=\"number\">3</span></span><br><span class=\"line\">    [<span class=\"number\">3</span>] =&gt; <span class=\"number\">5</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>①：第一次循环的时候，原始数组：[2, 3, 5, 1]，因为取了第一个值作为基准值，所以开始从第二个元素进行对比，和第一个基准对比</p>\n<p>3 和 2 比较，3 大于 2，不满足条件（<code>$arr[$i] &lt;= $key</code>），把大的数给到右边 <code>$right_arr</code></p>\n<p>②：第二次循环的时候</p>\n<p>5 和 2 比较，5 大于 2，不满足条件（<code>$arr[$i] &lt;= $key</code>），依旧把大的数给到右边 <code>$right_arr</code></p>\n<p>③：第三次循环的时候</p>\n<p>1 和 2 比较，1 小于 2，满足条件（<code>$arr[$i] &lt;= $key</code>），把小的数给到左边 <code>$left_arr</code></p>\n<p>④：第四次循环的时候，数组依旧循环完毕，现在将 <code>$left_arr</code> 和 <code>$left_arr</code>再次进行遍历</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$left_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$left_arr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>因为 <code>$left_arr</code> 只有一个值，直接输出了，不会进行循环</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$right_arr</span>=[<span class=\"number\">3</span>,<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<p>⑤：第五次循环的时候，<code>$right_arr</code>  数组进行循环遍历</p>\n<p>5 和 3 比较，5 大于 3，把大的数给到右边 <code>$right_arr</code></p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>首先把数组的第一个元素设为 “基准”。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$key</span> = <span class=\"variable\">$arr</span>[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p>定义两个临时数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$left_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"><span class=\"variable\">$right_arr</span> = <span class=\"keyword\">array</span>();</span><br></pre></td></tr></table></figure>\n\n<p>然后对数组进行常规 for 循环</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">1</span>; <span class=\"variable\">$i</span> &lt; count(<span class=\"variable\">$arr</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照 基准值 得大小把串行分成两个子串行（也就是把长数组分成两个小数组）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>] &lt;= <span class=\"variable\">$key</span>)</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br></pre></td></tr></table></figure>\n\n<p>这样的话再次对两个小数组进行分治法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"variable\">$left_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$left_arr</span>);</span><br><span class=\"line\"><span class=\"variable\">$right_arr</span> = <span class=\"keyword\">$this</span>-&gt;quickSort(<span class=\"variable\">$right_arr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后把这几个小数组合按照顺序并起来，就分好了，记住，一定要按照顺序</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> array_merge(<span class=\"variable\">$left_arr</span>, <span class=\"keyword\">array</span>(<span class=\"variable\">$key</span>), <span class=\"variable\">$right_arr</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动画演示\"><a href=\"#动画演示\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h2><p><img src=\"https://img.jbzj.com/file_images/article/201404/20144983809211.gif?201439101622\" alt=\"img\"></p>\n<p>​                                                                                                                                                                  </p>\n"},{"title":"检查给定数组是否成对排序","abbrlink":73634619,"_content":"\nhttps://www.geeksforgeeks.org/check-given-array-pairwise-sorted-not/\n\n","source":"_posts/Algorithm/检查给定数组是否成对排序.md","raw":"---\ntitle: 检查给定数组是否成对排序\ncategories:\n  - 算法学习\ntags:\n  - 排序\nabbrlink: 73634619\n---\n\nhttps://www.geeksforgeeks.org/check-given-array-pairwise-sorted-not/\n\n","slug":"Algorithm/检查给定数组是否成对排序","published":1,"date":"2021-04-20T01:09:17.944Z","updated":"2021-04-29T10:24:58.866Z","_id":"ckotdh5u5000bkw8zeriqfxeb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.geeksforgeeks.org/check-given-array-pairwise-sorted-not/\">https://www.geeksforgeeks.org/check-given-array-pairwise-sorted-not/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.geeksforgeeks.org/check-given-array-pairwise-sorted-not/\">https://www.geeksforgeeks.org/check-given-array-pairwise-sorted-not/</a></p>\n"},{"title":"编码-冒泡排序","abbrlink":1898961614,"_content":"\n## 代码\n\n```php\n<?php\nfunction bubbleSort(array $arr)\n{\n    $counts = count($arr);\n    if ($counts <= 0) return;\n    for ($i = 0; $i < $counts; $i++) {\n        for ($j = $counts - 1; $j > $i; $j--) {\n            if ($arr[$j] < $arr[$j - 1]) {\n                $tmp = $arr[$j];\n                $arr[$j] = $arr[$j - 1];\n                $arr[$j - 1] = $tmp;\n            }\n        }\n    }\n    return $arr;\n}\n\necho \"冒泡排序-正序\" . \"\\n\";\n$arr = array(1, 12, 16, 7, 9);\n$results = bubbleSort($arr);\nprint_r($results);\n```\n\n## 输出\n\n```shell\n冒泡排序-正序\nArray\n(\n    [0] => 1\n    [1] => 7\n    [2] => 9\n    [3] => 12\n    [4] => 16\n)\n```\n\n","source":"_posts/Algorithm/编码-冒泡排序.md","raw":"---\ntitle: 编码-冒泡排序\ncategories:\n  - 算法学习\ntags:\n  - 排序\nabbrlink: 1898961614\n---\n\n## 代码\n\n```php\n<?php\nfunction bubbleSort(array $arr)\n{\n    $counts = count($arr);\n    if ($counts <= 0) return;\n    for ($i = 0; $i < $counts; $i++) {\n        for ($j = $counts - 1; $j > $i; $j--) {\n            if ($arr[$j] < $arr[$j - 1]) {\n                $tmp = $arr[$j];\n                $arr[$j] = $arr[$j - 1];\n                $arr[$j - 1] = $tmp;\n            }\n        }\n    }\n    return $arr;\n}\n\necho \"冒泡排序-正序\" . \"\\n\";\n$arr = array(1, 12, 16, 7, 9);\n$results = bubbleSort($arr);\nprint_r($results);\n```\n\n## 输出\n\n```shell\n冒泡排序-正序\nArray\n(\n    [0] => 1\n    [1] => 7\n    [2] => 9\n    [3] => 12\n    [4] => 16\n)\n```\n\n","slug":"Algorithm/编码-冒泡排序","published":1,"date":"2021-04-16T13:45:36.634Z","updated":"2021-04-29T10:24:58.906Z","_id":"ckotdh5ua000fkw8z274gev5b","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\"><span class=\"keyword\">array</span> <span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$counts</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$counts</span> &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$counts</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$j</span> = <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$j</span> &gt; <span class=\"variable\">$i</span>; <span class=\"variable\">$j</span>--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] &lt; <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$tmp</span> = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>];</span><br><span class=\"line\">                <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> - <span class=\"number\">1</span>] = <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;冒泡排序-正序&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$arr</span> = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"variable\">$results</span> = bubbleSort(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">print_r(<span class=\"variable\">$results</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒泡排序-正序</span><br><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 1</span><br><span class=\"line\">    [1] =&gt; 7</span><br><span class=\"line\">    [2] =&gt; 9</span><br><span class=\"line\">    [3] =&gt; 12</span><br><span class=\"line\">    [4] =&gt; 16</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\"><span class=\"keyword\">array</span> <span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$counts</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$counts</span> &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$counts</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$j</span> = <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$j</span> &gt; <span class=\"variable\">$i</span>; <span class=\"variable\">$j</span>--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] &lt; <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$tmp</span> = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>];</span><br><span class=\"line\">                <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> - <span class=\"number\">1</span>] = <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;冒泡排序-正序&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$arr</span> = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"variable\">$results</span> = bubbleSort(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">print_r(<span class=\"variable\">$results</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒泡排序-正序</span><br><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 1</span><br><span class=\"line\">    [1] =&gt; 7</span><br><span class=\"line\">    [2] =&gt; 9</span><br><span class=\"line\">    [3] =&gt; 12</span><br><span class=\"line\">    [4] =&gt; 16</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"编码-快排算法","abbrlink":570953535,"_content":"\n## 代码\n\n```php\n<?php\nfunction kuaisu($arr)\n{\n    $len = count($arr);\n    if ($len <= 1) {\n        return $arr;\n    }\n    $key = $arr[0];\n    $left_arr = array();\n    $right_arr = array();\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] <= $key) {\n            $left_arr[] = $arr[$i];\n        } else {\n            $right_arr[] = $arr[$i];\n        }\n    }\n    $left_arr = kuaisu($left_arr);\n    $right_arr = kuaisu($right_arr);\n    return array_merge($left_arr, array($key), $right_arr);\n}\n\n\n$arr = array(23, 98, 54, 2, 9, 62, 34);\nprint_r(kuaisu($arr));\n```\n\n## 输出\n\n```shell\nArray\n(\n    [0] => 2\n    [1] => 9\n    [2] => 23\n    [3] => 34\n    [4] => 54\n    [5] => 62\n    [6] => 98\n)\n```\n\n","source":"_posts/Algorithm/编码-快排算法.md","raw":"---\ntitle: 编码-快排算法\ncategories:\n  - 算法学习\ntags:\n  - 排序\nabbrlink: 570953535\n---\n\n## 代码\n\n```php\n<?php\nfunction kuaisu($arr)\n{\n    $len = count($arr);\n    if ($len <= 1) {\n        return $arr;\n    }\n    $key = $arr[0];\n    $left_arr = array();\n    $right_arr = array();\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] <= $key) {\n            $left_arr[] = $arr[$i];\n        } else {\n            $right_arr[] = $arr[$i];\n        }\n    }\n    $left_arr = kuaisu($left_arr);\n    $right_arr = kuaisu($right_arr);\n    return array_merge($left_arr, array($key), $right_arr);\n}\n\n\n$arr = array(23, 98, 54, 2, 9, 62, 34);\nprint_r(kuaisu($arr));\n```\n\n## 输出\n\n```shell\nArray\n(\n    [0] => 2\n    [1] => 9\n    [2] => 23\n    [3] => 34\n    [4] => 54\n    [5] => 62\n    [6] => 98\n)\n```\n\n","slug":"Algorithm/编码-快排算法","published":1,"date":"2021-04-16T13:45:36.695Z","updated":"2021-04-29T10:24:58.932Z","_id":"ckotdh5ue000hkw8z1xoyhhh6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">kuaisu</span>(<span class=\"params\"><span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$len</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$len</span> &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"variable\">$arr</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">1</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$len</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>] &lt;= <span class=\"variable\">$key</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$left_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$right_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span> = kuaisu(<span class=\"variable\">$left_arr</span>);</span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span> = kuaisu(<span class=\"variable\">$right_arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_merge(<span class=\"variable\">$left_arr</span>, <span class=\"keyword\">array</span>(<span class=\"variable\">$key</span>), <span class=\"variable\">$right_arr</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$arr</span> = <span class=\"keyword\">array</span>(<span class=\"number\">23</span>, <span class=\"number\">98</span>, <span class=\"number\">54</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">62</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">print_r(kuaisu(<span class=\"variable\">$arr</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 2</span><br><span class=\"line\">    [1] =&gt; 9</span><br><span class=\"line\">    [2] =&gt; 23</span><br><span class=\"line\">    [3] =&gt; 34</span><br><span class=\"line\">    [4] =&gt; 54</span><br><span class=\"line\">    [5] =&gt; 62</span><br><span class=\"line\">    [6] =&gt; 98</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">kuaisu</span>(<span class=\"params\"><span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$len</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$len</span> &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"variable\">$arr</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">1</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$len</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>] &lt;= <span class=\"variable\">$key</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$left_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$right_arr</span>[] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$left_arr</span> = kuaisu(<span class=\"variable\">$left_arr</span>);</span><br><span class=\"line\">    <span class=\"variable\">$right_arr</span> = kuaisu(<span class=\"variable\">$right_arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_merge(<span class=\"variable\">$left_arr</span>, <span class=\"keyword\">array</span>(<span class=\"variable\">$key</span>), <span class=\"variable\">$right_arr</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$arr</span> = <span class=\"keyword\">array</span>(<span class=\"number\">23</span>, <span class=\"number\">98</span>, <span class=\"number\">54</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">62</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">print_r(kuaisu(<span class=\"variable\">$arr</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 2</span><br><span class=\"line\">    [1] =&gt; 9</span><br><span class=\"line\">    [2] =&gt; 23</span><br><span class=\"line\">    [3] =&gt; 34</span><br><span class=\"line\">    [4] =&gt; 54</span><br><span class=\"line\">    [5] =&gt; 62</span><br><span class=\"line\">    [6] =&gt; 98</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"国外一个学习算法很好的网站","abbrlink":3516134866,"_content":"\nhttps://www.geeksforgeeks.org/\n\n","source":"_posts/Algorithm/国外一个学习算法很好的网站.md","raw":"---\ntitle: 国外一个学习算法很好的网站\ncategories:\n  - 算法学习\ntags:\n  - 优秀网站\nabbrlink: 3516134866\n---\n\nhttps://www.geeksforgeeks.org/\n\n","slug":"Algorithm/国外一个学习算法很好的网站","published":1,"date":"2021-04-20T01:12:11.890Z","updated":"2021-04-29T10:24:58.788Z","_id":"ckotdh5ui000mkw8z9nlv8056","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.geeksforgeeks.org/\">https://www.geeksforgeeks.org/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.geeksforgeeks.org/\">https://www.geeksforgeeks.org/</a></p>\n"},{"title":"冒泡排序解析","abbrlink":2235748871,"_content":"\n## 冒泡排序原理\n\n比较两个相邻的元素，将值大的元素换到右边。\n\n## 冒泡排序思路\n\n依次比较相邻的两个数，将比较小的数放在前边，比较大的数放在后边。\n\n## 代码\n\n```php\n/**\n * 冒泡正序排序\n * @param $arr=[2, 3, 5, 1]\n */\npublic function sort($arr)\n{\n    $counts = count($arr);\n    if ($counts <= 1) return;\n    for ($i = 0; $i < $counts - 1; $i++) {\n        for ($j = 0; $j < $counts - $i - 1; $j++) {\n            if ($arr[$j] > $arr[$j + 1]) {\n                $tmp = $arr[$j];\n                $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $tmp;\n            }\n        }\n        print_r(\"第\" . $i . \"比较后的值：\");\n        print_r($arr);\n    }\n    return $arr;\n}\n```\n\n## 结果\n\n```shell\n冒泡正序排序\n第0比较后的值：Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 5\n)\n第1比较后的值：Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 3\n    [3] => 5\n)\n第2比较后的值：Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n)\n最终结果：\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n)\n\n```\n\n```shell\n2 3 5 1 #要比较的数组\n2 3 1 5 #①：第一次比较，比较三次\n2 1 3 5 #②：第二次比较，比较两次\n1 2 3 5 #③：第三次比较，比较一次\n```\n\n①：第一次比较的时候，比较三次，选出最大的数值放到最后一位：\n\n2 和 3 比较，2 小于 3，不动\n\n3 和 5 比较，3 小于 5，不动\n\n5 和 1比较，5 不小于 1，交换位置\n\n结果：2 3 1 5\n\n②：第二次比较的时候，比较两次，依旧选出最大的数值放到最后一位\n\n2 和 3 比较，2 小于 3，不动\n\n3 和 1 比较，3 不小于 1，交换位置\n\n结果：2 1 3 5\n\n③：第三次比较的时候，比较一次，依旧选出最大的数值放到最后一位\n\n2 和 1 比较，2 不小于 1，交换位置\n\n结果：1 2 3 5\n\n## 解析\n\n第一个 for 循环指的是外部循环的次数，也就是一共需要比较多少次，比较的次数是数组元素的 count-1 次，所以第一个 for 循环永远是 \n\n```php\nfor ($i = 0; $i < $counts - 1; $i++) {\n   ......\n}\n```\n\n第二个 for 循环指的是元素内部比较多少次，元素之间的比较，每次都会选出一个最大值放在最后边，这样的话，每次比较都是 counts-$i-1次，所以第二个循环是：\n\n```php\nfor ($j = 0; $j < $counts - $i - 1; $j++) {\n   ......\n}\n```\n\n进行元素之间比较的时候，如果第一个元素大于第二个元素，就需要交换位置，也就是满足此条件\n\n```php\nif ($arr[$j] > $arr[$j + 1]) {\n    ......\n}\n```\n\n满足这个条件后，就开始互换位置\n\n```php\n$tmp = $arr[$j];\n$arr[$j] = $arr[$j + 1];\n$arr[$j + 1] = $tmp;\n```\n\n最后输出的数组就是经过每次比较交换后的排序数组，\n\n如果需要正序排列，只需要改变条件即可\n\n```php\nif ($arr[$j] < $arr[$j + 1]) {\n   ......\n}\n```\n\n## 动画演示\n\n![](https://img.jbzj.com/file_images/article/201404/201449101643166.gif?201439101654)\n\n\n\n\n\n​                                                                                                                                                                  ","source":"_posts/Algorithm/冒泡排序解析.md","raw":"---\ntitle: 冒泡排序解析\ncategories:\n  - 算法学习\ntags:\n  - 排序\nabbrlink: 2235748871\n---\n\n## 冒泡排序原理\n\n比较两个相邻的元素，将值大的元素换到右边。\n\n## 冒泡排序思路\n\n依次比较相邻的两个数，将比较小的数放在前边，比较大的数放在后边。\n\n## 代码\n\n```php\n/**\n * 冒泡正序排序\n * @param $arr=[2, 3, 5, 1]\n */\npublic function sort($arr)\n{\n    $counts = count($arr);\n    if ($counts <= 1) return;\n    for ($i = 0; $i < $counts - 1; $i++) {\n        for ($j = 0; $j < $counts - $i - 1; $j++) {\n            if ($arr[$j] > $arr[$j + 1]) {\n                $tmp = $arr[$j];\n                $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $tmp;\n            }\n        }\n        print_r(\"第\" . $i . \"比较后的值：\");\n        print_r($arr);\n    }\n    return $arr;\n}\n```\n\n## 结果\n\n```shell\n冒泡正序排序\n第0比较后的值：Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 5\n)\n第1比较后的值：Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 3\n    [3] => 5\n)\n第2比较后的值：Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n)\n最终结果：\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n)\n\n```\n\n```shell\n2 3 5 1 #要比较的数组\n2 3 1 5 #①：第一次比较，比较三次\n2 1 3 5 #②：第二次比较，比较两次\n1 2 3 5 #③：第三次比较，比较一次\n```\n\n①：第一次比较的时候，比较三次，选出最大的数值放到最后一位：\n\n2 和 3 比较，2 小于 3，不动\n\n3 和 5 比较，3 小于 5，不动\n\n5 和 1比较，5 不小于 1，交换位置\n\n结果：2 3 1 5\n\n②：第二次比较的时候，比较两次，依旧选出最大的数值放到最后一位\n\n2 和 3 比较，2 小于 3，不动\n\n3 和 1 比较，3 不小于 1，交换位置\n\n结果：2 1 3 5\n\n③：第三次比较的时候，比较一次，依旧选出最大的数值放到最后一位\n\n2 和 1 比较，2 不小于 1，交换位置\n\n结果：1 2 3 5\n\n## 解析\n\n第一个 for 循环指的是外部循环的次数，也就是一共需要比较多少次，比较的次数是数组元素的 count-1 次，所以第一个 for 循环永远是 \n\n```php\nfor ($i = 0; $i < $counts - 1; $i++) {\n   ......\n}\n```\n\n第二个 for 循环指的是元素内部比较多少次，元素之间的比较，每次都会选出一个最大值放在最后边，这样的话，每次比较都是 counts-$i-1次，所以第二个循环是：\n\n```php\nfor ($j = 0; $j < $counts - $i - 1; $j++) {\n   ......\n}\n```\n\n进行元素之间比较的时候，如果第一个元素大于第二个元素，就需要交换位置，也就是满足此条件\n\n```php\nif ($arr[$j] > $arr[$j + 1]) {\n    ......\n}\n```\n\n满足这个条件后，就开始互换位置\n\n```php\n$tmp = $arr[$j];\n$arr[$j] = $arr[$j + 1];\n$arr[$j + 1] = $tmp;\n```\n\n最后输出的数组就是经过每次比较交换后的排序数组，\n\n如果需要正序排列，只需要改变条件即可\n\n```php\nif ($arr[$j] < $arr[$j + 1]) {\n   ......\n}\n```\n\n## 动画演示\n\n![](https://img.jbzj.com/file_images/article/201404/201449101643166.gif?201439101654)\n\n\n\n\n\n​                                                                                                                                                                  ","slug":"Algorithm/冒泡排序解析","published":1,"date":"2021-04-16T13:45:36.653Z","updated":"2021-04-29T10:24:58.778Z","_id":"ckotdh5uk000nkw8z2qh9a8dh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"冒泡排序原理\"><a href=\"#冒泡排序原理\" class=\"headerlink\" title=\"冒泡排序原理\"></a>冒泡排序原理</h2><p>比较两个相邻的元素，将值大的元素换到右边。</p>\n<h2 id=\"冒泡排序思路\"><a href=\"#冒泡排序思路\" class=\"headerlink\" title=\"冒泡排序思路\"></a>冒泡排序思路</h2><p>依次比较相邻的两个数，将比较小的数放在前边，比较大的数放在后边。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 冒泡正序排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $arr=[2, 3, 5, 1]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\"><span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$counts</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$counts</span> &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$j</span> = <span class=\"number\">0</span>; <span class=\"variable\">$j</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"variable\">$i</span> - <span class=\"number\">1</span>; <span class=\"variable\">$j</span>++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] &gt; <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$tmp</span> = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>];</span><br><span class=\"line\">                <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>] = <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print_r(<span class=\"string\">&quot;第&quot;</span> . <span class=\"variable\">$i</span> . <span class=\"string\">&quot;比较后的值：&quot;</span>);</span><br><span class=\"line\">        print_r(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒泡正序排序</span><br><span class=\"line\">第0比较后的值：Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 2</span><br><span class=\"line\">    [1] =&gt; 3</span><br><span class=\"line\">    [2] =&gt; 1</span><br><span class=\"line\">    [3] =&gt; 5</span><br><span class=\"line\">)</span><br><span class=\"line\">第1比较后的值：Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 2</span><br><span class=\"line\">    [1] =&gt; 1</span><br><span class=\"line\">    [2] =&gt; 3</span><br><span class=\"line\">    [3] =&gt; 5</span><br><span class=\"line\">)</span><br><span class=\"line\">第2比较后的值：Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 1</span><br><span class=\"line\">    [1] =&gt; 2</span><br><span class=\"line\">    [2] =&gt; 3</span><br><span class=\"line\">    [3] =&gt; 5</span><br><span class=\"line\">)</span><br><span class=\"line\">最终结果：</span><br><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 1</span><br><span class=\"line\">    [1] =&gt; 2</span><br><span class=\"line\">    [2] =&gt; 3</span><br><span class=\"line\">    [3] =&gt; 5</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 5 1 #要比较的数组</span><br><span class=\"line\">2 3 1 5 #①：第一次比较，比较三次</span><br><span class=\"line\">2 1 3 5 #②：第二次比较，比较两次</span><br><span class=\"line\">1 2 3 5 #③：第三次比较，比较一次</span><br></pre></td></tr></table></figure>\n\n<p>①：第一次比较的时候，比较三次，选出最大的数值放到最后一位：</p>\n<p>2 和 3 比较，2 小于 3，不动</p>\n<p>3 和 5 比较，3 小于 5，不动</p>\n<p>5 和 1比较，5 不小于 1，交换位置</p>\n<p>结果：2 3 1 5</p>\n<p>②：第二次比较的时候，比较两次，依旧选出最大的数值放到最后一位</p>\n<p>2 和 3 比较，2 小于 3，不动</p>\n<p>3 和 1 比较，3 不小于 1，交换位置</p>\n<p>结果：2 1 3 5</p>\n<p>③：第三次比较的时候，比较一次，依旧选出最大的数值放到最后一位</p>\n<p>2 和 1 比较，2 不小于 1，交换位置</p>\n<p>结果：1 2 3 5</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>第一个 for 循环指的是外部循环的次数，也就是一共需要比较多少次，比较的次数是数组元素的 count-1 次，所以第一个 for 循环永远是 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个 for 循环指的是元素内部比较多少次，元素之间的比较，每次都会选出一个最大值放在最后边，这样的话，每次比较都是 counts-$i-1次，所以第二个循环是：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$j</span> = <span class=\"number\">0</span>; <span class=\"variable\">$j</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"variable\">$i</span> - <span class=\"number\">1</span>; <span class=\"variable\">$j</span>++) &#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进行元素之间比较的时候，如果第一个元素大于第二个元素，就需要交换位置，也就是满足此条件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] &gt; <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>满足这个条件后，就开始互换位置</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$tmp</span> = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>];</span><br><span class=\"line\"><span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>] = <span class=\"variable\">$tmp</span>;</span><br></pre></td></tr></table></figure>\n\n<p>最后输出的数组就是经过每次比较交换后的排序数组，</p>\n<p>如果需要正序排列，只需要改变条件即可</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] &lt; <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动画演示\"><a href=\"#动画演示\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h2><p><img src=\"https://img.jbzj.com/file_images/article/201404/201449101643166.gif?201439101654\"></p>\n<p>​                                                                                                                                                                  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"冒泡排序原理\"><a href=\"#冒泡排序原理\" class=\"headerlink\" title=\"冒泡排序原理\"></a>冒泡排序原理</h2><p>比较两个相邻的元素，将值大的元素换到右边。</p>\n<h2 id=\"冒泡排序思路\"><a href=\"#冒泡排序思路\" class=\"headerlink\" title=\"冒泡排序思路\"></a>冒泡排序思路</h2><p>依次比较相邻的两个数，将比较小的数放在前边，比较大的数放在后边。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 冒泡正序排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $arr=[2, 3, 5, 1]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\"><span class=\"variable\">$arr</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$counts</span> = count(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$counts</span> &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$j</span> = <span class=\"number\">0</span>; <span class=\"variable\">$j</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"variable\">$i</span> - <span class=\"number\">1</span>; <span class=\"variable\">$j</span>++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] &gt; <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$tmp</span> = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>];</span><br><span class=\"line\">                <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>] = <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print_r(<span class=\"string\">&quot;第&quot;</span> . <span class=\"variable\">$i</span> . <span class=\"string\">&quot;比较后的值：&quot;</span>);</span><br><span class=\"line\">        print_r(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒泡正序排序</span><br><span class=\"line\">第0比较后的值：Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 2</span><br><span class=\"line\">    [1] =&gt; 3</span><br><span class=\"line\">    [2] =&gt; 1</span><br><span class=\"line\">    [3] =&gt; 5</span><br><span class=\"line\">)</span><br><span class=\"line\">第1比较后的值：Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 2</span><br><span class=\"line\">    [1] =&gt; 1</span><br><span class=\"line\">    [2] =&gt; 3</span><br><span class=\"line\">    [3] =&gt; 5</span><br><span class=\"line\">)</span><br><span class=\"line\">第2比较后的值：Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 1</span><br><span class=\"line\">    [1] =&gt; 2</span><br><span class=\"line\">    [2] =&gt; 3</span><br><span class=\"line\">    [3] =&gt; 5</span><br><span class=\"line\">)</span><br><span class=\"line\">最终结果：</span><br><span class=\"line\">Array</span><br><span class=\"line\">(</span><br><span class=\"line\">    [0] =&gt; 1</span><br><span class=\"line\">    [1] =&gt; 2</span><br><span class=\"line\">    [2] =&gt; 3</span><br><span class=\"line\">    [3] =&gt; 5</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 5 1 #要比较的数组</span><br><span class=\"line\">2 3 1 5 #①：第一次比较，比较三次</span><br><span class=\"line\">2 1 3 5 #②：第二次比较，比较两次</span><br><span class=\"line\">1 2 3 5 #③：第三次比较，比较一次</span><br></pre></td></tr></table></figure>\n\n<p>①：第一次比较的时候，比较三次，选出最大的数值放到最后一位：</p>\n<p>2 和 3 比较，2 小于 3，不动</p>\n<p>3 和 5 比较，3 小于 5，不动</p>\n<p>5 和 1比较，5 不小于 1，交换位置</p>\n<p>结果：2 3 1 5</p>\n<p>②：第二次比较的时候，比较两次，依旧选出最大的数值放到最后一位</p>\n<p>2 和 3 比较，2 小于 3，不动</p>\n<p>3 和 1 比较，3 不小于 1，交换位置</p>\n<p>结果：2 1 3 5</p>\n<p>③：第三次比较的时候，比较一次，依旧选出最大的数值放到最后一位</p>\n<p>2 和 1 比较，2 不小于 1，交换位置</p>\n<p>结果：1 2 3 5</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>第一个 for 循环指的是外部循环的次数，也就是一共需要比较多少次，比较的次数是数组元素的 count-1 次，所以第一个 for 循环永远是 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"number\">1</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个 for 循环指的是元素内部比较多少次，元素之间的比较，每次都会选出一个最大值放在最后边，这样的话，每次比较都是 counts-$i-1次，所以第二个循环是：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$j</span> = <span class=\"number\">0</span>; <span class=\"variable\">$j</span> &lt; <span class=\"variable\">$counts</span> - <span class=\"variable\">$i</span> - <span class=\"number\">1</span>; <span class=\"variable\">$j</span>++) &#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进行元素之间比较的时候，如果第一个元素大于第二个元素，就需要交换位置，也就是满足此条件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] &gt; <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>满足这个条件后，就开始互换位置</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$tmp</span> = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>];</span><br><span class=\"line\"><span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] = <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>] = <span class=\"variable\">$tmp</span>;</span><br></pre></td></tr></table></figure>\n\n<p>最后输出的数组就是经过每次比较交换后的排序数组，</p>\n<p>如果需要正序排列，只需要改变条件即可</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span>] &lt; <span class=\"variable\">$arr</span>[<span class=\"variable\">$j</span> + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动画演示\"><a href=\"#动画演示\" class=\"headerlink\" title=\"动画演示\"></a>动画演示</h2><p><img src=\"https://img.jbzj.com/file_images/article/201404/201449101643166.gif?201439101654\"></p>\n<p>​                                                                                                                                                                  </p>\n"},{"title":"开篇词","abbrlink":188254796,"date":"2021-04-22T16:00:00.000Z","_content":"\n#### Go 语言的优势\n\n- 语法简洁、上手快（至于上手快不快，首先得上手）、开发效率更高\n- 垃圾回收机制、自动释放内存、可以大大提高性能\n- Go 天生支持并发处理，可以开发出高性能程序\n- 强大的标准库、丰富的第三方库，提升开发效率\n- 可以编译为执行文件，不依赖其他的库，部署方便\n- 跨平台支持，支持编译成不同平台的程序\n\n","source":"_posts/Class/22-speaking-go-language/ch1-0.md","raw":"---\ntitle: 开篇词\ncategories:\n  - 课程笔记\n  - 22讲通关Go语言\n  - 开篇词\nabbrlink: 188254796\ndate: 2021-04-23 00:00:00\n---\n\n#### Go 语言的优势\n\n- 语法简洁、上手快（至于上手快不快，首先得上手）、开发效率更高\n- 垃圾回收机制、自动释放内存、可以大大提高性能\n- Go 天生支持并发处理，可以开发出高性能程序\n- 强大的标准库、丰富的第三方库，提升开发效率\n- 可以编译为执行文件，不依赖其他的库，部署方便\n- 跨平台支持，支持编译成不同平台的程序\n\n","slug":"Class/22-speaking-go-language/ch1-0","published":1,"updated":"2021-04-29T10:24:59.026Z","_id":"ckotdh5um000rkw8z1il169ih","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Go-语言的优势\"><a href=\"#Go-语言的优势\" class=\"headerlink\" title=\"Go 语言的优势\"></a>Go 语言的优势</h4><ul>\n<li>语法简洁、上手快（至于上手快不快，首先得上手）、开发效率更高</li>\n<li>垃圾回收机制、自动释放内存、可以大大提高性能</li>\n<li>Go 天生支持并发处理，可以开发出高性能程序</li>\n<li>强大的标准库、丰富的第三方库，提升开发效率</li>\n<li>可以编译为执行文件，不依赖其他的库，部署方便</li>\n<li>跨平台支持，支持编译成不同平台的程序</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Go-语言的优势\"><a href=\"#Go-语言的优势\" class=\"headerlink\" title=\"Go 语言的优势\"></a>Go 语言的优势</h4><ul>\n<li>语法简洁、上手快（至于上手快不快，首先得上手）、开发效率更高</li>\n<li>垃圾回收机制、自动释放内存、可以大大提高性能</li>\n<li>Go 天生支持并发处理，可以开发出高性能程序</li>\n<li>强大的标准库、丰富的第三方库，提升开发效率</li>\n<li>可以编译为执行文件，不依赖其他的库，部署方便</li>\n<li>跨平台支持，支持编译成不同平台的程序</li>\n</ul>\n"},{"title":"01 | 基础入门：编写你的第一个 Go 语言程序","abbrlink":1719467524,"date":"2021-04-22T16:00:00.000Z","_content":"\n#### 第一个 Go 程序 “Hello Go”\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello Go\")\n}\n\n```\n\n##### 运行 Go 程序\n\n```shell\ngo run main.go\n```\n\n##### 结果\n\n```shell\nHello Go\n```\n\n#### 程序结构\n\npackage main 代表的是一个可运行的应用程序，main 函数则是这个应用程序的主入口。\n\n- 第一行的 **package main** 代表当前的 go 程序文件属于哪个包，其中 package 是 Go 语言声明包的关键字，main 代表声明的包的名字。\n- 第二行的 **import \"fmt\"** 是导入一个 fmt 包，import 也是 Go 的关键字。\n- 第三行的 **func main()** 代表定义一个函数，其中 func 也是 Go 的关键字，表示定义一个函数或者一个方法，main 是函数名。在 Go 语言中 main 函数是一个特殊的函数，它是整个程序的入口。在程序运行的时候，会先调用 main 函数，然后通过 main 函数再调用其他函数，实现业务逻辑。\n- 第四行的 **fmt.Println(\"Hello Go\")** ，是打印输出结果 \"Hello Go\"\n- 第五行的 代表 main 函数结束，整个程序结束\n\n#### 编译发布 Go 程序\n\n```shell\ngo build main.go\n```\n\n执行会生成 main 可执行文件，执行以下命令也会输出 \"Hello Go\"\n\n```shell\n./main\n```\n\n#### 跨平台编译\n\n官方文档：https://golang.org/doc/install/source#environment\n\n","source":"_posts/Class/22-speaking-go-language/ch1-1.md","raw":"---\ntitle: 01 | 基础入门：编写你的第一个 Go 语言程序\ncategories:\n  - 课程笔记\n  - 22讲通关Go语言\n  - 第一部分：Go语言快速入门\nabbrlink: 1719467524\ndate: 2021-04-23 00:00:00\n---\n\n#### 第一个 Go 程序 “Hello Go”\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello Go\")\n}\n\n```\n\n##### 运行 Go 程序\n\n```shell\ngo run main.go\n```\n\n##### 结果\n\n```shell\nHello Go\n```\n\n#### 程序结构\n\npackage main 代表的是一个可运行的应用程序，main 函数则是这个应用程序的主入口。\n\n- 第一行的 **package main** 代表当前的 go 程序文件属于哪个包，其中 package 是 Go 语言声明包的关键字，main 代表声明的包的名字。\n- 第二行的 **import \"fmt\"** 是导入一个 fmt 包，import 也是 Go 的关键字。\n- 第三行的 **func main()** 代表定义一个函数，其中 func 也是 Go 的关键字，表示定义一个函数或者一个方法，main 是函数名。在 Go 语言中 main 函数是一个特殊的函数，它是整个程序的入口。在程序运行的时候，会先调用 main 函数，然后通过 main 函数再调用其他函数，实现业务逻辑。\n- 第四行的 **fmt.Println(\"Hello Go\")** ，是打印输出结果 \"Hello Go\"\n- 第五行的 代表 main 函数结束，整个程序结束\n\n#### 编译发布 Go 程序\n\n```shell\ngo build main.go\n```\n\n执行会生成 main 可执行文件，执行以下命令也会输出 \"Hello Go\"\n\n```shell\n./main\n```\n\n#### 跨平台编译\n\n官方文档：https://golang.org/doc/install/source#environment\n\n","slug":"Class/22-speaking-go-language/ch1-1","published":1,"updated":"2021-04-29T10:24:59.014Z","_id":"ckotdh5uo000ukw8z5csdajg2","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"第一个-Go-程序-“Hello-Go”\"><a href=\"#第一个-Go-程序-“Hello-Go”\" class=\"headerlink\" title=\"第一个 Go 程序 “Hello Go”\"></a>第一个 Go 程序 “Hello Go”</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello Go&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行-Go-程序\"><a href=\"#运行-Go-程序\" class=\"headerlink\" title=\"运行 Go 程序\"></a>运行 Go 程序</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run main.go</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello Go</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"程序结构\"><a href=\"#程序结构\" class=\"headerlink\" title=\"程序结构\"></a>程序结构</h4><p>package main 代表的是一个可运行的应用程序，main 函数则是这个应用程序的主入口。</p>\n<ul>\n<li>第一行的 <strong>package main</strong> 代表当前的 go 程序文件属于哪个包，其中 package 是 Go 语言声明包的关键字，main 代表声明的包的名字。</li>\n<li>第二行的 <strong>import “fmt”</strong> 是导入一个 fmt 包，import 也是 Go 的关键字。</li>\n<li>第三行的 <strong>func main()</strong> 代表定义一个函数，其中 func 也是 Go 的关键字，表示定义一个函数或者一个方法，main 是函数名。在 Go 语言中 main 函数是一个特殊的函数，它是整个程序的入口。在程序运行的时候，会先调用 main 函数，然后通过 main 函数再调用其他函数，实现业务逻辑。</li>\n<li>第四行的 <strong>fmt.Println(“Hello Go”)</strong> ，是打印输出结果 “Hello Go”</li>\n<li>第五行的 代表 main 函数结束，整个程序结束</li>\n</ul>\n<h4 id=\"编译发布-Go-程序\"><a href=\"#编译发布-Go-程序\" class=\"headerlink\" title=\"编译发布 Go 程序\"></a>编译发布 Go 程序</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build main.go</span><br></pre></td></tr></table></figure>\n\n<p>执行会生成 main 可执行文件，执行以下命令也会输出 “Hello Go”</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"跨平台编译\"><a href=\"#跨平台编译\" class=\"headerlink\" title=\"跨平台编译\"></a>跨平台编译</h4><p>官方文档：<a href=\"https://golang.org/doc/install/source#environment\">https://golang.org/doc/install/source#environment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"第一个-Go-程序-“Hello-Go”\"><a href=\"#第一个-Go-程序-“Hello-Go”\" class=\"headerlink\" title=\"第一个 Go 程序 “Hello Go”\"></a>第一个 Go 程序 “Hello Go”</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello Go&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行-Go-程序\"><a href=\"#运行-Go-程序\" class=\"headerlink\" title=\"运行 Go 程序\"></a>运行 Go 程序</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run main.go</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello Go</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"程序结构\"><a href=\"#程序结构\" class=\"headerlink\" title=\"程序结构\"></a>程序结构</h4><p>package main 代表的是一个可运行的应用程序，main 函数则是这个应用程序的主入口。</p>\n<ul>\n<li>第一行的 <strong>package main</strong> 代表当前的 go 程序文件属于哪个包，其中 package 是 Go 语言声明包的关键字，main 代表声明的包的名字。</li>\n<li>第二行的 <strong>import “fmt”</strong> 是导入一个 fmt 包，import 也是 Go 的关键字。</li>\n<li>第三行的 <strong>func main()</strong> 代表定义一个函数，其中 func 也是 Go 的关键字，表示定义一个函数或者一个方法，main 是函数名。在 Go 语言中 main 函数是一个特殊的函数，它是整个程序的入口。在程序运行的时候，会先调用 main 函数，然后通过 main 函数再调用其他函数，实现业务逻辑。</li>\n<li>第四行的 <strong>fmt.Println(“Hello Go”)</strong> ，是打印输出结果 “Hello Go”</li>\n<li>第五行的 代表 main 函数结束，整个程序结束</li>\n</ul>\n<h4 id=\"编译发布-Go-程序\"><a href=\"#编译发布-Go-程序\" class=\"headerlink\" title=\"编译发布 Go 程序\"></a>编译发布 Go 程序</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build main.go</span><br></pre></td></tr></table></figure>\n\n<p>执行会生成 main 可执行文件，执行以下命令也会输出 “Hello Go”</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"跨平台编译\"><a href=\"#跨平台编译\" class=\"headerlink\" title=\"跨平台编译\"></a>跨平台编译</h4><p>官方文档：<a href=\"https://golang.org/doc/install/source#environment\">https://golang.org/doc/install/source#environment</a></p>\n"},{"title":"02 | 数据类型：你必须掌握的数据类型有哪些？【1】","abbrlink":2755664247,"date":"2021-04-23T16:00:00.000Z","_content":"\n#### 变量的声明\n\n```go\nvar 变量名 类型=表达式\n```\n\n#### Example\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t//var声明一个变量格式\n\t// var 变量名 类型 = 表达式\n\tvar a int = 10\n\tfmt.Println(a)\n\t//也可以不指定变量的类型\n\tvar b = 20\n\tfmt.Println(b)\n\t//一次声明多个变量\n\tvar (\n\t\tc = 1\n\t\td = 2\n\t)\n\tfmt.Println(c)\n\tfmt.Println(d)\n\t//因为是同类型的变量，可以简写为\n\tvar (\n\t\tj = 0\n\t\tk = 1\n\t)\n\n\tfmt.Println(j)\n\tfmt.Println(k)\n\t//TODO::Go的基础类型学习\n\t//TODO::整型，整型可分为：\n\t//TODO::有符号整型：int、int8、int16、int32和int64\n\n\t//TODO::浮点型\n\tfmt.Println(\"---------浮点型-------\")\n\tvar f32 float32 = 2.2\n\tvar f64 float64 = 10.3456\n\tfmt.Println(\"f32:\", f32, \"f64:\", f64)\n\t//TODO::布尔型\n\tfmt.Println(\"---------布尔型-------\")\n\tvar bf bool = false\n\tvar bt bool = true\n\tfmt.Println(\"bf:\", bf, \"bt:\", bt)\n\t//TODO::字符串\n\tfmt.Println(\"---------字符串-------\")\n\tvar s1 string = \"世界\"\n\tvar s2 string = \"hello\"\n\tfmt.Println(\"say:\", s1+s2)\n\t//TODO::零值\n\tfmt.Println(\"---------零值-------\")\n\tvar z1 int\n\tvar z2 float64\n\tvar z3 bool\n\tvar z4 string\n\tfmt.Println(z1, z2, z3, z4)\n\t//TODO::变量\n\tfmt.Println(\"---------变量的简短声明-------\")\n\t//变量名:=b表达式（等于 var 变量名=表达式）\n\ti := 10\n\t//bf1: = true\n\t//s1 := \"Hello\"\n\tfmt.Println(\"简短声明：\", i)\n\t//TODO::指针\n\tfmt.Println(\"---------指针-------\")\n\tpi := &i\n\tfmt.Println(*pi)\n\t//TODO::赋值\n\tfmt.Println(\"---------赋值-------\")\n\ti = 20\n\tfmt.Println(\"i的新值为：\", i)\n\t//TODO::常量【在 Go 语言中，只允许布尔型、字符串、数字类型这些基础类型作为常量】\n\tfmt.Println(\"---------常量-------\")\n\tconst name = \"飞雪无情\"\n\t//TODO::常量生成器iota\n\tfmt.Println(\"---------常量生成器-------\")\n\tconst (\n\t\tone   = 1\n\t\ttwo   = 2\n\t\tthree = 3\n\t\tfour  = 4\n\t)\n\tfmt.Println(\"常量生成器：\", one, two, three, four)\n\tconst (\n\t\toneI = iota + 1\n\t\ttwoI\n\t\tthreeI\n\t\tfourI\n\t)\n\tfmt.Println(\"常量生成器(递增)：\", oneI, twoI, threeI, fourI)\n}\n\n```\n\n\n\n","source":"_posts/Class/22-speaking-go-language/ch1-2-1.md","raw":"---\ntitle: 02 | 数据类型：你必须掌握的数据类型有哪些？【1】\ncategories:\n  - 课程笔记\n  - 22讲通关Go语言\n  - 第一部分：Go语言快速入门\nabbrlink: 2755664247\ndate: 2021-04-24 00:00:00\n---\n\n#### 变量的声明\n\n```go\nvar 变量名 类型=表达式\n```\n\n#### Example\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t//var声明一个变量格式\n\t// var 变量名 类型 = 表达式\n\tvar a int = 10\n\tfmt.Println(a)\n\t//也可以不指定变量的类型\n\tvar b = 20\n\tfmt.Println(b)\n\t//一次声明多个变量\n\tvar (\n\t\tc = 1\n\t\td = 2\n\t)\n\tfmt.Println(c)\n\tfmt.Println(d)\n\t//因为是同类型的变量，可以简写为\n\tvar (\n\t\tj = 0\n\t\tk = 1\n\t)\n\n\tfmt.Println(j)\n\tfmt.Println(k)\n\t//TODO::Go的基础类型学习\n\t//TODO::整型，整型可分为：\n\t//TODO::有符号整型：int、int8、int16、int32和int64\n\n\t//TODO::浮点型\n\tfmt.Println(\"---------浮点型-------\")\n\tvar f32 float32 = 2.2\n\tvar f64 float64 = 10.3456\n\tfmt.Println(\"f32:\", f32, \"f64:\", f64)\n\t//TODO::布尔型\n\tfmt.Println(\"---------布尔型-------\")\n\tvar bf bool = false\n\tvar bt bool = true\n\tfmt.Println(\"bf:\", bf, \"bt:\", bt)\n\t//TODO::字符串\n\tfmt.Println(\"---------字符串-------\")\n\tvar s1 string = \"世界\"\n\tvar s2 string = \"hello\"\n\tfmt.Println(\"say:\", s1+s2)\n\t//TODO::零值\n\tfmt.Println(\"---------零值-------\")\n\tvar z1 int\n\tvar z2 float64\n\tvar z3 bool\n\tvar z4 string\n\tfmt.Println(z1, z2, z3, z4)\n\t//TODO::变量\n\tfmt.Println(\"---------变量的简短声明-------\")\n\t//变量名:=b表达式（等于 var 变量名=表达式）\n\ti := 10\n\t//bf1: = true\n\t//s1 := \"Hello\"\n\tfmt.Println(\"简短声明：\", i)\n\t//TODO::指针\n\tfmt.Println(\"---------指针-------\")\n\tpi := &i\n\tfmt.Println(*pi)\n\t//TODO::赋值\n\tfmt.Println(\"---------赋值-------\")\n\ti = 20\n\tfmt.Println(\"i的新值为：\", i)\n\t//TODO::常量【在 Go 语言中，只允许布尔型、字符串、数字类型这些基础类型作为常量】\n\tfmt.Println(\"---------常量-------\")\n\tconst name = \"飞雪无情\"\n\t//TODO::常量生成器iota\n\tfmt.Println(\"---------常量生成器-------\")\n\tconst (\n\t\tone   = 1\n\t\ttwo   = 2\n\t\tthree = 3\n\t\tfour  = 4\n\t)\n\tfmt.Println(\"常量生成器：\", one, two, three, four)\n\tconst (\n\t\toneI = iota + 1\n\t\ttwoI\n\t\tthreeI\n\t\tfourI\n\t)\n\tfmt.Println(\"常量生成器(递增)：\", oneI, twoI, threeI, fourI)\n}\n\n```\n\n\n\n","slug":"Class/22-speaking-go-language/ch1-2-1","published":1,"updated":"2021-04-29T10:24:59.031Z","_id":"ckotdh5uq000zkw8z23s60egd","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"变量的声明\"><a href=\"#变量的声明\" class=\"headerlink\" title=\"变量的声明\"></a>变量的声明</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 类型=表达式</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//var声明一个变量格式</span></span><br><span class=\"line\">\t<span class=\"comment\">// var 变量名 类型 = 表达式</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">\t<span class=\"comment\">//也可以不指定变量的类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"number\">20</span></span><br><span class=\"line\">\tfmt.Println(b)</span><br><span class=\"line\">\t<span class=\"comment\">//一次声明多个变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tc = <span class=\"number\">1</span></span><br><span class=\"line\">\t\td = <span class=\"number\">2</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(c)</span><br><span class=\"line\">\tfmt.Println(d)</span><br><span class=\"line\">\t<span class=\"comment\">//因为是同类型的变量，可以简写为</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tj = <span class=\"number\">0</span></span><br><span class=\"line\">\t\tk = <span class=\"number\">1</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(j)</span><br><span class=\"line\">\tfmt.Println(k)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:Go的基础类型学习</span></span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:整型，整型可分为：</span></span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:有符号整型：int、int8、int16、int32和int64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:浮点型</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------浮点型-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f32 <span class=\"keyword\">float32</span> = <span class=\"number\">2.2</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f64 <span class=\"keyword\">float64</span> = <span class=\"number\">10.3456</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;f32:&quot;</span>, f32, <span class=\"string\">&quot;f64:&quot;</span>, f64)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:布尔型</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------布尔型-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> bf <span class=\"keyword\">bool</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> bt <span class=\"keyword\">bool</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;bf:&quot;</span>, bf, <span class=\"string\">&quot;bt:&quot;</span>, bt)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:字符串</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------字符串-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s1 <span class=\"keyword\">string</span> = <span class=\"string\">&quot;世界&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s2 <span class=\"keyword\">string</span> = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;say:&quot;</span>, s1+s2)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:零值</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------零值-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z1 <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z2 <span class=\"keyword\">float64</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z3 <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z4 <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Println(z1, z2, z3, z4)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:变量</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------变量的简短声明-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//变量名:=b表达式（等于 var 变量名=表达式）</span></span><br><span class=\"line\">\ti := <span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"comment\">//bf1: = true</span></span><br><span class=\"line\">\t<span class=\"comment\">//s1 := &quot;Hello&quot;</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;简短声明：&quot;</span>, i)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:指针</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------指针-------&quot;</span>)</span><br><span class=\"line\">\tpi := &amp;i</span><br><span class=\"line\">\tfmt.Println(*pi)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:赋值</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------赋值-------&quot;</span>)</span><br><span class=\"line\">\ti = <span class=\"number\">20</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;i的新值为：&quot;</span>, i)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:常量【在 Go 语言中，只允许布尔型、字符串、数字类型这些基础类型作为常量】</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------常量-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> name = <span class=\"string\">&quot;飞雪无情&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:常量生成器iota</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------常量生成器-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t\tone   = <span class=\"number\">1</span></span><br><span class=\"line\">\t\ttwo   = <span class=\"number\">2</span></span><br><span class=\"line\">\t\tthree = <span class=\"number\">3</span></span><br><span class=\"line\">\t\tfour  = <span class=\"number\">4</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;常量生成器：&quot;</span>, one, two, three, four)</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t\toneI = <span class=\"literal\">iota</span> + <span class=\"number\">1</span></span><br><span class=\"line\">\t\ttwoI</span><br><span class=\"line\">\t\tthreeI</span><br><span class=\"line\">\t\tfourI</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;常量生成器(递增)：&quot;</span>, oneI, twoI, threeI, fourI)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"变量的声明\"><a href=\"#变量的声明\" class=\"headerlink\" title=\"变量的声明\"></a>变量的声明</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 类型=表达式</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//var声明一个变量格式</span></span><br><span class=\"line\">\t<span class=\"comment\">// var 变量名 类型 = 表达式</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">\t<span class=\"comment\">//也可以不指定变量的类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"number\">20</span></span><br><span class=\"line\">\tfmt.Println(b)</span><br><span class=\"line\">\t<span class=\"comment\">//一次声明多个变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tc = <span class=\"number\">1</span></span><br><span class=\"line\">\t\td = <span class=\"number\">2</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(c)</span><br><span class=\"line\">\tfmt.Println(d)</span><br><span class=\"line\">\t<span class=\"comment\">//因为是同类型的变量，可以简写为</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tj = <span class=\"number\">0</span></span><br><span class=\"line\">\t\tk = <span class=\"number\">1</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(j)</span><br><span class=\"line\">\tfmt.Println(k)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:Go的基础类型学习</span></span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:整型，整型可分为：</span></span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:有符号整型：int、int8、int16、int32和int64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:浮点型</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------浮点型-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f32 <span class=\"keyword\">float32</span> = <span class=\"number\">2.2</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f64 <span class=\"keyword\">float64</span> = <span class=\"number\">10.3456</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;f32:&quot;</span>, f32, <span class=\"string\">&quot;f64:&quot;</span>, f64)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:布尔型</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------布尔型-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> bf <span class=\"keyword\">bool</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> bt <span class=\"keyword\">bool</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;bf:&quot;</span>, bf, <span class=\"string\">&quot;bt:&quot;</span>, bt)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:字符串</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------字符串-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s1 <span class=\"keyword\">string</span> = <span class=\"string\">&quot;世界&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s2 <span class=\"keyword\">string</span> = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;say:&quot;</span>, s1+s2)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:零值</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------零值-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z1 <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z2 <span class=\"keyword\">float64</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z3 <span class=\"keyword\">bool</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z4 <span class=\"keyword\">string</span></span><br><span class=\"line\">\tfmt.Println(z1, z2, z3, z4)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:变量</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------变量的简短声明-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//变量名:=b表达式（等于 var 变量名=表达式）</span></span><br><span class=\"line\">\ti := <span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"comment\">//bf1: = true</span></span><br><span class=\"line\">\t<span class=\"comment\">//s1 := &quot;Hello&quot;</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;简短声明：&quot;</span>, i)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:指针</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------指针-------&quot;</span>)</span><br><span class=\"line\">\tpi := &amp;i</span><br><span class=\"line\">\tfmt.Println(*pi)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:赋值</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------赋值-------&quot;</span>)</span><br><span class=\"line\">\ti = <span class=\"number\">20</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;i的新值为：&quot;</span>, i)</span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:常量【在 Go 语言中，只允许布尔型、字符串、数字类型这些基础类型作为常量】</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------常量-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> name = <span class=\"string\">&quot;飞雪无情&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span>:常量生成器iota</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;---------常量生成器-------&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t\tone   = <span class=\"number\">1</span></span><br><span class=\"line\">\t\ttwo   = <span class=\"number\">2</span></span><br><span class=\"line\">\t\tthree = <span class=\"number\">3</span></span><br><span class=\"line\">\t\tfour  = <span class=\"number\">4</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;常量生成器：&quot;</span>, one, two, three, four)</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t\toneI = <span class=\"literal\">iota</span> + <span class=\"number\">1</span></span><br><span class=\"line\">\t\ttwoI</span><br><span class=\"line\">\t\tthreeI</span><br><span class=\"line\">\t\tfourI</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;常量生成器(递增)：&quot;</span>, oneI, twoI, threeI, fourI)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"02 | 数据类型：你必须掌握的数据类型有哪些？【2】","abbrlink":3069556377,"date":"2021-04-23T16:00:00.000Z","_content":"\n#### 字符串和数字互转\n\nGo 语言是强类型语言，不同类型的变量是不能相互使用和计算。\n\n不同类型的变量在使用或者计算前，需要进行类型转换，\n\n##### 字符串转数字\n\n**函数：** strconv.Atoi\n\n**示例：**\n\n```go\ni2s:=strconv.Itoa(i)\n\ns2i,err:=strconv.Atoi(i2s)\n\nfmt.Println(i2s,s2i,err)\n\n```\n\n通过包 strconv 的 Itoa 函数可以把一个 int 类型转为 string，Atoi 函数则用来把 string 转为 int。\n\n同理对于浮点数、布尔型，Go 语言提供了 strconv.ParseFloat、strconv.ParseBool、strconv.FormatFloat 和 strconv.FormatBool 进行互转\n\n对于数字类型之间，可以通过强制转换的方式，如以下代码所示：\n\n```go\ni2f:=float64(i)\n\nf2i:=int(f64)\n\nfmt.Println(i2f,f2i)\n\n```\n\n#### Strings包\n\n##### 官方关于介绍 strings 包的说明：\n\nhttps://golang.google.cn/pkg/strings/\n\n##### Example\n\n```go\n//判断s1的前缀是否是H\n\nfmt.Println(strings.HasPrefix(s1,\"H\"))\n\n//在s1中查找字符串o\n\nfmt.Println(strings.Index(s1,\"o\"))\n\n//把s1全部转为大写\n\nfmt.Println(strings.ToUpper(s1))\n\n```\n\n","source":"_posts/Class/22-speaking-go-language/ch1-2-2.md","raw":"---\ntitle: 02 | 数据类型：你必须掌握的数据类型有哪些？【2】\ncategories:\n  - 课程笔记\n  - 22讲通关Go语言\n  - 第一部分：Go语言快速入门\nabbrlink: 3069556377\ndate: 2021-04-24 00:00:00\n---\n\n#### 字符串和数字互转\n\nGo 语言是强类型语言，不同类型的变量是不能相互使用和计算。\n\n不同类型的变量在使用或者计算前，需要进行类型转换，\n\n##### 字符串转数字\n\n**函数：** strconv.Atoi\n\n**示例：**\n\n```go\ni2s:=strconv.Itoa(i)\n\ns2i,err:=strconv.Atoi(i2s)\n\nfmt.Println(i2s,s2i,err)\n\n```\n\n通过包 strconv 的 Itoa 函数可以把一个 int 类型转为 string，Atoi 函数则用来把 string 转为 int。\n\n同理对于浮点数、布尔型，Go 语言提供了 strconv.ParseFloat、strconv.ParseBool、strconv.FormatFloat 和 strconv.FormatBool 进行互转\n\n对于数字类型之间，可以通过强制转换的方式，如以下代码所示：\n\n```go\ni2f:=float64(i)\n\nf2i:=int(f64)\n\nfmt.Println(i2f,f2i)\n\n```\n\n#### Strings包\n\n##### 官方关于介绍 strings 包的说明：\n\nhttps://golang.google.cn/pkg/strings/\n\n##### Example\n\n```go\n//判断s1的前缀是否是H\n\nfmt.Println(strings.HasPrefix(s1,\"H\"))\n\n//在s1中查找字符串o\n\nfmt.Println(strings.Index(s1,\"o\"))\n\n//把s1全部转为大写\n\nfmt.Println(strings.ToUpper(s1))\n\n```\n\n","slug":"Class/22-speaking-go-language/ch1-2-2","published":1,"updated":"2021-04-29T10:24:59.036Z","_id":"ckotdh5ut0012kw8zce7v6muq","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"字符串和数字互转\"><a href=\"#字符串和数字互转\" class=\"headerlink\" title=\"字符串和数字互转\"></a>字符串和数字互转</h4><p>Go 语言是强类型语言，不同类型的变量是不能相互使用和计算。</p>\n<p>不同类型的变量在使用或者计算前，需要进行类型转换，</p>\n<h5 id=\"字符串转数字\"><a href=\"#字符串转数字\" class=\"headerlink\" title=\"字符串转数字\"></a>字符串转数字</h5><p><strong>函数：</strong> strconv.Atoi</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i2s:=strconv.Itoa(i)</span><br><span class=\"line\"></span><br><span class=\"line\">s2i,err:=strconv.Atoi(i2s)</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(i2s,s2i,err)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过包 strconv 的 Itoa 函数可以把一个 int 类型转为 string，Atoi 函数则用来把 string 转为 int。</p>\n<p>同理对于浮点数、布尔型，Go 语言提供了 strconv.ParseFloat、strconv.ParseBool、strconv.FormatFloat 和 strconv.FormatBool 进行互转</p>\n<p>对于数字类型之间，可以通过强制转换的方式，如以下代码所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i2f:=<span class=\"keyword\">float64</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\">f2i:=<span class=\"keyword\">int</span>(f64)</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(i2f,f2i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Strings包\"><a href=\"#Strings包\" class=\"headerlink\" title=\"Strings包\"></a>Strings包</h4><h5 id=\"官方关于介绍-strings-包的说明：\"><a href=\"#官方关于介绍-strings-包的说明：\" class=\"headerlink\" title=\"官方关于介绍 strings 包的说明：\"></a>官方关于介绍 strings 包的说明：</h5><p><a href=\"https://golang.google.cn/pkg/strings/\">https://golang.google.cn/pkg/strings/</a></p>\n<h5 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断s1的前缀是否是H</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(strings.HasPrefix(s1,<span class=\"string\">&quot;H&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在s1中查找字符串o</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(strings.Index(s1,<span class=\"string\">&quot;o&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把s1全部转为大写</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(strings.ToUpper(s1))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"字符串和数字互转\"><a href=\"#字符串和数字互转\" class=\"headerlink\" title=\"字符串和数字互转\"></a>字符串和数字互转</h4><p>Go 语言是强类型语言，不同类型的变量是不能相互使用和计算。</p>\n<p>不同类型的变量在使用或者计算前，需要进行类型转换，</p>\n<h5 id=\"字符串转数字\"><a href=\"#字符串转数字\" class=\"headerlink\" title=\"字符串转数字\"></a>字符串转数字</h5><p><strong>函数：</strong> strconv.Atoi</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i2s:=strconv.Itoa(i)</span><br><span class=\"line\"></span><br><span class=\"line\">s2i,err:=strconv.Atoi(i2s)</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(i2s,s2i,err)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过包 strconv 的 Itoa 函数可以把一个 int 类型转为 string，Atoi 函数则用来把 string 转为 int。</p>\n<p>同理对于浮点数、布尔型，Go 语言提供了 strconv.ParseFloat、strconv.ParseBool、strconv.FormatFloat 和 strconv.FormatBool 进行互转</p>\n<p>对于数字类型之间，可以通过强制转换的方式，如以下代码所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i2f:=<span class=\"keyword\">float64</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\">f2i:=<span class=\"keyword\">int</span>(f64)</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(i2f,f2i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Strings包\"><a href=\"#Strings包\" class=\"headerlink\" title=\"Strings包\"></a>Strings包</h4><h5 id=\"官方关于介绍-strings-包的说明：\"><a href=\"#官方关于介绍-strings-包的说明：\" class=\"headerlink\" title=\"官方关于介绍 strings 包的说明：\"></a>官方关于介绍 strings 包的说明：</h5><p><a href=\"https://golang.google.cn/pkg/strings/\">https://golang.google.cn/pkg/strings/</a></p>\n<h5 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断s1的前缀是否是H</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(strings.HasPrefix(s1,<span class=\"string\">&quot;H&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在s1中查找字符串o</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(strings.Index(s1,<span class=\"string\">&quot;o&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把s1全部转为大写</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(strings.ToUpper(s1))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"02 | 数据类型：你必须掌握的数据类型有哪些？【3】","abbrlink":239718908,"date":"2021-04-23T16:00:00.000Z","_content":"\n#### 一个字符串中查找某个字符串是否存在\n\n```\ni:=strings.Index(\"飞雪无情\",\"飞雪\")\n```\n\n","source":"_posts/Class/22-speaking-go-language/ch1-2-3.md","raw":"---\ntitle: 02 | 数据类型：你必须掌握的数据类型有哪些？【3】\ncategories:\n  - 课程笔记\n  - 22讲通关Go语言\n  - 第一部分：Go语言快速入门\nabbrlink: 239718908\ndate: 2021-04-24 00:00:00\n---\n\n#### 一个字符串中查找某个字符串是否存在\n\n```\ni:=strings.Index(\"飞雪无情\",\"飞雪\")\n```\n\n","slug":"Class/22-speaking-go-language/ch1-2-3","published":1,"updated":"2021-04-29T10:24:59.041Z","_id":"ckotdh5uv0015kw8z4couhmln","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一个字符串中查找某个字符串是否存在\"><a href=\"#一个字符串中查找某个字符串是否存在\" class=\"headerlink\" title=\"一个字符串中查找某个字符串是否存在\"></a>一个字符串中查找某个字符串是否存在</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i:&#x3D;strings.Index(&quot;飞雪无情&quot;,&quot;飞雪&quot;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一个字符串中查找某个字符串是否存在\"><a href=\"#一个字符串中查找某个字符串是否存在\" class=\"headerlink\" title=\"一个字符串中查找某个字符串是否存在\"></a>一个字符串中查找某个字符串是否存在</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i:&#x3D;strings.Index(&quot;飞雪无情&quot;,&quot;飞雪&quot;)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"03 | 控制结构：if、for、switch 逻辑语句的那些事儿【1】","abbrlink":1632346433,"date":"2021-04-24T16:00:00.000Z","_content":"\n#### If 条件语句\n\n```go\n//if条件语句1\n\ti := 6\n\tif i > 10 {\n\t\tfmt.Println(\"i>10\")\n\t} else {\n\t\tfmt.Println(\"i<=10\")\n\t}\n```\n\n```go\n//if条件语句2\n\tc := 6\n\tif c > 10 {\n\t\tfmt.Println(\"c>10\")\n\t} else if c > 5 && c < 10 {\n\t\tfmt.Println(\"5<c<=10\")\n\t} else {\n\t\tfmt.Println(\"c<=5\")\n\t}\n```\n\n关于 if 条件语句的使用有一些规则：\n\n- if 后面的条件表达式不需要使用 ()，这和有些编程语言不一样，也更体现 Go 语言的简洁\n- 每个条件分支（if 或者 else）中的大括号是必须的，哪怕大括号里只有一行代码（如示例）\n- if 紧跟的大括号 { 不能独占一行，else 前的大括号 } 也不能独占一行，否则会编译不通过\n- 在 if……else 条件语句中还可以增加多个 else if，增加更多的条件分支\n\n```go\nfunc main() {\n    if i:=6; i >10 {\n        fmt.Println(\"i>10\")\n    } else if  i>5 && i<=10 {\n        fmt.Println(\"5<i<=10\")\n    } else {\n        fmt.Println(\"i<=5\")\n    }\n}\n\n```\n\n","source":"_posts/Class/22-speaking-go-language/ch1-3-1.md","raw":"---\ntitle: 03 | 控制结构：if、for、switch 逻辑语句的那些事儿【1】\ncategories:\n  - 课程笔记\n  - 22讲通关Go语言\n  - 第一部分：Go语言快速入门\nabbrlink: 1632346433\ndate: 2021-04-25 00:00:00\n---\n\n#### If 条件语句\n\n```go\n//if条件语句1\n\ti := 6\n\tif i > 10 {\n\t\tfmt.Println(\"i>10\")\n\t} else {\n\t\tfmt.Println(\"i<=10\")\n\t}\n```\n\n```go\n//if条件语句2\n\tc := 6\n\tif c > 10 {\n\t\tfmt.Println(\"c>10\")\n\t} else if c > 5 && c < 10 {\n\t\tfmt.Println(\"5<c<=10\")\n\t} else {\n\t\tfmt.Println(\"c<=5\")\n\t}\n```\n\n关于 if 条件语句的使用有一些规则：\n\n- if 后面的条件表达式不需要使用 ()，这和有些编程语言不一样，也更体现 Go 语言的简洁\n- 每个条件分支（if 或者 else）中的大括号是必须的，哪怕大括号里只有一行代码（如示例）\n- if 紧跟的大括号 { 不能独占一行，else 前的大括号 } 也不能独占一行，否则会编译不通过\n- 在 if……else 条件语句中还可以增加多个 else if，增加更多的条件分支\n\n```go\nfunc main() {\n    if i:=6; i >10 {\n        fmt.Println(\"i>10\")\n    } else if  i>5 && i<=10 {\n        fmt.Println(\"5<i<=10\")\n    } else {\n        fmt.Println(\"i<=5\")\n    }\n}\n\n```\n\n","slug":"Class/22-speaking-go-language/ch1-3-1","published":1,"updated":"2021-04-29T10:24:59.045Z","_id":"ckotdh5ux0019kw8z7kqf3vip","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"If-条件语句\"><a href=\"#If-条件语句\" class=\"headerlink\" title=\"If 条件语句\"></a>If 条件语句</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if条件语句1</span></span><br><span class=\"line\">\ti := <span class=\"number\">6</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> i &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;i&gt;10&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;i&lt;=10&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if条件语句2</span></span><br><span class=\"line\">\tc := <span class=\"number\">6</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;c&gt;10&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> c &gt; <span class=\"number\">5</span> &amp;&amp; c &lt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;5&lt;c&lt;=10&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;c&lt;=5&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于 if 条件语句的使用有一些规则：</p>\n<ul>\n<li>if 后面的条件表达式不需要使用 ()，这和有些编程语言不一样，也更体现 Go 语言的简洁</li>\n<li>每个条件分支（if 或者 else）中的大括号是必须的，哪怕大括号里只有一行代码（如示例）</li>\n<li>if 紧跟的大括号 { 不能独占一行，else 前的大括号 } 也不能独占一行，否则会编译不通过</li>\n<li>在 if……else 条件语句中还可以增加多个 else if，增加更多的条件分支</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i:=<span class=\"number\">6</span>; i &gt;<span class=\"number\">10</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;i&gt;10&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>  i&gt;<span class=\"number\">5</span> &amp;&amp; i&lt;=<span class=\"number\">10</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;5&lt;i&lt;=10&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;i&lt;=5&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"If-条件语句\"><a href=\"#If-条件语句\" class=\"headerlink\" title=\"If 条件语句\"></a>If 条件语句</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if条件语句1</span></span><br><span class=\"line\">\ti := <span class=\"number\">6</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> i &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;i&gt;10&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;i&lt;=10&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if条件语句2</span></span><br><span class=\"line\">\tc := <span class=\"number\">6</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;c&gt;10&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> c &gt; <span class=\"number\">5</span> &amp;&amp; c &lt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;5&lt;c&lt;=10&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;c&lt;=5&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于 if 条件语句的使用有一些规则：</p>\n<ul>\n<li>if 后面的条件表达式不需要使用 ()，这和有些编程语言不一样，也更体现 Go 语言的简洁</li>\n<li>每个条件分支（if 或者 else）中的大括号是必须的，哪怕大括号里只有一行代码（如示例）</li>\n<li>if 紧跟的大括号 { 不能独占一行，else 前的大括号 } 也不能独占一行，否则会编译不通过</li>\n<li>在 if……else 条件语句中还可以增加多个 else if，增加更多的条件分支</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i:=<span class=\"number\">6</span>; i &gt;<span class=\"number\">10</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;i&gt;10&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>  i&gt;<span class=\"number\">5</span> &amp;&amp; i&lt;=<span class=\"number\">10</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;5&lt;i&lt;=10&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;i&lt;=5&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"03 | 控制结构：if、for、switch 逻辑语句的那些事儿【2】","abbrlink":1946029743,"date":"2021-04-24T16:00:00.000Z","_content":"\n#### switch 选择语句\n\n```go\nswitch i:=6;{\ncase i>10:\n    fmt.(\"i>10\")\ncase i>5 && i<=10:\n    fmt.Println(\"5<i<=10\")\ndefault:\n    fmt.Println(\"i<=5\")\n}\n```\n\nswitch 语句同样也可以用一个简单的语句来做初始化，同样也是用分号 ; 分隔。每一个 case 就是一个分支，分支条件为 true 该分支才会执行，而且 case 分支后的条件表达式也不用小括号 () 包裹。\n\n##### 增加 fallthrough 关键字\n\n```go\nswitch j:=1;j {\ncase 1:\n    fallthrough\ncase 2:\n    fmt.Println(\"1\")\ndefault:\n    fmt.Println(\"没有匹配\")\n}\n```\n\n以上示例运行会输出 1，如果省略 case 1: 后面的 fallthrough，则不会有任何输出。\n\n##### switch增加表达式操作\n\n```go\nswitch 2>1 {\ncase true:\n    fmt.Println(\"2>1\")\ncase false:\n    fmt.Println(\"2<=1\")\n}\n```\n\n","source":"_posts/Class/22-speaking-go-language/ch1-3-2.md","raw":"---\ntitle: 03 | 控制结构：if、for、switch 逻辑语句的那些事儿【2】\ncategories:\n  - 课程笔记\n  - 22讲通关Go语言\n  - 第一部分：Go语言快速入门\nabbrlink: 1946029743\ndate: 2021-04-25 00:00:00\n---\n\n#### switch 选择语句\n\n```go\nswitch i:=6;{\ncase i>10:\n    fmt.(\"i>10\")\ncase i>5 && i<=10:\n    fmt.Println(\"5<i<=10\")\ndefault:\n    fmt.Println(\"i<=5\")\n}\n```\n\nswitch 语句同样也可以用一个简单的语句来做初始化，同样也是用分号 ; 分隔。每一个 case 就是一个分支，分支条件为 true 该分支才会执行，而且 case 分支后的条件表达式也不用小括号 () 包裹。\n\n##### 增加 fallthrough 关键字\n\n```go\nswitch j:=1;j {\ncase 1:\n    fallthrough\ncase 2:\n    fmt.Println(\"1\")\ndefault:\n    fmt.Println(\"没有匹配\")\n}\n```\n\n以上示例运行会输出 1，如果省略 case 1: 后面的 fallthrough，则不会有任何输出。\n\n##### switch增加表达式操作\n\n```go\nswitch 2>1 {\ncase true:\n    fmt.Println(\"2>1\")\ncase false:\n    fmt.Println(\"2<=1\")\n}\n```\n\n","slug":"Class/22-speaking-go-language/ch1-3-2","published":1,"updated":"2021-04-29T10:24:59.049Z","_id":"ckotdh5uz001ckw8z43crc623","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"switch-选择语句\"><a href=\"#switch-选择语句\" class=\"headerlink\" title=\"switch 选择语句\"></a>switch 选择语句</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> i:=<span class=\"number\">6</span>;&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> i&gt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    fmt.(<span class=\"string\">&quot;i&gt;10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> i&gt;<span class=\"number\">5</span> &amp;&amp; i&lt;=<span class=\"number\">10</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;5&lt;i&lt;=10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;i&lt;=5&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>switch 语句同样也可以用一个简单的语句来做初始化，同样也是用分号 ; 分隔。每一个 case 就是一个分支，分支条件为 true 该分支才会执行，而且 case 分支后的条件表达式也不用小括号 () 包裹。</p>\n<h5 id=\"增加-fallthrough-关键字\"><a href=\"#增加-fallthrough-关键字\" class=\"headerlink\" title=\"增加 fallthrough 关键字\"></a>增加 fallthrough 关键字</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> j:=<span class=\"number\">1</span>;j &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;没有匹配&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上示例运行会输出 1，如果省略 case 1: 后面的 fallthrough，则不会有任何输出。</p>\n<h5 id=\"switch增加表达式操作\"><a href=\"#switch增加表达式操作\" class=\"headerlink\" title=\"switch增加表达式操作\"></a>switch增加表达式操作</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> <span class=\"number\">2</span>&gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"literal\">true</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;2&gt;1&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"literal\">false</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;2&lt;=1&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"switch-选择语句\"><a href=\"#switch-选择语句\" class=\"headerlink\" title=\"switch 选择语句\"></a>switch 选择语句</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> i:=<span class=\"number\">6</span>;&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> i&gt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    fmt.(<span class=\"string\">&quot;i&gt;10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> i&gt;<span class=\"number\">5</span> &amp;&amp; i&lt;=<span class=\"number\">10</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;5&lt;i&lt;=10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;i&lt;=5&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>switch 语句同样也可以用一个简单的语句来做初始化，同样也是用分号 ; 分隔。每一个 case 就是一个分支，分支条件为 true 该分支才会执行，而且 case 分支后的条件表达式也不用小括号 () 包裹。</p>\n<h5 id=\"增加-fallthrough-关键字\"><a href=\"#增加-fallthrough-关键字\" class=\"headerlink\" title=\"增加 fallthrough 关键字\"></a>增加 fallthrough 关键字</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> j:=<span class=\"number\">1</span>;j &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;没有匹配&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上示例运行会输出 1，如果省略 case 1: 后面的 fallthrough，则不会有任何输出。</p>\n<h5 id=\"switch增加表达式操作\"><a href=\"#switch增加表达式操作\" class=\"headerlink\" title=\"switch增加表达式操作\"></a>switch增加表达式操作</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> <span class=\"number\">2</span>&gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"literal\">true</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;2&gt;1&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"literal\">false</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;2&lt;=1&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"03 | 控制结构：if、for、switch 逻辑语句的那些事儿【3】","abbrlink":3410127306,"date":"2021-04-24T16:00:00.000Z","_content":"\n#### for 循环语句\n\n```go\nsum:=0\nfor i:=1;i<=100;i++ {\n    sum+=i\n}\nfmt.Println(\"the sum is\",sum)\n```\n\n##### 简写 for 循环（等同于while）\n\n```go\nsum:=0\ni:=1\nfor i<=100 {\n    sum+=i\n    i++\n}\nfmt.Println(\"the sum is\",sum)\n```\n\n##### for 循环里边使用 break\n\n```go\nsum:=0\ni:=1\nfor {\n    sum+=i\n    i++\n    if i>100 {\n        break\n    }\n}\nfmt.Println(\"the sum is\",sum)\n```\n\n这个示例使用的是没有任何条件的 for 循环，也称为 for 无限循环。此外，使用 break 退出无限循环，条件是 i>100。\n\n##### for 循环里边使用 continue\n\n```go\nsum := 0\nfor i:=1; i<100; i++{\n   if i%2!=0 {\n      continue\n   }\n   sum+=i\n}\nfmt.Println(\"the sum is\",sum)\n\n```\n\n这个示例的关键在于：如果 i 不是偶数，就会用 continue 跳出本次循环，继续下个循环；如果是偶数，则继续执行 sum+=i，然后继续循环，这样就达到了只计算 100 以内偶数之和的目的。","source":"_posts/Class/22-speaking-go-language/ch1-3-3.md","raw":"---\ntitle: 03 | 控制结构：if、for、switch 逻辑语句的那些事儿【3】\ncategories:\n  - 课程笔记\n  - 22讲通关Go语言\n  - 第一部分：Go语言快速入门\nabbrlink: 3410127306\ndate: 2021-04-25 00:00:00\n---\n\n#### for 循环语句\n\n```go\nsum:=0\nfor i:=1;i<=100;i++ {\n    sum+=i\n}\nfmt.Println(\"the sum is\",sum)\n```\n\n##### 简写 for 循环（等同于while）\n\n```go\nsum:=0\ni:=1\nfor i<=100 {\n    sum+=i\n    i++\n}\nfmt.Println(\"the sum is\",sum)\n```\n\n##### for 循环里边使用 break\n\n```go\nsum:=0\ni:=1\nfor {\n    sum+=i\n    i++\n    if i>100 {\n        break\n    }\n}\nfmt.Println(\"the sum is\",sum)\n```\n\n这个示例使用的是没有任何条件的 for 循环，也称为 for 无限循环。此外，使用 break 退出无限循环，条件是 i>100。\n\n##### for 循环里边使用 continue\n\n```go\nsum := 0\nfor i:=1; i<100; i++{\n   if i%2!=0 {\n      continue\n   }\n   sum+=i\n}\nfmt.Println(\"the sum is\",sum)\n\n```\n\n这个示例的关键在于：如果 i 不是偶数，就会用 continue 跳出本次循环，继续下个循环；如果是偶数，则继续执行 sum+=i，然后继续循环，这样就达到了只计算 100 以内偶数之和的目的。","slug":"Class/22-speaking-go-language/ch1-3-3","published":1,"updated":"2021-04-29T10:24:59.054Z","_id":"ckotdh5v1001fkw8zc1h8epd5","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"for-循环语句\"><a href=\"#for-循环语句\" class=\"headerlink\" title=\"for 循环语句\"></a>for 循环语句</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum:=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++ &#123;</span><br><span class=\"line\">    sum+=i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;the sum is&quot;</span>,sum)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"简写-for-循环（等同于while）\"><a href=\"#简写-for-循环（等同于while）\" class=\"headerlink\" title=\"简写 for 循环（等同于while）\"></a>简写 for 循环（等同于while）</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum:=<span class=\"number\">0</span></span><br><span class=\"line\">i:=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i&lt;=<span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    sum+=i</span><br><span class=\"line\">    i++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;the sum is&quot;</span>,sum)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for-循环里边使用-break\"><a href=\"#for-循环里边使用-break\" class=\"headerlink\" title=\"for 循环里边使用 break\"></a>for 循环里边使用 break</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum:=<span class=\"number\">0</span></span><br><span class=\"line\">i:=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    sum+=i</span><br><span class=\"line\">    i++</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i&gt;<span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;the sum is&quot;</span>,sum)</span><br></pre></td></tr></table></figure>\n\n<p>这个示例使用的是没有任何条件的 for 循环，也称为 for 无限循环。此外，使用 break 退出无限循环，条件是 i&gt;100。</p>\n<h5 id=\"for-循环里边使用-continue\"><a href=\"#for-循环里边使用-continue\" class=\"headerlink\" title=\"for 循环里边使用 continue\"></a>for 循环里边使用 continue</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum := <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">1</span>; i&lt;<span class=\"number\">100</span>; i++&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> i%<span class=\"number\">2</span>!=<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   sum+=i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;the sum is&quot;</span>,sum)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个示例的关键在于：如果 i 不是偶数，就会用 continue 跳出本次循环，继续下个循环；如果是偶数，则继续执行 sum+=i，然后继续循环，这样就达到了只计算 100 以内偶数之和的目的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"for-循环语句\"><a href=\"#for-循环语句\" class=\"headerlink\" title=\"for 循环语句\"></a>for 循环语句</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum:=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++ &#123;</span><br><span class=\"line\">    sum+=i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;the sum is&quot;</span>,sum)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"简写-for-循环（等同于while）\"><a href=\"#简写-for-循环（等同于while）\" class=\"headerlink\" title=\"简写 for 循环（等同于while）\"></a>简写 for 循环（等同于while）</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum:=<span class=\"number\">0</span></span><br><span class=\"line\">i:=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i&lt;=<span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    sum+=i</span><br><span class=\"line\">    i++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;the sum is&quot;</span>,sum)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for-循环里边使用-break\"><a href=\"#for-循环里边使用-break\" class=\"headerlink\" title=\"for 循环里边使用 break\"></a>for 循环里边使用 break</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum:=<span class=\"number\">0</span></span><br><span class=\"line\">i:=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    sum+=i</span><br><span class=\"line\">    i++</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i&gt;<span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;the sum is&quot;</span>,sum)</span><br></pre></td></tr></table></figure>\n\n<p>这个示例使用的是没有任何条件的 for 循环，也称为 for 无限循环。此外，使用 break 退出无限循环，条件是 i&gt;100。</p>\n<h5 id=\"for-循环里边使用-continue\"><a href=\"#for-循环里边使用-continue\" class=\"headerlink\" title=\"for 循环里边使用 continue\"></a>for 循环里边使用 continue</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum := <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">1</span>; i&lt;<span class=\"number\">100</span>; i++&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> i%<span class=\"number\">2</span>!=<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   sum+=i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;the sum is&quot;</span>,sum)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个示例的关键在于：如果 i 不是偶数，就会用 continue 跳出本次循环，继续下个循环；如果是偶数，则继续执行 sum+=i，然后继续循环，这样就达到了只计算 100 以内偶数之和的目的。</p>\n"},{"title":"04 | 集合类型：如何正确使用 array、slice 和 map？","abbrlink":1956865009,"date":"2021-04-24T16:00:00.000Z","_content":"\n#### Array（数组）\n\n数组存放的是固定长度、相同类型的数据，而且这些存放的元素是连续的。所存放的数据类型没有限制，可以是整型、字符串甚至自定义。","source":"_posts/Class/22-speaking-go-language/ch1-4.md","raw":"---\ntitle: 04 | 集合类型：如何正确使用 array、slice 和 map？\ncategories:\n  - 课程笔记\n  - 22讲通关Go语言\n  - 第一部分：Go语言快速入门\nabbrlink: 1956865009\ndate: 2021-04-25 00:00:00\n---\n\n#### Array（数组）\n\n数组存放的是固定长度、相同类型的数据，而且这些存放的元素是连续的。所存放的数据类型没有限制，可以是整型、字符串甚至自定义。","slug":"Class/22-speaking-go-language/ch1-4","published":1,"updated":"2021-04-29T10:24:59.057Z","_id":"ckotdh5v3001gkw8z52sbbfpy","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Array（数组）\"><a href=\"#Array（数组）\" class=\"headerlink\" title=\"Array（数组）\"></a>Array（数组）</h4><p>数组存放的是固定长度、相同类型的数据，而且这些存放的元素是连续的。所存放的数据类型没有限制，可以是整型、字符串甚至自定义。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Array（数组）\"><a href=\"#Array（数组）\" class=\"headerlink\" title=\"Array（数组）\"></a>Array（数组）</h4><p>数组存放的是固定长度、相同类型的数据，而且这些存放的元素是连续的。所存放的数据类型没有限制，可以是整型、字符串甚至自定义。</p>\n"},{"title":"PHP-FPM是什么","abbrlink":1171510126,"_content":"\n**PHP-FPM** 即 PHP FastCGI的进程管理器。\n\n**CGI** 的意思是 ==通用网关接口== ，是 Web 服务器调用外部程序时使用的一种服务端应用的规范。\n\n**CGI** 针对每个 HTTP 请求都会 fork 一个新的进程来进行处理（解析配置文件、初始化执行环境、处理请求），然后把这个进程处理完的结果通过 Web 服务转发给用户，刚刚 fork 的新进程也随之退出，如果下次用户再请求动态资源，Web 服务器又再次 fork 一个新的进程，如此周而复始循环往复。\n\n\n\n**FastCGI** 是 CGI 的升级版本，为提升 CGI 的性能而生。FastCGI 会先 fork 一个新的 master 进程，解析配置文件，初始化执行环境，然后再 fork 多个 worker 进程（类似于 nginx），当 HTTP 请求过来时，master 会将请求传递给一个 worker 进程，然后再接收下一个请求，这样的话只需要解析一次配置文件，初始化一次执行环境，每次请求不会阻塞，导不会致请求停滞。这样大大提高了请求效率，可以处理高并发环境下的业务场景。Master 还会更根据配置预先启动几个 Worker 进程进行等待，当Worker 进程过多，Master 也会根据配置文件设置销毁掉多余的 Worker，这样提高了性能，也节约了系统资源。\n\n\n\n**PHP-FPM** 负责管理一个进程池来处理来自 Web 服务器的 HTTP 动态请求，在PHP-FPM 中，Master 进程负责与 Web 服务器进行通信，接收 HTTP 请求，再将请求转发给 worker 进程处理。Worker 进程主要负责动态执行 PHP 代码，处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端，这就是 PHP-FPM 的工作原理。\n\n\n\n资料：\n\nhttps://www.php.net/manual/zh/install.fpm.php\n\nhttps://www.jianshu.com/p/6b8511e0bd88\n\nhttps://zhuanlan.zhihu.com/p/110540192","source":"_posts/CodeLanguage/PHP/PHP-FPM是什么.md","raw":"---\ntitle: PHP-FPM是什么\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 1171510126\n---\n\n**PHP-FPM** 即 PHP FastCGI的进程管理器。\n\n**CGI** 的意思是 ==通用网关接口== ，是 Web 服务器调用外部程序时使用的一种服务端应用的规范。\n\n**CGI** 针对每个 HTTP 请求都会 fork 一个新的进程来进行处理（解析配置文件、初始化执行环境、处理请求），然后把这个进程处理完的结果通过 Web 服务转发给用户，刚刚 fork 的新进程也随之退出，如果下次用户再请求动态资源，Web 服务器又再次 fork 一个新的进程，如此周而复始循环往复。\n\n\n\n**FastCGI** 是 CGI 的升级版本，为提升 CGI 的性能而生。FastCGI 会先 fork 一个新的 master 进程，解析配置文件，初始化执行环境，然后再 fork 多个 worker 进程（类似于 nginx），当 HTTP 请求过来时，master 会将请求传递给一个 worker 进程，然后再接收下一个请求，这样的话只需要解析一次配置文件，初始化一次执行环境，每次请求不会阻塞，导不会致请求停滞。这样大大提高了请求效率，可以处理高并发环境下的业务场景。Master 还会更根据配置预先启动几个 Worker 进程进行等待，当Worker 进程过多，Master 也会根据配置文件设置销毁掉多余的 Worker，这样提高了性能，也节约了系统资源。\n\n\n\n**PHP-FPM** 负责管理一个进程池来处理来自 Web 服务器的 HTTP 动态请求，在PHP-FPM 中，Master 进程负责与 Web 服务器进行通信，接收 HTTP 请求，再将请求转发给 worker 进程处理。Worker 进程主要负责动态执行 PHP 代码，处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端，这就是 PHP-FPM 的工作原理。\n\n\n\n资料：\n\nhttps://www.php.net/manual/zh/install.fpm.php\n\nhttps://www.jianshu.com/p/6b8511e0bd88\n\nhttps://zhuanlan.zhihu.com/p/110540192","slug":"CodeLanguage/PHP/PHP-FPM是什么","published":1,"date":"2021-04-16T13:50:20.253Z","updated":"2021-04-29T10:24:59.091Z","_id":"ckotdh5v5001jkw8z71ofebv8","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>PHP-FPM</strong> 即 PHP FastCGI的进程管理器。</p>\n<p><strong>CGI</strong> 的意思是 ==通用网关接口== ，是 Web 服务器调用外部程序时使用的一种服务端应用的规范。</p>\n<p><strong>CGI</strong> 针对每个 HTTP 请求都会 fork 一个新的进程来进行处理（解析配置文件、初始化执行环境、处理请求），然后把这个进程处理完的结果通过 Web 服务转发给用户，刚刚 fork 的新进程也随之退出，如果下次用户再请求动态资源，Web 服务器又再次 fork 一个新的进程，如此周而复始循环往复。</p>\n<p><strong>FastCGI</strong> 是 CGI 的升级版本，为提升 CGI 的性能而生。FastCGI 会先 fork 一个新的 master 进程，解析配置文件，初始化执行环境，然后再 fork 多个 worker 进程（类似于 nginx），当 HTTP 请求过来时，master 会将请求传递给一个 worker 进程，然后再接收下一个请求，这样的话只需要解析一次配置文件，初始化一次执行环境，每次请求不会阻塞，导不会致请求停滞。这样大大提高了请求效率，可以处理高并发环境下的业务场景。Master 还会更根据配置预先启动几个 Worker 进程进行等待，当Worker 进程过多，Master 也会根据配置文件设置销毁掉多余的 Worker，这样提高了性能，也节约了系统资源。</p>\n<p><strong>PHP-FPM</strong> 负责管理一个进程池来处理来自 Web 服务器的 HTTP 动态请求，在PHP-FPM 中，Master 进程负责与 Web 服务器进行通信，接收 HTTP 请求，再将请求转发给 worker 进程处理。Worker 进程主要负责动态执行 PHP 代码，处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端，这就是 PHP-FPM 的工作原理。</p>\n<p>资料：</p>\n<p><a href=\"https://www.php.net/manual/zh/install.fpm.php\">https://www.php.net/manual/zh/install.fpm.php</a></p>\n<p><a href=\"https://www.jianshu.com/p/6b8511e0bd88\">https://www.jianshu.com/p/6b8511e0bd88</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/110540192\">https://zhuanlan.zhihu.com/p/110540192</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>PHP-FPM</strong> 即 PHP FastCGI的进程管理器。</p>\n<p><strong>CGI</strong> 的意思是 ==通用网关接口== ，是 Web 服务器调用外部程序时使用的一种服务端应用的规范。</p>\n<p><strong>CGI</strong> 针对每个 HTTP 请求都会 fork 一个新的进程来进行处理（解析配置文件、初始化执行环境、处理请求），然后把这个进程处理完的结果通过 Web 服务转发给用户，刚刚 fork 的新进程也随之退出，如果下次用户再请求动态资源，Web 服务器又再次 fork 一个新的进程，如此周而复始循环往复。</p>\n<p><strong>FastCGI</strong> 是 CGI 的升级版本，为提升 CGI 的性能而生。FastCGI 会先 fork 一个新的 master 进程，解析配置文件，初始化执行环境，然后再 fork 多个 worker 进程（类似于 nginx），当 HTTP 请求过来时，master 会将请求传递给一个 worker 进程，然后再接收下一个请求，这样的话只需要解析一次配置文件，初始化一次执行环境，每次请求不会阻塞，导不会致请求停滞。这样大大提高了请求效率，可以处理高并发环境下的业务场景。Master 还会更根据配置预先启动几个 Worker 进程进行等待，当Worker 进程过多，Master 也会根据配置文件设置销毁掉多余的 Worker，这样提高了性能，也节约了系统资源。</p>\n<p><strong>PHP-FPM</strong> 负责管理一个进程池来处理来自 Web 服务器的 HTTP 动态请求，在PHP-FPM 中，Master 进程负责与 Web 服务器进行通信，接收 HTTP 请求，再将请求转发给 worker 进程处理。Worker 进程主要负责动态执行 PHP 代码，处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端，这就是 PHP-FPM 的工作原理。</p>\n<p>资料：</p>\n<p><a href=\"https://www.php.net/manual/zh/install.fpm.php\">https://www.php.net/manual/zh/install.fpm.php</a></p>\n<p><a href=\"https://www.jianshu.com/p/6b8511e0bd88\">https://www.jianshu.com/p/6b8511e0bd88</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/110540192\">https://zhuanlan.zhihu.com/p/110540192</a></p>\n"},{"title":"PHP 中self、static、$this的区别&后期静态绑定详解","abbrlink":2140386669,"_content":"\n为了更好地理解 self、static 和 $this 的区别，先来看一个示例：\n\n```php\n<?php\nclass A {\n\n    protected $name = 'A';\n    static $alias = 'a';\n    const HASH = 'md5';\n\n    public function dd() {\n        echo $this->name; echo '--';\n        echo static::$alias; echo '--';     // 后期静态绑定\n        echo static::HASH; echo '--';     // 后期静态绑定\n        echo self::$alias; echo '--';\n        echo self::HASH; echo '--';\n\n        var_dump(new self); echo '--';\n        var_dump($this); echo '--';\n        var_dump(new static); echo '<br>';   // 后期静态绑定\n    }\n\n    public static function who() {\n        echo __CLASS__;\n        echo ' [ This is A ]'; echo '<br>';\n    }\n\n    public static function test() {\n        self::who();\n    }\n\n    public static function test2() {\n        static::who();  // 后期静态绑定\n    }\n\n    public static function getInstance() {\n        var_dump(new self); echo '--';\n        var_dump(new static); echo '<br>';  // 后期静态绑定\n    }\n}\n\nclass B extends A {\n    protected $name = 'B';\n    static $alias = 'b';\n    const HASH = 'sha1';\n\n    public static function who() {\n        echo __CLASS__;\n        echo ' [ This is B ]'; echo '<br>';\n    }\n}\n\nclass C extends B {\n    public static function who() {\n        echo __CLASS__;\n        echo ' [ This is C]'; echo '<br>';\n    }\n}\n\n\n(new A)->dd();  // A--a--md5--a--md5--object(A)#2 (1) { [\"name\":protected]=> string(1) \"A\" } --object(A)#1 (1) { [\"name\":protected]=> string(1) \"A\" } --object(A)#2 (1) { [\"name\":protected]=> string(1) \"A\" }\n(new B)->dd();  // B--b--sha1--a--md5--object(A)#2 (1) { [\"name\":protected]=> string(1) \"A\" } --object(B)#1 (1) { [\"name\":protected]=> string(1) \"B\" } --object(B)#2 (1) { [\"name\":protected]=> string(1) \"B\" }\n\nA::who();  // A [ This is A ]\nB::who();  // B [ This is B ]\n\nA::test();  // A [ This is A ]\nB::test();  // A [ This is A ]\n\nA::test2(); // A [ This is A ]\nB::test2(); // B [ This is B ]\nC::test2(); // C [ This is C]\n\nA::getInstance();   //object(A)#1 (1) { [\"name\":protected]=> string(1) \"A\" } --object(A)#1 (1) { [\"name\":protected]=> string(1) \"A\" }\nB::getInstance();   //object(A)#1 (1) { [\"name\":protected]=> string(1) \"A\" } --object(B)#1 (1) { [\"name\":protected]=> string(1) \"B\" }\n```\n\n**总结说明**\n\n- self 和 __CLASS__，都是对当前类的静态引用，取决于定义当前方法所在的类。也就是说，self 写在哪个类里面， 它引用的就是谁。\n- $this 指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，$this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中。\n- static 关键字除了可以声明类的静态成员（属性和方法）外，还有一个非常重要的作用就是后期静态绑定。\n\n- self 可以用于访问类的静态属性、静态方法和常量，但 self 指向的是当前定义所在的类，这是 self 的限制。\n\n- $this 指向的对象所属的类和 static 指向的类相同。\n\n- static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性。\n\n- 静态调用时，static 指向的是实际调用时的类；非静态调用时，static 指向的是实际调用时的对象所属的类。\n\n## **后期静态绑定**\n\n后期静态绑定（也叫延迟静态绑定），可用于在继承范围内引用静态调用的类，也就是代码运行时最初调用的类。\n\n后期静态绑定本想通过引入一个新的关键字来表示，但最终还是沿用了 static 关键字。\n\n### 工作原理\n\n确切地说，static 后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。\n\n当进行静态方法调用时，该类名（static指向的类名）为明确指定的那个（通常是 :: 运算符的左侧部分），即实际调用时的类。\n\n如上述示例中的：\n\n```\nA::test2(); \nB::test2();\n```\n\n**static 和 self 的区别：**\n\nself 可以用于访问类的静态属性、静态方法和常量，但 self 指向的是当前定义所在的类，这是 self 的限制。\n\nstatic 也可以用于访问类的静态属性、静态方法和常量，static 指向的是实际调用时的类。\n\n当进行非静态方法调用时，该类名（static指向的类名）为该对象所属的类，即实际调用时的对象所属的类。\n\n如上述示例中的：\n\n```php\n(new A)->dd(); \n(new B)->dd();\n```\n\nstatic 和 $this 有点类似，但又有区别：\n\n- $this 指向的对象所属的类和 static 指向的类相同\n- $this 不能用于静态方法中，也不能访问类的静态属性和常量\n- $this 指向的是实际调用的对象\n- static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性\n- static 指向的是实际调用时的对象所属的类\n\n#### 转发调用（forwarding call）\n\n所谓的转发调用（forwarding call）指的是通过以下几种方式进行的静态调用：self::，parent::，static:: 以及 forward_static_call() 。\n\n可用 get_called_class() 函数来获取被调用的方法所在的类名。\n\n以下四种形式的调用，都是转发调用：\n\n```\nself::\nparent::\nstatic::\nforward_static_call()\n```\n\n除此之外的调用，就是非转发调用。\n\n#### 非转发调用（non-forwarding call）\n\n后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。\n\n通过具体的类名或具体的对象进行的调用都是非转发调用。\n\n比如：\n\n```php\nA::test2(); \nB::test2(); \n\n(new A)->dd(); \n(new B)->dd();\n```\n\n### **注意事项**\n\n#### 非静态环境下的私有方法的查找顺序。\n\n在非静态环境下，在类的非静态方法中，使用 $this 和 static 调用类的私有方法时，执行方式有所不同。\n\n- $this 会优先寻找所在定义范围（父类）中的私有方法，如果存在就调用\n\n- static 是先到它指向的类（子类）中寻找私有方法，如果找到了就会报错，因为私有方法只能在它所定义的类内部调用；如果没找到，再去所在定义范围（父类）中寻找该私有方法，如果存在就调用\n\n具体来说，$this 会先到所在定义范围内寻找私有方法，再到它指向的对象所属的类中寻找私有方法，然后寻找公有方法，最后到所在定义范围内寻找公共方法。只要找到了匹配的方法，就调用，并停止查找。\n\n而 static 则是先到它指向的类中寻找私有方法，再寻找共有方法；然后到所在定义范围内寻找私有方法，再寻找共有方法。只要找到了匹配的方法，就调用，并停止查找。\n\n下面是一个例子：\n\n```php\n<?php\n class  A  {\n    private function  foo () {\n        var_dump($this); echo '--';\n        var_dump(new static); echo '--';\n\n        echo __CLASS__; echo '--';\n        echo get_called_class();\n        echo '<br>';\n    }\n\n    public function  test () {\n        $this -> foo ();\n        static:: foo ();\n        echo '<br>';\n    }\n}\n\nclass  B  extends  A  { }\n\nclass  C  extends  A  {\n    private function foo () {\n        echo 'this is C';\n    }\n}\n\n(new  B())->test();\n(new  C())->test();\n```\n\n输出结果为：\n\n```php\nobject(B)#1 (0) { } --object(B)#2 (0) { } --A--B\nobject(B)#1 (0) { } --object(B)#2 (0) { } --A--B\n\nobject(C)#1 (0) { } --object(C)#2 (0) { } --A--C\n\nFatal error: Uncaught Error: Call to private method C::foo() from context 'A'\n```\n\n#### 关于后期静态绑定的解析\n\n后期静态绑定的解析会一直到取得一个完全解析了的静态调用为止。如果静态调用使用了 parent:: 或者 self:: 等转发调用的形式，将会转发调用信息。\n\n```php\n<?php\nclass  A  {\n    public static function  foo () {\n        static:: who ();\n    }\n\n    public static function  who () {\n        echo  __CLASS__ . \"\\n\" ;\n    }\n}\n\nclass  B  extends  A  {\n    public static function  test () {\n        A :: foo ();\n        parent :: foo ();\n        self :: foo ();\n        static::foo();\n        forward_static_call(['A', 'foo']);\n        echo '<br>';\n    }\n\n    public static function  who () {\n        echo  __CLASS__ . \"\\n\" ;\n    }\n}\n\nclass  C  extends  B  {\n    public static function  who () {\n        echo  __CLASS__ . \"\\n\" ;\n    }\n\n    public static function test2() {\n        self::test();\n    }\n}\n\nclass  D  extends  C  {\n    public static function  who () {\n        echo  __CLASS__ . \"\\n\" ;\n    }\n}\n\nB::foo();\nB::test();\n\nC::foo();\nC::test();\n\nD::foo();\nD::test2();\n```\n\n以上的输出结果为：\n\n```php\nB A B B B B \nC A C C C C \nD A D D D D\n```\n\nstatic 后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。请记住这句话。\n\n下面的例子是非转发调用。\n\n```php\nA::foo();  // 输出 A\n\nB::foo();   // 输出 B\n\nC::foo();   // 输出 C\n```\n\n后期静态绑定 static ，是定义在了 foo() 方法中，哪个类通过非转发调用的形式调用 foo() 方法， foo() 方法中的 static 指向的就是哪个类。\n\n但是，如果通过转发调用的形式，调用 foo() 方法，如：\n\n```php\nparent :: foo ();\nself :: foo ();\nstatic::foo();\nforward_static_call(['A', 'foo']);\n```\n\n那么，就以转发调用代码所在的方法 test() 为准，哪个类通过非转发调用的形式调用 test() 方法， foo() 方法中的 static 指向的就是哪个类。\n\n假如调用 test() 方法时，也采用了转发调用的形式，如：\n\n```php\npublic static function test2() {\n    self::test();\n}\n```\n\n那么，就以 test2() 方法为准 ... 依次类推。\n\n也就是说，在使用了后期静态绑定的基类中，后期静态绑定所在的方法如果被转发调用，则 static 的指向，会一直向上追溯，直到遇到非转发调用的形式。","source":"_posts/CodeLanguage/PHP/PHP中self、static、$this的区别&后期静态绑定详解.md","raw":"---\ntitle: PHP 中self、static、$this的区别&后期静态绑定详解\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 2140386669\n---\n\n为了更好地理解 self、static 和 $this 的区别，先来看一个示例：\n\n```php\n<?php\nclass A {\n\n    protected $name = 'A';\n    static $alias = 'a';\n    const HASH = 'md5';\n\n    public function dd() {\n        echo $this->name; echo '--';\n        echo static::$alias; echo '--';     // 后期静态绑定\n        echo static::HASH; echo '--';     // 后期静态绑定\n        echo self::$alias; echo '--';\n        echo self::HASH; echo '--';\n\n        var_dump(new self); echo '--';\n        var_dump($this); echo '--';\n        var_dump(new static); echo '<br>';   // 后期静态绑定\n    }\n\n    public static function who() {\n        echo __CLASS__;\n        echo ' [ This is A ]'; echo '<br>';\n    }\n\n    public static function test() {\n        self::who();\n    }\n\n    public static function test2() {\n        static::who();  // 后期静态绑定\n    }\n\n    public static function getInstance() {\n        var_dump(new self); echo '--';\n        var_dump(new static); echo '<br>';  // 后期静态绑定\n    }\n}\n\nclass B extends A {\n    protected $name = 'B';\n    static $alias = 'b';\n    const HASH = 'sha1';\n\n    public static function who() {\n        echo __CLASS__;\n        echo ' [ This is B ]'; echo '<br>';\n    }\n}\n\nclass C extends B {\n    public static function who() {\n        echo __CLASS__;\n        echo ' [ This is C]'; echo '<br>';\n    }\n}\n\n\n(new A)->dd();  // A--a--md5--a--md5--object(A)#2 (1) { [\"name\":protected]=> string(1) \"A\" } --object(A)#1 (1) { [\"name\":protected]=> string(1) \"A\" } --object(A)#2 (1) { [\"name\":protected]=> string(1) \"A\" }\n(new B)->dd();  // B--b--sha1--a--md5--object(A)#2 (1) { [\"name\":protected]=> string(1) \"A\" } --object(B)#1 (1) { [\"name\":protected]=> string(1) \"B\" } --object(B)#2 (1) { [\"name\":protected]=> string(1) \"B\" }\n\nA::who();  // A [ This is A ]\nB::who();  // B [ This is B ]\n\nA::test();  // A [ This is A ]\nB::test();  // A [ This is A ]\n\nA::test2(); // A [ This is A ]\nB::test2(); // B [ This is B ]\nC::test2(); // C [ This is C]\n\nA::getInstance();   //object(A)#1 (1) { [\"name\":protected]=> string(1) \"A\" } --object(A)#1 (1) { [\"name\":protected]=> string(1) \"A\" }\nB::getInstance();   //object(A)#1 (1) { [\"name\":protected]=> string(1) \"A\" } --object(B)#1 (1) { [\"name\":protected]=> string(1) \"B\" }\n```\n\n**总结说明**\n\n- self 和 __CLASS__，都是对当前类的静态引用，取决于定义当前方法所在的类。也就是说，self 写在哪个类里面， 它引用的就是谁。\n- $this 指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，$this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中。\n- static 关键字除了可以声明类的静态成员（属性和方法）外，还有一个非常重要的作用就是后期静态绑定。\n\n- self 可以用于访问类的静态属性、静态方法和常量，但 self 指向的是当前定义所在的类，这是 self 的限制。\n\n- $this 指向的对象所属的类和 static 指向的类相同。\n\n- static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性。\n\n- 静态调用时，static 指向的是实际调用时的类；非静态调用时，static 指向的是实际调用时的对象所属的类。\n\n## **后期静态绑定**\n\n后期静态绑定（也叫延迟静态绑定），可用于在继承范围内引用静态调用的类，也就是代码运行时最初调用的类。\n\n后期静态绑定本想通过引入一个新的关键字来表示，但最终还是沿用了 static 关键字。\n\n### 工作原理\n\n确切地说，static 后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。\n\n当进行静态方法调用时，该类名（static指向的类名）为明确指定的那个（通常是 :: 运算符的左侧部分），即实际调用时的类。\n\n如上述示例中的：\n\n```\nA::test2(); \nB::test2();\n```\n\n**static 和 self 的区别：**\n\nself 可以用于访问类的静态属性、静态方法和常量，但 self 指向的是当前定义所在的类，这是 self 的限制。\n\nstatic 也可以用于访问类的静态属性、静态方法和常量，static 指向的是实际调用时的类。\n\n当进行非静态方法调用时，该类名（static指向的类名）为该对象所属的类，即实际调用时的对象所属的类。\n\n如上述示例中的：\n\n```php\n(new A)->dd(); \n(new B)->dd();\n```\n\nstatic 和 $this 有点类似，但又有区别：\n\n- $this 指向的对象所属的类和 static 指向的类相同\n- $this 不能用于静态方法中，也不能访问类的静态属性和常量\n- $this 指向的是实际调用的对象\n- static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性\n- static 指向的是实际调用时的对象所属的类\n\n#### 转发调用（forwarding call）\n\n所谓的转发调用（forwarding call）指的是通过以下几种方式进行的静态调用：self::，parent::，static:: 以及 forward_static_call() 。\n\n可用 get_called_class() 函数来获取被调用的方法所在的类名。\n\n以下四种形式的调用，都是转发调用：\n\n```\nself::\nparent::\nstatic::\nforward_static_call()\n```\n\n除此之外的调用，就是非转发调用。\n\n#### 非转发调用（non-forwarding call）\n\n后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。\n\n通过具体的类名或具体的对象进行的调用都是非转发调用。\n\n比如：\n\n```php\nA::test2(); \nB::test2(); \n\n(new A)->dd(); \n(new B)->dd();\n```\n\n### **注意事项**\n\n#### 非静态环境下的私有方法的查找顺序。\n\n在非静态环境下，在类的非静态方法中，使用 $this 和 static 调用类的私有方法时，执行方式有所不同。\n\n- $this 会优先寻找所在定义范围（父类）中的私有方法，如果存在就调用\n\n- static 是先到它指向的类（子类）中寻找私有方法，如果找到了就会报错，因为私有方法只能在它所定义的类内部调用；如果没找到，再去所在定义范围（父类）中寻找该私有方法，如果存在就调用\n\n具体来说，$this 会先到所在定义范围内寻找私有方法，再到它指向的对象所属的类中寻找私有方法，然后寻找公有方法，最后到所在定义范围内寻找公共方法。只要找到了匹配的方法，就调用，并停止查找。\n\n而 static 则是先到它指向的类中寻找私有方法，再寻找共有方法；然后到所在定义范围内寻找私有方法，再寻找共有方法。只要找到了匹配的方法，就调用，并停止查找。\n\n下面是一个例子：\n\n```php\n<?php\n class  A  {\n    private function  foo () {\n        var_dump($this); echo '--';\n        var_dump(new static); echo '--';\n\n        echo __CLASS__; echo '--';\n        echo get_called_class();\n        echo '<br>';\n    }\n\n    public function  test () {\n        $this -> foo ();\n        static:: foo ();\n        echo '<br>';\n    }\n}\n\nclass  B  extends  A  { }\n\nclass  C  extends  A  {\n    private function foo () {\n        echo 'this is C';\n    }\n}\n\n(new  B())->test();\n(new  C())->test();\n```\n\n输出结果为：\n\n```php\nobject(B)#1 (0) { } --object(B)#2 (0) { } --A--B\nobject(B)#1 (0) { } --object(B)#2 (0) { } --A--B\n\nobject(C)#1 (0) { } --object(C)#2 (0) { } --A--C\n\nFatal error: Uncaught Error: Call to private method C::foo() from context 'A'\n```\n\n#### 关于后期静态绑定的解析\n\n后期静态绑定的解析会一直到取得一个完全解析了的静态调用为止。如果静态调用使用了 parent:: 或者 self:: 等转发调用的形式，将会转发调用信息。\n\n```php\n<?php\nclass  A  {\n    public static function  foo () {\n        static:: who ();\n    }\n\n    public static function  who () {\n        echo  __CLASS__ . \"\\n\" ;\n    }\n}\n\nclass  B  extends  A  {\n    public static function  test () {\n        A :: foo ();\n        parent :: foo ();\n        self :: foo ();\n        static::foo();\n        forward_static_call(['A', 'foo']);\n        echo '<br>';\n    }\n\n    public static function  who () {\n        echo  __CLASS__ . \"\\n\" ;\n    }\n}\n\nclass  C  extends  B  {\n    public static function  who () {\n        echo  __CLASS__ . \"\\n\" ;\n    }\n\n    public static function test2() {\n        self::test();\n    }\n}\n\nclass  D  extends  C  {\n    public static function  who () {\n        echo  __CLASS__ . \"\\n\" ;\n    }\n}\n\nB::foo();\nB::test();\n\nC::foo();\nC::test();\n\nD::foo();\nD::test2();\n```\n\n以上的输出结果为：\n\n```php\nB A B B B B \nC A C C C C \nD A D D D D\n```\n\nstatic 后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。请记住这句话。\n\n下面的例子是非转发调用。\n\n```php\nA::foo();  // 输出 A\n\nB::foo();   // 输出 B\n\nC::foo();   // 输出 C\n```\n\n后期静态绑定 static ，是定义在了 foo() 方法中，哪个类通过非转发调用的形式调用 foo() 方法， foo() 方法中的 static 指向的就是哪个类。\n\n但是，如果通过转发调用的形式，调用 foo() 方法，如：\n\n```php\nparent :: foo ();\nself :: foo ();\nstatic::foo();\nforward_static_call(['A', 'foo']);\n```\n\n那么，就以转发调用代码所在的方法 test() 为准，哪个类通过非转发调用的形式调用 test() 方法， foo() 方法中的 static 指向的就是哪个类。\n\n假如调用 test() 方法时，也采用了转发调用的形式，如：\n\n```php\npublic static function test2() {\n    self::test();\n}\n```\n\n那么，就以 test2() 方法为准 ... 依次类推。\n\n也就是说，在使用了后期静态绑定的基类中，后期静态绑定所在的方法如果被转发调用，则 static 的指向，会一直向上追溯，直到遇到非转发调用的形式。","slug":"CodeLanguage/PHP/PHP中self、static、$this的区别&后期静态绑定详解","published":1,"date":"2021-04-16T13:50:20.233Z","updated":"2021-04-29T10:24:59.098Z","_id":"ckotdh5v6001kkw8z7h95hg3c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>为了更好地理解 self、static 和 $this 的区别，先来看一个示例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">static</span> <span class=\"variable\">$alias</span> = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> HASH = <span class=\"string\">&#x27;md5&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;name; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">static</span>::<span class=\"variable\">$alias</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;     <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">static</span>::HASH; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;     <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">self</span>::<span class=\"variable\">$alias</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">self</span>::HASH; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">self</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">$this</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">static</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;   <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">who</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__CLASS__</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27; [ This is A ]&#x27;</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">self</span>::who();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">static</span>::who();  <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">self</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">static</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;  <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">static</span> <span class=\"variable\">$alias</span> = <span class=\"string\">&#x27;b&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> HASH = <span class=\"string\">&#x27;sha1&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">who</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__CLASS__</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27; [ This is B ]&#x27;</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">who</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__CLASS__</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27; [ This is C]&#x27;</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span> A)-&gt;dd();  <span class=\"comment\">// A--a--md5--a--md5--object(A)#2 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(A)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(A)#2 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125;</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> B)-&gt;dd();  <span class=\"comment\">// B--b--sha1--a--md5--object(A)#2 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(B)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;B&quot; &#125; --object(B)#2 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;B&quot; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">A::who();  <span class=\"comment\">// A [ This is A ]</span></span><br><span class=\"line\">B::who();  <span class=\"comment\">// B [ This is B ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">A::test();  <span class=\"comment\">// A [ This is A ]</span></span><br><span class=\"line\">B::test();  <span class=\"comment\">// A [ This is A ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">A::test2(); <span class=\"comment\">// A [ This is A ]</span></span><br><span class=\"line\">B::test2(); <span class=\"comment\">// B [ This is B ]</span></span><br><span class=\"line\">C::test2(); <span class=\"comment\">// C [ This is C]</span></span><br><span class=\"line\"></span><br><span class=\"line\">A::getInstance();   <span class=\"comment\">//object(A)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(A)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125;</span></span><br><span class=\"line\">B::getInstance();   <span class=\"comment\">//object(A)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(B)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;B&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结说明</strong></p>\n<ul>\n<li><p>self 和 __CLASS__，都是对当前类的静态引用，取决于定义当前方法所在的类。也就是说，self 写在哪个类里面， 它引用的就是谁。</p>\n</li>\n<li><p>$this 指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，$this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中。</p>\n</li>\n<li><p>static 关键字除了可以声明类的静态成员（属性和方法）外，还有一个非常重要的作用就是后期静态绑定。</p>\n</li>\n<li><p>self 可以用于访问类的静态属性、静态方法和常量，但 self 指向的是当前定义所在的类，这是 self 的限制。</p>\n</li>\n<li><p>$this 指向的对象所属的类和 static 指向的类相同。</p>\n</li>\n<li><p>static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性。</p>\n</li>\n<li><p>静态调用时，static 指向的是实际调用时的类；非静态调用时，static 指向的是实际调用时的对象所属的类。</p>\n</li>\n</ul>\n<h2 id=\"后期静态绑定\"><a href=\"#后期静态绑定\" class=\"headerlink\" title=\"后期静态绑定\"></a><strong>后期静态绑定</strong></h2><p>后期静态绑定（也叫延迟静态绑定），可用于在继承范围内引用静态调用的类，也就是代码运行时最初调用的类。</p>\n<p>后期静态绑定本想通过引入一个新的关键字来表示，但最终还是沿用了 static 关键字。</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>确切地说，static 后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。</p>\n<p>当进行静态方法调用时，该类名（static指向的类名）为明确指定的那个（通常是 :: 运算符的左侧部分），即实际调用时的类。</p>\n<p>如上述示例中的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::test2(); </span><br><span class=\"line\">B::test2();</span><br></pre></td></tr></table></figure>\n\n<p><strong>static 和 self 的区别：</strong></p>\n<p>self 可以用于访问类的静态属性、静态方法和常量，但 self 指向的是当前定义所在的类，这是 self 的限制。</p>\n<p>static 也可以用于访问类的静态属性、静态方法和常量，static 指向的是实际调用时的类。</p>\n<p>当进行非静态方法调用时，该类名（static指向的类名）为该对象所属的类，即实际调用时的对象所属的类。</p>\n<p>如上述示例中的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">new</span> A)-&gt;dd(); </span><br><span class=\"line\">(<span class=\"keyword\">new</span> B)-&gt;dd();</span><br></pre></td></tr></table></figure>\n\n<p>static 和 $this 有点类似，但又有区别：</p>\n<ul>\n<li>$this 指向的对象所属的类和 static 指向的类相同</li>\n<li>$this 不能用于静态方法中，也不能访问类的静态属性和常量</li>\n<li>$this 指向的是实际调用的对象</li>\n<li>static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性</li>\n<li>static 指向的是实际调用时的对象所属的类</li>\n</ul>\n<h4 id=\"转发调用（forwarding-call）\"><a href=\"#转发调用（forwarding-call）\" class=\"headerlink\" title=\"转发调用（forwarding call）\"></a>转发调用（forwarding call）</h4><p>所谓的转发调用（forwarding call）指的是通过以下几种方式进行的静态调用：self::，parent::，static:: 以及 forward_static_call() 。</p>\n<p>可用 get_called_class() 函数来获取被调用的方法所在的类名。</p>\n<p>以下四种形式的调用，都是转发调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self::</span><br><span class=\"line\">parent::</span><br><span class=\"line\">static::</span><br><span class=\"line\">forward_static_call()</span><br></pre></td></tr></table></figure>\n\n<p>除此之外的调用，就是非转发调用。</p>\n<h4 id=\"非转发调用（non-forwarding-call）\"><a href=\"#非转发调用（non-forwarding-call）\" class=\"headerlink\" title=\"非转发调用（non-forwarding call）\"></a>非转发调用（non-forwarding call）</h4><p>后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。</p>\n<p>通过具体的类名或具体的对象进行的调用都是非转发调用。</p>\n<p>比如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::test2(); </span><br><span class=\"line\">B::test2(); </span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span> A)-&gt;dd(); </span><br><span class=\"line\">(<span class=\"keyword\">new</span> B)-&gt;dd();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a><strong>注意事项</strong></h3><h4 id=\"非静态环境下的私有方法的查找顺序。\"><a href=\"#非静态环境下的私有方法的查找顺序。\" class=\"headerlink\" title=\"非静态环境下的私有方法的查找顺序。\"></a>非静态环境下的私有方法的查找顺序。</h4><p>在非静态环境下，在类的非静态方法中，使用 $this 和 static 调用类的私有方法时，执行方式有所不同。</p>\n<ul>\n<li><p>$this 会优先寻找所在定义范围（父类）中的私有方法，如果存在就调用</p>\n</li>\n<li><p>static 是先到它指向的类（子类）中寻找私有方法，如果找到了就会报错，因为私有方法只能在它所定义的类内部调用；如果没找到，再去所在定义范围（父类）中寻找该私有方法，如果存在就调用</p>\n</li>\n</ul>\n<p>具体来说，$this 会先到所在定义范围内寻找私有方法，再到它指向的对象所属的类中寻找私有方法，然后寻找公有方法，最后到所在定义范围内寻找公共方法。只要找到了匹配的方法，就调用，并停止查找。</p>\n<p>而 static 则是先到它指向的类中寻找私有方法，再寻找共有方法；然后到所在定义范围内寻找私有方法，再寻找共有方法。只要找到了匹配的方法，就调用，并停止查找。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">A</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">$this</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">static</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__CLASS__</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_called_class();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span> -&gt; foo ();</span><br><span class=\"line\">        <span class=\"built_in\">static</span>:: foo ();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">B</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">A</span>  </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">C</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">A</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;this is C&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span>  B())-&gt;test();</span><br><span class=\"line\">(<span class=\"keyword\">new</span>  C())-&gt;test();</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span>(B)<span class=\"comment\">#1 (0) &#123; &#125; --object(B)#2 (0) &#123; &#125; --A--B</span></span><br><span class=\"line\"><span class=\"keyword\">object</span>(B)<span class=\"comment\">#1 (0) &#123; &#125; --object(B)#2 (0) &#123; &#125; --A--B</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span>(C)<span class=\"comment\">#1 (0) &#123; &#125; --object(C)#2 (0) &#123; &#125; --A--C</span></span><br><span class=\"line\"></span><br><span class=\"line\">Fatal <span class=\"built_in\">error</span>: Uncaught <span class=\"built_in\">Error</span>: Call to <span class=\"keyword\">private</span> method C::foo() <span class=\"keyword\">from</span> context <span class=\"string\">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关于后期静态绑定的解析\"><a href=\"#关于后期静态绑定的解析\" class=\"headerlink\" title=\"关于后期静态绑定的解析\"></a>关于后期静态绑定的解析</h4><p>后期静态绑定的解析会一直到取得一个完全解析了的静态调用为止。如果静态调用使用了 parent:: 或者 self:: 等转发调用的形式，将会转发调用信息。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">A</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">static</span>:: who ();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">who</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>  <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">&quot;\\n&quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">B</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">A</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        A :: foo ();</span><br><span class=\"line\">        <span class=\"built_in\">parent</span> :: foo ();</span><br><span class=\"line\">        <span class=\"built_in\">self</span> :: foo ();</span><br><span class=\"line\">        <span class=\"built_in\">static</span>::foo();</span><br><span class=\"line\">        forward_static_call([<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">who</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>  <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">&quot;\\n&quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">C</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">B</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">who</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>  <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">&quot;\\n&quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">self</span>::test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">D</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">C</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">who</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>  <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">&quot;\\n&quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">B::foo();</span><br><span class=\"line\">B::test();</span><br><span class=\"line\"></span><br><span class=\"line\">C::foo();</span><br><span class=\"line\">C::test();</span><br><span class=\"line\"></span><br><span class=\"line\">D::foo();</span><br><span class=\"line\">D::test2();</span><br></pre></td></tr></table></figure>\n\n<p>以上的输出结果为：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B A B B B B </span><br><span class=\"line\">C A C C C C </span><br><span class=\"line\">D A D D D D</span><br></pre></td></tr></table></figure>\n\n<p>static 后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。请记住这句话。</p>\n<p>下面的例子是非转发调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::foo();  <span class=\"comment\">// 输出 A</span></span><br><span class=\"line\"></span><br><span class=\"line\">B::foo();   <span class=\"comment\">// 输出 B</span></span><br><span class=\"line\"></span><br><span class=\"line\">C::foo();   <span class=\"comment\">// 输出 C</span></span><br></pre></td></tr></table></figure>\n\n<p>后期静态绑定 static ，是定义在了 foo() 方法中，哪个类通过非转发调用的形式调用 foo() 方法， foo() 方法中的 static 指向的就是哪个类。</p>\n<p>但是，如果通过转发调用的形式，调用 foo() 方法，如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parent</span> :: foo ();</span><br><span class=\"line\"><span class=\"built_in\">self</span> :: foo ();</span><br><span class=\"line\"><span class=\"built_in\">static</span>::foo();</span><br><span class=\"line\">forward_static_call([<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>那么，就以转发调用代码所在的方法 test() 为准，哪个类通过非转发调用的形式调用 test() 方法， foo() 方法中的 static 指向的就是哪个类。</p>\n<p>假如调用 test() 方法时，也采用了转发调用的形式，如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">self</span>::test();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么，就以 test2() 方法为准 … 依次类推。</p>\n<p>也就是说，在使用了后期静态绑定的基类中，后期静态绑定所在的方法如果被转发调用，则 static 的指向，会一直向上追溯，直到遇到非转发调用的形式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为了更好地理解 self、static 和 $this 的区别，先来看一个示例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">static</span> <span class=\"variable\">$alias</span> = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> HASH = <span class=\"string\">&#x27;md5&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;name; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">static</span>::<span class=\"variable\">$alias</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;     <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">static</span>::HASH; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;     <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">self</span>::<span class=\"variable\">$alias</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">self</span>::HASH; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">self</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">$this</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">static</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;   <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">who</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__CLASS__</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27; [ This is A ]&#x27;</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">self</span>::who();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">static</span>::who();  <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">self</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">static</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;  <span class=\"comment\">// 后期静态绑定</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">static</span> <span class=\"variable\">$alias</span> = <span class=\"string\">&#x27;b&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> HASH = <span class=\"string\">&#x27;sha1&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">who</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__CLASS__</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27; [ This is B ]&#x27;</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">who</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__CLASS__</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27; [ This is C]&#x27;</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span> A)-&gt;dd();  <span class=\"comment\">// A--a--md5--a--md5--object(A)#2 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(A)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(A)#2 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125;</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> B)-&gt;dd();  <span class=\"comment\">// B--b--sha1--a--md5--object(A)#2 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(B)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;B&quot; &#125; --object(B)#2 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;B&quot; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">A::who();  <span class=\"comment\">// A [ This is A ]</span></span><br><span class=\"line\">B::who();  <span class=\"comment\">// B [ This is B ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">A::test();  <span class=\"comment\">// A [ This is A ]</span></span><br><span class=\"line\">B::test();  <span class=\"comment\">// A [ This is A ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">A::test2(); <span class=\"comment\">// A [ This is A ]</span></span><br><span class=\"line\">B::test2(); <span class=\"comment\">// B [ This is B ]</span></span><br><span class=\"line\">C::test2(); <span class=\"comment\">// C [ This is C]</span></span><br><span class=\"line\"></span><br><span class=\"line\">A::getInstance();   <span class=\"comment\">//object(A)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(A)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125;</span></span><br><span class=\"line\">B::getInstance();   <span class=\"comment\">//object(A)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;A&quot; &#125; --object(B)#1 (1) &#123; [&quot;name&quot;:protected]=&gt; string(1) &quot;B&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结说明</strong></p>\n<ul>\n<li><p>self 和 __CLASS__，都是对当前类的静态引用，取决于定义当前方法所在的类。也就是说，self 写在哪个类里面， 它引用的就是谁。</p>\n</li>\n<li><p>$this 指向的是实际调用时的对象，也就是说，实际运行过程中，谁调用了类的属性或方法，$this 指向的就是哪个对象。但 $this 不能访问类的静态属性和常量，且 $this 不能存在于静态方法中。</p>\n</li>\n<li><p>static 关键字除了可以声明类的静态成员（属性和方法）外，还有一个非常重要的作用就是后期静态绑定。</p>\n</li>\n<li><p>self 可以用于访问类的静态属性、静态方法和常量，但 self 指向的是当前定义所在的类，这是 self 的限制。</p>\n</li>\n<li><p>$this 指向的对象所属的类和 static 指向的类相同。</p>\n</li>\n<li><p>static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性。</p>\n</li>\n<li><p>静态调用时，static 指向的是实际调用时的类；非静态调用时，static 指向的是实际调用时的对象所属的类。</p>\n</li>\n</ul>\n<h2 id=\"后期静态绑定\"><a href=\"#后期静态绑定\" class=\"headerlink\" title=\"后期静态绑定\"></a><strong>后期静态绑定</strong></h2><p>后期静态绑定（也叫延迟静态绑定），可用于在继承范围内引用静态调用的类，也就是代码运行时最初调用的类。</p>\n<p>后期静态绑定本想通过引入一个新的关键字来表示，但最终还是沿用了 static 关键字。</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>确切地说，static 后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。</p>\n<p>当进行静态方法调用时，该类名（static指向的类名）为明确指定的那个（通常是 :: 运算符的左侧部分），即实际调用时的类。</p>\n<p>如上述示例中的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::test2(); </span><br><span class=\"line\">B::test2();</span><br></pre></td></tr></table></figure>\n\n<p><strong>static 和 self 的区别：</strong></p>\n<p>self 可以用于访问类的静态属性、静态方法和常量，但 self 指向的是当前定义所在的类，这是 self 的限制。</p>\n<p>static 也可以用于访问类的静态属性、静态方法和常量，static 指向的是实际调用时的类。</p>\n<p>当进行非静态方法调用时，该类名（static指向的类名）为该对象所属的类，即实际调用时的对象所属的类。</p>\n<p>如上述示例中的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">new</span> A)-&gt;dd(); </span><br><span class=\"line\">(<span class=\"keyword\">new</span> B)-&gt;dd();</span><br></pre></td></tr></table></figure>\n\n<p>static 和 $this 有点类似，但又有区别：</p>\n<ul>\n<li>$this 指向的对象所属的类和 static 指向的类相同</li>\n<li>$this 不能用于静态方法中，也不能访问类的静态属性和常量</li>\n<li>$this 指向的是实际调用的对象</li>\n<li>static 可以用于静态或非静态方法中，也可以访问类的静态属性、静态方法、常量和非静态方法，但不能访问非静态属性</li>\n<li>static 指向的是实际调用时的对象所属的类</li>\n</ul>\n<h4 id=\"转发调用（forwarding-call）\"><a href=\"#转发调用（forwarding-call）\" class=\"headerlink\" title=\"转发调用（forwarding call）\"></a>转发调用（forwarding call）</h4><p>所谓的转发调用（forwarding call）指的是通过以下几种方式进行的静态调用：self::，parent::，static:: 以及 forward_static_call() 。</p>\n<p>可用 get_called_class() 函数来获取被调用的方法所在的类名。</p>\n<p>以下四种形式的调用，都是转发调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self::</span><br><span class=\"line\">parent::</span><br><span class=\"line\">static::</span><br><span class=\"line\">forward_static_call()</span><br></pre></td></tr></table></figure>\n\n<p>除此之外的调用，就是非转发调用。</p>\n<h4 id=\"非转发调用（non-forwarding-call）\"><a href=\"#非转发调用（non-forwarding-call）\" class=\"headerlink\" title=\"非转发调用（non-forwarding call）\"></a>非转发调用（non-forwarding call）</h4><p>后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。</p>\n<p>通过具体的类名或具体的对象进行的调用都是非转发调用。</p>\n<p>比如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::test2(); </span><br><span class=\"line\">B::test2(); </span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span> A)-&gt;dd(); </span><br><span class=\"line\">(<span class=\"keyword\">new</span> B)-&gt;dd();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a><strong>注意事项</strong></h3><h4 id=\"非静态环境下的私有方法的查找顺序。\"><a href=\"#非静态环境下的私有方法的查找顺序。\" class=\"headerlink\" title=\"非静态环境下的私有方法的查找顺序。\"></a>非静态环境下的私有方法的查找顺序。</h4><p>在非静态环境下，在类的非静态方法中，使用 $this 和 static 调用类的私有方法时，执行方式有所不同。</p>\n<ul>\n<li><p>$this 会优先寻找所在定义范围（父类）中的私有方法，如果存在就调用</p>\n</li>\n<li><p>static 是先到它指向的类（子类）中寻找私有方法，如果找到了就会报错，因为私有方法只能在它所定义的类内部调用；如果没找到，再去所在定义范围（父类）中寻找该私有方法，如果存在就调用</p>\n</li>\n</ul>\n<p>具体来说，$this 会先到所在定义范围内寻找私有方法，再到它指向的对象所属的类中寻找私有方法，然后寻找公有方法，最后到所在定义范围内寻找公共方法。只要找到了匹配的方法，就调用，并停止查找。</p>\n<p>而 static 则是先到它指向的类中寻找私有方法，再寻找共有方法；然后到所在定义范围内寻找私有方法，再寻找共有方法。只要找到了匹配的方法，就调用，并停止查找。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">A</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">$this</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        var_dump(<span class=\"keyword\">new</span> <span class=\"built_in\">static</span>); <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__CLASS__</span>; <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;--&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_called_class();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span> -&gt; foo ();</span><br><span class=\"line\">        <span class=\"built_in\">static</span>:: foo ();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">B</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">A</span>  </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">C</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">A</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;this is C&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span>  B())-&gt;test();</span><br><span class=\"line\">(<span class=\"keyword\">new</span>  C())-&gt;test();</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span>(B)<span class=\"comment\">#1 (0) &#123; &#125; --object(B)#2 (0) &#123; &#125; --A--B</span></span><br><span class=\"line\"><span class=\"keyword\">object</span>(B)<span class=\"comment\">#1 (0) &#123; &#125; --object(B)#2 (0) &#123; &#125; --A--B</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span>(C)<span class=\"comment\">#1 (0) &#123; &#125; --object(C)#2 (0) &#123; &#125; --A--C</span></span><br><span class=\"line\"></span><br><span class=\"line\">Fatal <span class=\"built_in\">error</span>: Uncaught <span class=\"built_in\">Error</span>: Call to <span class=\"keyword\">private</span> method C::foo() <span class=\"keyword\">from</span> context <span class=\"string\">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关于后期静态绑定的解析\"><a href=\"#关于后期静态绑定的解析\" class=\"headerlink\" title=\"关于后期静态绑定的解析\"></a>关于后期静态绑定的解析</h4><p>后期静态绑定的解析会一直到取得一个完全解析了的静态调用为止。如果静态调用使用了 parent:: 或者 self:: 等转发调用的形式，将会转发调用信息。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">A</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">static</span>:: who ();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">who</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>  <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">&quot;\\n&quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">B</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">A</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        A :: foo ();</span><br><span class=\"line\">        <span class=\"built_in\">parent</span> :: foo ();</span><br><span class=\"line\">        <span class=\"built_in\">self</span> :: foo ();</span><br><span class=\"line\">        <span class=\"built_in\">static</span>::foo();</span><br><span class=\"line\">        forward_static_call([<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">who</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>  <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">&quot;\\n&quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">C</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">B</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">who</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>  <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">&quot;\\n&quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">self</span>::test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">D</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">C</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">who</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>  <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">&quot;\\n&quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">B::foo();</span><br><span class=\"line\">B::test();</span><br><span class=\"line\"></span><br><span class=\"line\">C::foo();</span><br><span class=\"line\">C::test();</span><br><span class=\"line\"></span><br><span class=\"line\">D::foo();</span><br><span class=\"line\">D::test2();</span><br></pre></td></tr></table></figure>\n\n<p>以上的输出结果为：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B A B B B B </span><br><span class=\"line\">C A C C C C </span><br><span class=\"line\">D A D D D D</span><br></pre></td></tr></table></figure>\n\n<p>static 后期静态绑定的工作原理是存储了上一个非转发调用（non-forwarding call）的类名。请记住这句话。</p>\n<p>下面的例子是非转发调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::foo();  <span class=\"comment\">// 输出 A</span></span><br><span class=\"line\"></span><br><span class=\"line\">B::foo();   <span class=\"comment\">// 输出 B</span></span><br><span class=\"line\"></span><br><span class=\"line\">C::foo();   <span class=\"comment\">// 输出 C</span></span><br></pre></td></tr></table></figure>\n\n<p>后期静态绑定 static ，是定义在了 foo() 方法中，哪个类通过非转发调用的形式调用 foo() 方法， foo() 方法中的 static 指向的就是哪个类。</p>\n<p>但是，如果通过转发调用的形式，调用 foo() 方法，如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parent</span> :: foo ();</span><br><span class=\"line\"><span class=\"built_in\">self</span> :: foo ();</span><br><span class=\"line\"><span class=\"built_in\">static</span>::foo();</span><br><span class=\"line\">forward_static_call([<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>那么，就以转发调用代码所在的方法 test() 为准，哪个类通过非转发调用的形式调用 test() 方法， foo() 方法中的 static 指向的就是哪个类。</p>\n<p>假如调用 test() 方法时，也采用了转发调用的形式，如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">self</span>::test();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么，就以 test2() 方法为准 … 依次类推。</p>\n<p>也就是说，在使用了后期静态绑定的基类中，后期静态绑定所在的方法如果被转发调用，则 static 的指向，会一直向上追溯，直到遇到非转发调用的形式。</p>\n"},{"title":"PHP-FPM的三种运行模式","abbrlink":4276646924,"_content":"\n### 1：static 模式（静态模式）\n\nstatic 模式始终会保持一个固定数量的子进程，这个数量由`pm.max_children` 的配置决定\n\n### 2：dynamic 模式（动态模式）\n\n子进程的数量是动态变化的，启动时，会生成固定数量的子进程，可以理解为最小子进程数，通过 `pm.statr_servers` 配置决定，而最大子进程数则由`pm.max_children` 控制，子进程数会在`pm.start_servers` ~ `pm.max_children` 范围内波动，另外，闲置的子进程数还可以由 `pm.min_spare_servers`和 `pm.max_spare_servers`两个配置参数控制。总结：闲置的子进程也可以有最小数目和最大数目，而如果闲置的子进程超过`pm.max_spare_servers`,则会别杀死。\n\n### 3：ondemand 模式（动态需求模式）\n\n这种模式和 dynamic 模式相反。因为这种模式把内存放在第一位，每个闲置进程在持续闲置了`pm.process_idle_timeout` 秒后就会被杀死，因为这种模式，到了服务器低峰期的时候，内存就会降下来，如果服务器长时间没有请求，就只有一个主进程。其弊端是，遇到高峰期或者`pm.process_idle_timeout` 设置太小，无法避免服务器频繁创建进程的问题。\n\n\n\n## 涉及到的参数配置：\n\n- `pm.max_children` ：静态方式下开启 php-fpm 进程数量\n- `pm.start_servers`：动态方式下的起始 php-fpm 进程数量\n- `pm.min_spare_servers`：动态方式下的最小 php-fpm 进程数量\n- `pm.max_spare_servers`：动态方式下的最大 php-fpm 进程数量\n\n\n\n## PHP-FPM 慢日志配置\n\n配置文件：`php-fpm.conf`\n\n开启慢日志查询：\n\n```shell\nslowlog = /usr/local/log/php-fpm.log.slow\nrequest_slowlog_timeout = 5s\n```\n\n意思是当某个请求时间超过了5秒，就写进慢日志，注意是5s，别忘了单位。其他单位还有m分，h时，php-fpm会记录对应的进程号，脚本名称，具体执行慢的代码行好等。","source":"_posts/CodeLanguage/PHP/PHP-FPM的三种运行模式的三种运行模式.md","raw":"---\ntitle: PHP-FPM的三种运行模式\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 4276646924\n---\n\n### 1：static 模式（静态模式）\n\nstatic 模式始终会保持一个固定数量的子进程，这个数量由`pm.max_children` 的配置决定\n\n### 2：dynamic 模式（动态模式）\n\n子进程的数量是动态变化的，启动时，会生成固定数量的子进程，可以理解为最小子进程数，通过 `pm.statr_servers` 配置决定，而最大子进程数则由`pm.max_children` 控制，子进程数会在`pm.start_servers` ~ `pm.max_children` 范围内波动，另外，闲置的子进程数还可以由 `pm.min_spare_servers`和 `pm.max_spare_servers`两个配置参数控制。总结：闲置的子进程也可以有最小数目和最大数目，而如果闲置的子进程超过`pm.max_spare_servers`,则会别杀死。\n\n### 3：ondemand 模式（动态需求模式）\n\n这种模式和 dynamic 模式相反。因为这种模式把内存放在第一位，每个闲置进程在持续闲置了`pm.process_idle_timeout` 秒后就会被杀死，因为这种模式，到了服务器低峰期的时候，内存就会降下来，如果服务器长时间没有请求，就只有一个主进程。其弊端是，遇到高峰期或者`pm.process_idle_timeout` 设置太小，无法避免服务器频繁创建进程的问题。\n\n\n\n## 涉及到的参数配置：\n\n- `pm.max_children` ：静态方式下开启 php-fpm 进程数量\n- `pm.start_servers`：动态方式下的起始 php-fpm 进程数量\n- `pm.min_spare_servers`：动态方式下的最小 php-fpm 进程数量\n- `pm.max_spare_servers`：动态方式下的最大 php-fpm 进程数量\n\n\n\n## PHP-FPM 慢日志配置\n\n配置文件：`php-fpm.conf`\n\n开启慢日志查询：\n\n```shell\nslowlog = /usr/local/log/php-fpm.log.slow\nrequest_slowlog_timeout = 5s\n```\n\n意思是当某个请求时间超过了5秒，就写进慢日志，注意是5s，别忘了单位。其他单位还有m分，h时，php-fpm会记录对应的进程号，脚本名称，具体执行慢的代码行好等。","slug":"CodeLanguage/PHP/PHP-FPM的三种运行模式的三种运行模式","published":1,"date":"2021-04-16T13:50:20.200Z","updated":"2021-04-29T10:24:59.095Z","_id":"ckotdh5v8001mkw8zf6063sei","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1：static-模式（静态模式）\"><a href=\"#1：static-模式（静态模式）\" class=\"headerlink\" title=\"1：static 模式（静态模式）\"></a>1：static 模式（静态模式）</h3><p>static 模式始终会保持一个固定数量的子进程，这个数量由<code>pm.max_children</code> 的配置决定</p>\n<h3 id=\"2：dynamic-模式（动态模式）\"><a href=\"#2：dynamic-模式（动态模式）\" class=\"headerlink\" title=\"2：dynamic 模式（动态模式）\"></a>2：dynamic 模式（动态模式）</h3><p>子进程的数量是动态变化的，启动时，会生成固定数量的子进程，可以理解为最小子进程数，通过 <code>pm.statr_servers</code> 配置决定，而最大子进程数则由<code>pm.max_children</code> 控制，子进程数会在<code>pm.start_servers</code> ~ <code>pm.max_children</code> 范围内波动，另外，闲置的子进程数还可以由 <code>pm.min_spare_servers</code>和 <code>pm.max_spare_servers</code>两个配置参数控制。总结：闲置的子进程也可以有最小数目和最大数目，而如果闲置的子进程超过<code>pm.max_spare_servers</code>,则会别杀死。</p>\n<h3 id=\"3：ondemand-模式（动态需求模式）\"><a href=\"#3：ondemand-模式（动态需求模式）\" class=\"headerlink\" title=\"3：ondemand 模式（动态需求模式）\"></a>3：ondemand 模式（动态需求模式）</h3><p>这种模式和 dynamic 模式相反。因为这种模式把内存放在第一位，每个闲置进程在持续闲置了<code>pm.process_idle_timeout</code> 秒后就会被杀死，因为这种模式，到了服务器低峰期的时候，内存就会降下来，如果服务器长时间没有请求，就只有一个主进程。其弊端是，遇到高峰期或者<code>pm.process_idle_timeout</code> 设置太小，无法避免服务器频繁创建进程的问题。</p>\n<h2 id=\"涉及到的参数配置：\"><a href=\"#涉及到的参数配置：\" class=\"headerlink\" title=\"涉及到的参数配置：\"></a>涉及到的参数配置：</h2><ul>\n<li><code>pm.max_children</code> ：静态方式下开启 php-fpm 进程数量</li>\n<li><code>pm.start_servers</code>：动态方式下的起始 php-fpm 进程数量</li>\n<li><code>pm.min_spare_servers</code>：动态方式下的最小 php-fpm 进程数量</li>\n<li><code>pm.max_spare_servers</code>：动态方式下的最大 php-fpm 进程数量</li>\n</ul>\n<h2 id=\"PHP-FPM-慢日志配置\"><a href=\"#PHP-FPM-慢日志配置\" class=\"headerlink\" title=\"PHP-FPM 慢日志配置\"></a>PHP-FPM 慢日志配置</h2><p>配置文件：<code>php-fpm.conf</code></p>\n<p>开启慢日志查询：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slowlog = /usr/local/log/php-fpm.log.slow</span><br><span class=\"line\">request_slowlog_timeout = 5s</span><br></pre></td></tr></table></figure>\n\n<p>意思是当某个请求时间超过了5秒，就写进慢日志，注意是5s，别忘了单位。其他单位还有m分，h时，php-fpm会记录对应的进程号，脚本名称，具体执行慢的代码行好等。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1：static-模式（静态模式）\"><a href=\"#1：static-模式（静态模式）\" class=\"headerlink\" title=\"1：static 模式（静态模式）\"></a>1：static 模式（静态模式）</h3><p>static 模式始终会保持一个固定数量的子进程，这个数量由<code>pm.max_children</code> 的配置决定</p>\n<h3 id=\"2：dynamic-模式（动态模式）\"><a href=\"#2：dynamic-模式（动态模式）\" class=\"headerlink\" title=\"2：dynamic 模式（动态模式）\"></a>2：dynamic 模式（动态模式）</h3><p>子进程的数量是动态变化的，启动时，会生成固定数量的子进程，可以理解为最小子进程数，通过 <code>pm.statr_servers</code> 配置决定，而最大子进程数则由<code>pm.max_children</code> 控制，子进程数会在<code>pm.start_servers</code> ~ <code>pm.max_children</code> 范围内波动，另外，闲置的子进程数还可以由 <code>pm.min_spare_servers</code>和 <code>pm.max_spare_servers</code>两个配置参数控制。总结：闲置的子进程也可以有最小数目和最大数目，而如果闲置的子进程超过<code>pm.max_spare_servers</code>,则会别杀死。</p>\n<h3 id=\"3：ondemand-模式（动态需求模式）\"><a href=\"#3：ondemand-模式（动态需求模式）\" class=\"headerlink\" title=\"3：ondemand 模式（动态需求模式）\"></a>3：ondemand 模式（动态需求模式）</h3><p>这种模式和 dynamic 模式相反。因为这种模式把内存放在第一位，每个闲置进程在持续闲置了<code>pm.process_idle_timeout</code> 秒后就会被杀死，因为这种模式，到了服务器低峰期的时候，内存就会降下来，如果服务器长时间没有请求，就只有一个主进程。其弊端是，遇到高峰期或者<code>pm.process_idle_timeout</code> 设置太小，无法避免服务器频繁创建进程的问题。</p>\n<h2 id=\"涉及到的参数配置：\"><a href=\"#涉及到的参数配置：\" class=\"headerlink\" title=\"涉及到的参数配置：\"></a>涉及到的参数配置：</h2><ul>\n<li><code>pm.max_children</code> ：静态方式下开启 php-fpm 进程数量</li>\n<li><code>pm.start_servers</code>：动态方式下的起始 php-fpm 进程数量</li>\n<li><code>pm.min_spare_servers</code>：动态方式下的最小 php-fpm 进程数量</li>\n<li><code>pm.max_spare_servers</code>：动态方式下的最大 php-fpm 进程数量</li>\n</ul>\n<h2 id=\"PHP-FPM-慢日志配置\"><a href=\"#PHP-FPM-慢日志配置\" class=\"headerlink\" title=\"PHP-FPM 慢日志配置\"></a>PHP-FPM 慢日志配置</h2><p>配置文件：<code>php-fpm.conf</code></p>\n<p>开启慢日志查询：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slowlog = /usr/local/log/php-fpm.log.slow</span><br><span class=\"line\">request_slowlog_timeout = 5s</span><br></pre></td></tr></table></figure>\n\n<p>意思是当某个请求时间超过了5秒，就写进慢日志，注意是5s，别忘了单位。其他单位还有m分，h时，php-fpm会记录对应的进程号，脚本名称，具体执行慢的代码行好等。</p>\n"},{"title":"PHP基础-数据类型-boolean","abbrlink":886155297,"_content":"\n> 这是最简单的类型，boolean 表达了真值，可以为 true 或者 false\n\n## 语法\n\n要指定一个布尔值，使用常量 true 或 false 。两个都不区分大小写。\n\n```php\n<?php\n$foo = True; // 设置 $foo 为 TRUE\n?>\n```\n\n通常运算符所返回的 boolean 值结果会被传递给控制流程。\n\n```php\n<?php\n// == 是一个操作符，它检测两个变量是否相等，并返回一个布尔值\nif ($action == \"show_version\") {\n    echo \"The version is 1.23\";\n}\n\n// 这样做是不必要的...\nif ($show_separators == TRUE) {\n    echo \"<hr>\\n\";\n}\n\n// ...因为可以使用下面这种简单的方式：\nif ($show_separators) {\n    echo \"<hr>\\n\";\n}\n```\n\n\n\n## 转换为布尔值\n\n要明确的将一个值转换为 boolean ，用 （bool）或者 （boolean）来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。\n\n\n\n## 当转换为 boolean 时，以下值被认为是 FALSE\n\n- 布尔值 false 本身\n- 整型值 0（零）及 -0（零）\n- 浮点型值 0.0（零）-0.0（零）\n- 空字符串，以及字符串 \"0\"\n- 不包括任何元素的数组\n- 特殊类型 NULL（包括尚未赋值的变量） \n- 从空标记生成的 SimpleXML 对象\n\n> 所有其他值都被认为是 TRUE （包括任何资源和nan）\n>\n> Warning ：-1 和其它非零值（不论正负）一样，被认为是 TRUE。\n\n```php\n<?php\nvar_dump((bool) \"\");        // bool(false)\nvar_dump((bool) 1);         // bool(true)\nvar_dump((bool) -2);        // bool(true)\nvar_dump((bool) \"foo\");     // bool(true)\nvar_dump((bool) 2.3e5);     // bool(true)\nvar_dump((bool) array(12)); // bool(true)\nvar_dump((bool) array());   // bool(false)\nvar_dump((bool) \"false\");   // bool(true)\n?>\n```","source":"_posts/CodeLanguage/PHP/PHP基础-数据类型-boolean.md","raw":"---\ntitle: PHP基础-数据类型-boolean\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 886155297\n---\n\n> 这是最简单的类型，boolean 表达了真值，可以为 true 或者 false\n\n## 语法\n\n要指定一个布尔值，使用常量 true 或 false 。两个都不区分大小写。\n\n```php\n<?php\n$foo = True; // 设置 $foo 为 TRUE\n?>\n```\n\n通常运算符所返回的 boolean 值结果会被传递给控制流程。\n\n```php\n<?php\n// == 是一个操作符，它检测两个变量是否相等，并返回一个布尔值\nif ($action == \"show_version\") {\n    echo \"The version is 1.23\";\n}\n\n// 这样做是不必要的...\nif ($show_separators == TRUE) {\n    echo \"<hr>\\n\";\n}\n\n// ...因为可以使用下面这种简单的方式：\nif ($show_separators) {\n    echo \"<hr>\\n\";\n}\n```\n\n\n\n## 转换为布尔值\n\n要明确的将一个值转换为 boolean ，用 （bool）或者 （boolean）来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。\n\n\n\n## 当转换为 boolean 时，以下值被认为是 FALSE\n\n- 布尔值 false 本身\n- 整型值 0（零）及 -0（零）\n- 浮点型值 0.0（零）-0.0（零）\n- 空字符串，以及字符串 \"0\"\n- 不包括任何元素的数组\n- 特殊类型 NULL（包括尚未赋值的变量） \n- 从空标记生成的 SimpleXML 对象\n\n> 所有其他值都被认为是 TRUE （包括任何资源和nan）\n>\n> Warning ：-1 和其它非零值（不论正负）一样，被认为是 TRUE。\n\n```php\n<?php\nvar_dump((bool) \"\");        // bool(false)\nvar_dump((bool) 1);         // bool(true)\nvar_dump((bool) -2);        // bool(true)\nvar_dump((bool) \"foo\");     // bool(true)\nvar_dump((bool) 2.3e5);     // bool(true)\nvar_dump((bool) array(12)); // bool(true)\nvar_dump((bool) array());   // bool(false)\nvar_dump((bool) \"false\");   // bool(true)\n?>\n```","slug":"CodeLanguage/PHP/PHP基础-数据类型-boolean","published":1,"date":"2021-04-16T13:50:20.270Z","updated":"2021-04-29T10:24:59.100Z","_id":"ckotdh5v9001nkw8z1fqp883a","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>这是最简单的类型，boolean 表达了真值，可以为 true 或者 false</p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>要指定一个布尔值，使用常量 true 或 false 。两个都不区分大小写。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"literal\">True</span>; <span class=\"comment\">// 设置 $foo 为 TRUE</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通常运算符所返回的 boolean 值结果会被传递给控制流程。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// == 是一个操作符，它检测两个变量是否相等，并返回一个布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$action</span> == <span class=\"string\">&quot;show_version&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;The version is 1.23&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样做是不必要的...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$show_separators</span> == <span class=\"literal\">TRUE</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;hr&gt;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...因为可以使用下面这种简单的方式：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$show_separators</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;hr&gt;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"转换为布尔值\"><a href=\"#转换为布尔值\" class=\"headerlink\" title=\"转换为布尔值\"></a>转换为布尔值</h2><p>要明确的将一个值转换为 boolean ，用 （bool）或者 （boolean）来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。</p>\n<h2 id=\"当转换为-boolean-时，以下值被认为是-FALSE\"><a href=\"#当转换为-boolean-时，以下值被认为是-FALSE\" class=\"headerlink\" title=\"当转换为 boolean 时，以下值被认为是 FALSE\"></a>当转换为 boolean 时，以下值被认为是 FALSE</h2><ul>\n<li>布尔值 false 本身</li>\n<li>整型值 0（零）及 -0（零）</li>\n<li>浮点型值 0.0（零）-0.0（零）</li>\n<li>空字符串，以及字符串 “0”</li>\n<li>不包括任何元素的数组</li>\n<li>特殊类型 NULL（包括尚未赋值的变量） </li>\n<li>从空标记生成的 SimpleXML 对象</li>\n</ul>\n<blockquote>\n<p>所有其他值都被认为是 TRUE （包括任何资源和nan）</p>\n<p>Warning ：-1 和其它非零值（不论正负）一样，被认为是 TRUE。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"string\">&quot;&quot;</span>);        <span class=\"comment\">// bool(false)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"number\">1</span>);         <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) -<span class=\"number\">2</span>);        <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"string\">&quot;foo&quot;</span>);     <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"number\">2.3e5</span>);     <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"keyword\">array</span>(<span class=\"number\">12</span>)); <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"keyword\">array</span>());   <span class=\"comment\">// bool(false)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"string\">&quot;false&quot;</span>);   <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是最简单的类型，boolean 表达了真值，可以为 true 或者 false</p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>要指定一个布尔值，使用常量 true 或 false 。两个都不区分大小写。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"literal\">True</span>; <span class=\"comment\">// 设置 $foo 为 TRUE</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通常运算符所返回的 boolean 值结果会被传递给控制流程。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// == 是一个操作符，它检测两个变量是否相等，并返回一个布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$action</span> == <span class=\"string\">&quot;show_version&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;The version is 1.23&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样做是不必要的...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$show_separators</span> == <span class=\"literal\">TRUE</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;hr&gt;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...因为可以使用下面这种简单的方式：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$show_separators</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;hr&gt;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"转换为布尔值\"><a href=\"#转换为布尔值\" class=\"headerlink\" title=\"转换为布尔值\"></a>转换为布尔值</h2><p>要明确的将一个值转换为 boolean ，用 （bool）或者 （boolean）来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。</p>\n<h2 id=\"当转换为-boolean-时，以下值被认为是-FALSE\"><a href=\"#当转换为-boolean-时，以下值被认为是-FALSE\" class=\"headerlink\" title=\"当转换为 boolean 时，以下值被认为是 FALSE\"></a>当转换为 boolean 时，以下值被认为是 FALSE</h2><ul>\n<li>布尔值 false 本身</li>\n<li>整型值 0（零）及 -0（零）</li>\n<li>浮点型值 0.0（零）-0.0（零）</li>\n<li>空字符串，以及字符串 “0”</li>\n<li>不包括任何元素的数组</li>\n<li>特殊类型 NULL（包括尚未赋值的变量） </li>\n<li>从空标记生成的 SimpleXML 对象</li>\n</ul>\n<blockquote>\n<p>所有其他值都被认为是 TRUE （包括任何资源和nan）</p>\n<p>Warning ：-1 和其它非零值（不论正负）一样，被认为是 TRUE。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"string\">&quot;&quot;</span>);        <span class=\"comment\">// bool(false)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"number\">1</span>);         <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) -<span class=\"number\">2</span>);        <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"string\">&quot;foo&quot;</span>);     <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"number\">2.3e5</span>);     <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"keyword\">array</span>(<span class=\"number\">12</span>)); <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"keyword\">array</span>());   <span class=\"comment\">// bool(false)</span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">bool</span>) <span class=\"string\">&quot;false&quot;</span>);   <span class=\"comment\">// bool(true)</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"PHP基础-数据类型-float","abbrlink":4235469996,"_content":"\n浮点型（也叫浮点数，双精度数 double 或实数 real）可以用以下任一语法定义：\n\n```php\n<?php\n$a = 1.234; \n$b = 1.2e3; \n$c = 7E-10;\n$d = 1_234.567; // 从 PHP 7.4.0 开始支持\n?>\n```\n\n浮点数的形式表示（PHP7.4.0之前不支持下划线）：\n\n```php\nLNUM          [0-9]+(_[0-9]+)*\nDNUM          ([0-9]*(_[0-9]+)*[\\.]{LNUM}) | ({LNUM}[\\.][0-9]*(_[0-9]+)*)\nEXPONENT_DNUM (({LNUM} | {DNUM}) [eE][+-]? {LNUM})\n```\n\n## 浮点数的精度\n\n- 浮点数的精度有限，也取决于系统\n- 远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等","source":"_posts/CodeLanguage/PHP/PHP基础-数据类型-float.md","raw":"---\ntitle: PHP基础-数据类型-float\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 4235469996\n---\n\n浮点型（也叫浮点数，双精度数 double 或实数 real）可以用以下任一语法定义：\n\n```php\n<?php\n$a = 1.234; \n$b = 1.2e3; \n$c = 7E-10;\n$d = 1_234.567; // 从 PHP 7.4.0 开始支持\n?>\n```\n\n浮点数的形式表示（PHP7.4.0之前不支持下划线）：\n\n```php\nLNUM          [0-9]+(_[0-9]+)*\nDNUM          ([0-9]*(_[0-9]+)*[\\.]{LNUM}) | ({LNUM}[\\.][0-9]*(_[0-9]+)*)\nEXPONENT_DNUM (({LNUM} | {DNUM}) [eE][+-]? {LNUM})\n```\n\n## 浮点数的精度\n\n- 浮点数的精度有限，也取决于系统\n- 远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等","slug":"CodeLanguage/PHP/PHP基础-数据类型-float","published":1,"date":"2021-04-16T13:50:20.195Z","updated":"2021-04-29T10:24:59.104Z","_id":"ckotdh5va001pkw8zcmczbbjw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>浮点型（也叫浮点数，双精度数 double 或实数 real）可以用以下任一语法定义：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">1.234</span>; </span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"number\">1.2e3</span>; </span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"number\">7E-10</span>;</span><br><span class=\"line\"><span class=\"variable\">$d</span> = <span class=\"number\">1_234.567</span>; <span class=\"comment\">// 从 PHP 7.4.0 开始支持</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>浮点数的形式表示（PHP7.4.0之前不支持下划线）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LNUM          [<span class=\"number\">0</span>-<span class=\"number\">9</span>]+(_[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+)*</span><br><span class=\"line\">DNUM          ([<span class=\"number\">0</span>-<span class=\"number\">9</span>]*(_[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+)*[\\.]&#123;LNUM&#125;) | (&#123;LNUM&#125;[\\.][<span class=\"number\">0</span>-<span class=\"number\">9</span>]*(_[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+)*)</span><br><span class=\"line\">EXPONENT_DNUM ((&#123;LNUM&#125; | &#123;DNUM&#125;) [eE][+-]? &#123;LNUM&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"浮点数的精度\"><a href=\"#浮点数的精度\" class=\"headerlink\" title=\"浮点数的精度\"></a>浮点数的精度</h2><ul>\n<li>浮点数的精度有限，也取决于系统</li>\n<li>远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>浮点型（也叫浮点数，双精度数 double 或实数 real）可以用以下任一语法定义：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">1.234</span>; </span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"number\">1.2e3</span>; </span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"number\">7E-10</span>;</span><br><span class=\"line\"><span class=\"variable\">$d</span> = <span class=\"number\">1_234.567</span>; <span class=\"comment\">// 从 PHP 7.4.0 开始支持</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>浮点数的形式表示（PHP7.4.0之前不支持下划线）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LNUM          [<span class=\"number\">0</span>-<span class=\"number\">9</span>]+(_[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+)*</span><br><span class=\"line\">DNUM          ([<span class=\"number\">0</span>-<span class=\"number\">9</span>]*(_[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+)*[\\.]&#123;LNUM&#125;) | (&#123;LNUM&#125;[\\.][<span class=\"number\">0</span>-<span class=\"number\">9</span>]*(_[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+)*)</span><br><span class=\"line\">EXPONENT_DNUM ((&#123;LNUM&#125; | &#123;DNUM&#125;) [eE][+-]? &#123;LNUM&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"浮点数的精度\"><a href=\"#浮点数的精度\" class=\"headerlink\" title=\"浮点数的精度\"></a>浮点数的精度</h2><ul>\n<li>浮点数的精度有限，也取决于系统</li>\n<li>远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等</li>\n</ul>\n"},{"title":"PHP基础-数据类型-integet","abbrlink":221785719,"_content":"\n\n> integer 是集合 ℤ = {..., -2, -1, 0, 1, 2, ...} 中的某个数。\n\n## 语法\n\n整型值可以使用十进制，十六进制，八进制或二进制表示，前面可以加上可选的符号（- 或者 +）。 可以用 [负运算符](https://www.php.net/manual/zh/language.operators.arithmetic.php) 来表示一个负的integer。\n\n二进制表达的 integer 自 PHP 5.4.0 起可用。\n\n要使用八进制表达，数字前必须加上 `0`（零）。要使用十六进制表达，数字前必须加上 `0x`。要使用二进制表达，数字前必须加上 `0b`。\n\n从 PHP 7.4.0 开始，整型数值可能会包含下划线 (`_`)，为了更好的阅读体验，这些下划线在展示的时候，会被 PHP 过滤掉。\n\n### **Example #1 整数文字表达**\n\n```php\n<?php\n$a = 1234; // 十进制数\n$a = 0123; // 八进制数 (等于十进制 83)\n$a = 0x1A; // 十六进制数 (等于十进制 26)\n$a = 0b11111111; // 二进制数字 (等于十进制 255)\n$a = 1_234_567; // 整型数值 (PHP 7.4.0 以后)\n?>\n```\n\n## 整数溢出\n\n如果给定的一个数超出了 integer 的范围，将会被解释为 float。同样如果执行的运算结果超出了 integer 范围，也会返回 float。\n\n### **Example #2 32 位系统下的整数溢出**\n\n```php\n<?php\n$large_number = 2147483647;\nvar_dump($large_number);                     // int(2147483647)\n\n$large_number = 2147483648;\nvar_dump($large_number);                     // float(2147483648)\n\n$million = 1000000;\n$large_number =  50000 * $million;\nvar_dump($large_number);                     // float(50000000000)\n?>\n```\n\n**Example #3 64 位系统下的整数溢出**\n\n```php\n<?php\n$large_number = 9223372036854775807;\nvar_dump($large_number);                     // int(9223372036854775807)\n\n$large_number = 9223372036854775808;\nvar_dump($large_number);                     // float(9.2233720368548E+18)\n\n$million = 1000000;\n$large_number =  50000000000000 * $million;\nvar_dump($large_number);                     // float(5.0E+19)\n?>\n```\n\n> PHP 中没有整除的运算符。`1/2` 产生出 float `0.5`。 值可以舍弃小数部分，强制转换为 integer，或者使用 [round()](https://www.php.net/manual/zh/function.round.php) 函数可以更好地进行四舍五入。\n>\n> 从 PHP 7.0.0 开始，函数 [intdiv()](https://www.php.net/manual/zh/function.intdiv.php) 可以用于整数除法。\n\n```php\n<?php\nvar_dump(25/7);         // float(3.5714285714286) \nvar_dump((int) (25/7)); // int(3)\nvar_dump(round(25/7));  // float(4) \n?>\n```\n\n## 转换为整形\n\n要明确地将一个值转换为 integer，用 `(int)` 或 `(integer)` 强制转换。不过大多数情况下都不需要强制转换，因为当运算符，函数或流程控制需要一个 integer 参数时，值会自动转换。还可以通过函数 [intval()](https://www.php.net/manual/zh/function.intval.php) 来将一个值转换成整型。\n\n将 resource 转换成 integer 时， 结果会是 PHP 运行时为 resource 分配的唯一资源号。\n\n### 从布尔值转换\n\n**`FALSE`** 将产生出 `0`（零），**`TRUE`** 将产生出 `1`（壹）。\n\n### 从浮点型转换\n\n当从浮点数转换成整数时，将向下取整。\n\n> PHP 7.0.0 起，NaN 和 Infinity 在转换成 integer 时，不再是 undefined 或者依赖于平台，而是都会变成零。\n>\n> 绝不要将未知的分数强制转换为 integer，这样有时会导致不可预料的结果，比如：\n\n```php\n<?php\necho (int) ( (0.1+0.7) * 10 ); // 显示 7!\n?>\n```\n\n### 从字符串转换\n\n当一个字符串被当作一个数值来取值，其结果和类型如下：\n\n如果该字符串没有包含 '.'，'e' 或 'E' 并且其数字值在整型的范围之内（由 **`PHP_INT_MAX`** 所定义），该字符串将被当成 integer 来取值。其它所有情况下都被作为 float 来取值。\n\n该字符串的开始部分决定了它的值。如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。合法数值由可选的正负号，后面跟着一个或多个数字（可能有小数点），再跟着可选的指数部分。指数部分由 'e' 或 'E' 后面跟着一个或多个数字构成。\n\n```php\n<?php\n$foo = 1 + \"10.5\";                // $foo is float (11.5)\n$foo = 1 + \"-1.3e3\";              // $foo is float (-1299)\n$foo = 1 + \"bob-1.3e3\";           // $foo is integer (1)\n$foo = 1 + \"bob3\";                // $foo is integer (1)\n$foo = 1 + \"10 Small Pigs\";       // $foo is integer (11)\n$foo = 4 + \"10.2 Little Piggies\"; // $foo is float (14.2)\n$foo = \"10.0 pigs \" + 1;          // $foo is float (11)\n$foo = \"10.0 pigs \" + 1.0;        // $foo is float (11)     \n?>\n```\n\n### 从NULL转换\n\nNULL 会转换为零 (`0`)\n\n### 从其它类型转换\n\nCaution 没有定义从其它类型转换为整型的行为。*不要*依赖任何现有的行为，因为它会未加通知地改变","source":"_posts/CodeLanguage/PHP/PHP基础-数据类型-integet.md","raw":"---\ntitle: PHP基础-数据类型-integet\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 221785719\n---\n\n\n> integer 是集合 ℤ = {..., -2, -1, 0, 1, 2, ...} 中的某个数。\n\n## 语法\n\n整型值可以使用十进制，十六进制，八进制或二进制表示，前面可以加上可选的符号（- 或者 +）。 可以用 [负运算符](https://www.php.net/manual/zh/language.operators.arithmetic.php) 来表示一个负的integer。\n\n二进制表达的 integer 自 PHP 5.4.0 起可用。\n\n要使用八进制表达，数字前必须加上 `0`（零）。要使用十六进制表达，数字前必须加上 `0x`。要使用二进制表达，数字前必须加上 `0b`。\n\n从 PHP 7.4.0 开始，整型数值可能会包含下划线 (`_`)，为了更好的阅读体验，这些下划线在展示的时候，会被 PHP 过滤掉。\n\n### **Example #1 整数文字表达**\n\n```php\n<?php\n$a = 1234; // 十进制数\n$a = 0123; // 八进制数 (等于十进制 83)\n$a = 0x1A; // 十六进制数 (等于十进制 26)\n$a = 0b11111111; // 二进制数字 (等于十进制 255)\n$a = 1_234_567; // 整型数值 (PHP 7.4.0 以后)\n?>\n```\n\n## 整数溢出\n\n如果给定的一个数超出了 integer 的范围，将会被解释为 float。同样如果执行的运算结果超出了 integer 范围，也会返回 float。\n\n### **Example #2 32 位系统下的整数溢出**\n\n```php\n<?php\n$large_number = 2147483647;\nvar_dump($large_number);                     // int(2147483647)\n\n$large_number = 2147483648;\nvar_dump($large_number);                     // float(2147483648)\n\n$million = 1000000;\n$large_number =  50000 * $million;\nvar_dump($large_number);                     // float(50000000000)\n?>\n```\n\n**Example #3 64 位系统下的整数溢出**\n\n```php\n<?php\n$large_number = 9223372036854775807;\nvar_dump($large_number);                     // int(9223372036854775807)\n\n$large_number = 9223372036854775808;\nvar_dump($large_number);                     // float(9.2233720368548E+18)\n\n$million = 1000000;\n$large_number =  50000000000000 * $million;\nvar_dump($large_number);                     // float(5.0E+19)\n?>\n```\n\n> PHP 中没有整除的运算符。`1/2` 产生出 float `0.5`。 值可以舍弃小数部分，强制转换为 integer，或者使用 [round()](https://www.php.net/manual/zh/function.round.php) 函数可以更好地进行四舍五入。\n>\n> 从 PHP 7.0.0 开始，函数 [intdiv()](https://www.php.net/manual/zh/function.intdiv.php) 可以用于整数除法。\n\n```php\n<?php\nvar_dump(25/7);         // float(3.5714285714286) \nvar_dump((int) (25/7)); // int(3)\nvar_dump(round(25/7));  // float(4) \n?>\n```\n\n## 转换为整形\n\n要明确地将一个值转换为 integer，用 `(int)` 或 `(integer)` 强制转换。不过大多数情况下都不需要强制转换，因为当运算符，函数或流程控制需要一个 integer 参数时，值会自动转换。还可以通过函数 [intval()](https://www.php.net/manual/zh/function.intval.php) 来将一个值转换成整型。\n\n将 resource 转换成 integer 时， 结果会是 PHP 运行时为 resource 分配的唯一资源号。\n\n### 从布尔值转换\n\n**`FALSE`** 将产生出 `0`（零），**`TRUE`** 将产生出 `1`（壹）。\n\n### 从浮点型转换\n\n当从浮点数转换成整数时，将向下取整。\n\n> PHP 7.0.0 起，NaN 和 Infinity 在转换成 integer 时，不再是 undefined 或者依赖于平台，而是都会变成零。\n>\n> 绝不要将未知的分数强制转换为 integer，这样有时会导致不可预料的结果，比如：\n\n```php\n<?php\necho (int) ( (0.1+0.7) * 10 ); // 显示 7!\n?>\n```\n\n### 从字符串转换\n\n当一个字符串被当作一个数值来取值，其结果和类型如下：\n\n如果该字符串没有包含 '.'，'e' 或 'E' 并且其数字值在整型的范围之内（由 **`PHP_INT_MAX`** 所定义），该字符串将被当成 integer 来取值。其它所有情况下都被作为 float 来取值。\n\n该字符串的开始部分决定了它的值。如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。合法数值由可选的正负号，后面跟着一个或多个数字（可能有小数点），再跟着可选的指数部分。指数部分由 'e' 或 'E' 后面跟着一个或多个数字构成。\n\n```php\n<?php\n$foo = 1 + \"10.5\";                // $foo is float (11.5)\n$foo = 1 + \"-1.3e3\";              // $foo is float (-1299)\n$foo = 1 + \"bob-1.3e3\";           // $foo is integer (1)\n$foo = 1 + \"bob3\";                // $foo is integer (1)\n$foo = 1 + \"10 Small Pigs\";       // $foo is integer (11)\n$foo = 4 + \"10.2 Little Piggies\"; // $foo is float (14.2)\n$foo = \"10.0 pigs \" + 1;          // $foo is float (11)\n$foo = \"10.0 pigs \" + 1.0;        // $foo is float (11)     \n?>\n```\n\n### 从NULL转换\n\nNULL 会转换为零 (`0`)\n\n### 从其它类型转换\n\nCaution 没有定义从其它类型转换为整型的行为。*不要*依赖任何现有的行为，因为它会未加通知地改变","slug":"CodeLanguage/PHP/PHP基础-数据类型-integet","published":1,"date":"2021-04-16T13:50:20.205Z","updated":"2021-04-29T10:24:59.103Z","_id":"ckotdh5vc001qkw8zeuo09020","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>integer 是集合 ℤ = {…, -2, -1, 0, 1, 2, …} 中的某个数。</p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>整型值可以使用十进制，十六进制，八进制或二进制表示，前面可以加上可选的符号（- 或者 +）。 可以用 <a href=\"https://www.php.net/manual/zh/language.operators.arithmetic.php\">负运算符</a> 来表示一个负的integer。</p>\n<p>二进制表达的 integer 自 PHP 5.4.0 起可用。</p>\n<p>要使用八进制表达，数字前必须加上 <code>0</code>（零）。要使用十六进制表达，数字前必须加上 <code>0x</code>。要使用二进制表达，数字前必须加上 <code>0b</code>。</p>\n<p>从 PHP 7.4.0 开始，整型数值可能会包含下划线 (<code>_</code>)，为了更好的阅读体验，这些下划线在展示的时候，会被 PHP 过滤掉。</p>\n<h3 id=\"Example-1-整数文字表达\"><a href=\"#Example-1-整数文字表达\" class=\"headerlink\" title=\"Example #1 整数文字表达\"></a><strong>Example #1 整数文字表达</strong></h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">1234</span>; <span class=\"comment\">// 十进制数</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">0123</span>; <span class=\"comment\">// 八进制数 (等于十进制 83)</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">0x1A</span>; <span class=\"comment\">// 十六进制数 (等于十进制 26)</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">0b11111111</span>; <span class=\"comment\">// 二进制数字 (等于十进制 255)</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">1_234_567</span>; <span class=\"comment\">// 整型数值 (PHP 7.4.0 以后)</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整数溢出\"><a href=\"#整数溢出\" class=\"headerlink\" title=\"整数溢出\"></a>整数溢出</h2><p>如果给定的一个数超出了 integer 的范围，将会被解释为 float。同样如果执行的运算结果超出了 integer 范围，也会返回 float。</p>\n<h3 id=\"Example-2-32-位系统下的整数溢出\"><a href=\"#Example-2-32-位系统下的整数溢出\" class=\"headerlink\" title=\"Example #2 32 位系统下的整数溢出\"></a><strong>Example #2 32 位系统下的整数溢出</strong></h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$large_number</span> = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// int(2147483647)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$large_number</span> = <span class=\"number\">2147483648</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// float(2147483648)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$million</span> = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"><span class=\"variable\">$large_number</span> =  <span class=\"number\">50000</span> * <span class=\"variable\">$million</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// float(50000000000)</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Example #3 64 位系统下的整数溢出</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$large_number</span> = <span class=\"number\">9223372036854775807</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// int(9223372036854775807)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$large_number</span> = <span class=\"number\">9223372036854775808</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// float(9.2233720368548E+18)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$million</span> = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"><span class=\"variable\">$large_number</span> =  <span class=\"number\">50000000000000</span> * <span class=\"variable\">$million</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// float(5.0E+19)</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PHP 中没有整除的运算符。<code>1/2</code> 产生出 float <code>0.5</code>。 值可以舍弃小数部分，强制转换为 integer，或者使用 <a href=\"https://www.php.net/manual/zh/function.round.php\">round()</a> 函数可以更好地进行四舍五入。</p>\n<p>从 PHP 7.0.0 开始，函数 <a href=\"https://www.php.net/manual/zh/function.intdiv.php\">intdiv()</a> 可以用于整数除法。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(<span class=\"number\">25</span>/<span class=\"number\">7</span>);         <span class=\"comment\">// float(3.5714285714286) </span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">int</span>) (<span class=\"number\">25</span>/<span class=\"number\">7</span>)); <span class=\"comment\">// int(3)</span></span><br><span class=\"line\">var_dump(round(<span class=\"number\">25</span>/<span class=\"number\">7</span>));  <span class=\"comment\">// float(4) </span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转换为整形\"><a href=\"#转换为整形\" class=\"headerlink\" title=\"转换为整形\"></a>转换为整形</h2><p>要明确地将一个值转换为 integer，用 <code>(int)</code> 或 <code>(integer)</code> 强制转换。不过大多数情况下都不需要强制转换，因为当运算符，函数或流程控制需要一个 integer 参数时，值会自动转换。还可以通过函数 <a href=\"https://www.php.net/manual/zh/function.intval.php\">intval()</a> 来将一个值转换成整型。</p>\n<p>将 resource 转换成 integer 时， 结果会是 PHP 运行时为 resource 分配的唯一资源号。</p>\n<h3 id=\"从布尔值转换\"><a href=\"#从布尔值转换\" class=\"headerlink\" title=\"从布尔值转换\"></a>从布尔值转换</h3><p><strong><code>FALSE</code></strong> 将产生出 <code>0</code>（零），**<code>TRUE</code>** 将产生出 <code>1</code>（壹）。</p>\n<h3 id=\"从浮点型转换\"><a href=\"#从浮点型转换\" class=\"headerlink\" title=\"从浮点型转换\"></a>从浮点型转换</h3><p>当从浮点数转换成整数时，将向下取整。</p>\n<blockquote>\n<p>PHP 7.0.0 起，NaN 和 Infinity 在转换成 integer 时，不再是 undefined 或者依赖于平台，而是都会变成零。</p>\n<p>绝不要将未知的分数强制转换为 integer，这样有时会导致不可预料的结果，比如：</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"keyword\">int</span>) ( (<span class=\"number\">0.1</span>+<span class=\"number\">0.7</span>) * <span class=\"number\">10</span> ); <span class=\"comment\">// 显示 7!</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从字符串转换\"><a href=\"#从字符串转换\" class=\"headerlink\" title=\"从字符串转换\"></a>从字符串转换</h3><p>当一个字符串被当作一个数值来取值，其结果和类型如下：</p>\n<p>如果该字符串没有包含 ‘.’，’e’ 或 ‘E’ 并且其数字值在整型的范围之内（由 <strong><code>PHP_INT_MAX</code></strong> 所定义），该字符串将被当成 integer 来取值。其它所有情况下都被作为 float 来取值。</p>\n<p>该字符串的开始部分决定了它的值。如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。合法数值由可选的正负号，后面跟着一个或多个数字（可能有小数点），再跟着可选的指数部分。指数部分由 ‘e’ 或 ‘E’ 后面跟着一个或多个数字构成。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;10.5&quot;</span>;                <span class=\"comment\">// $foo is float (11.5)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;-1.3e3&quot;</span>;              <span class=\"comment\">// $foo is float (-1299)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;bob-1.3e3&quot;</span>;           <span class=\"comment\">// $foo is integer (1)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;bob3&quot;</span>;                <span class=\"comment\">// $foo is integer (1)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;10 Small Pigs&quot;</span>;       <span class=\"comment\">// $foo is integer (11)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">4</span> + <span class=\"string\">&quot;10.2 Little Piggies&quot;</span>; <span class=\"comment\">// $foo is float (14.2)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"string\">&quot;10.0 pigs &quot;</span> + <span class=\"number\">1</span>;          <span class=\"comment\">// $foo is float (11)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"string\">&quot;10.0 pigs &quot;</span> + <span class=\"number\">1.0</span>;        <span class=\"comment\">// $foo is float (11)     </span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从NULL转换\"><a href=\"#从NULL转换\" class=\"headerlink\" title=\"从NULL转换\"></a>从NULL转换</h3><p>NULL 会转换为零 (<code>0</code>)</p>\n<h3 id=\"从其它类型转换\"><a href=\"#从其它类型转换\" class=\"headerlink\" title=\"从其它类型转换\"></a>从其它类型转换</h3><p>Caution 没有定义从其它类型转换为整型的行为。<em>不要</em>依赖任何现有的行为，因为它会未加通知地改变</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>integer 是集合 ℤ = {…, -2, -1, 0, 1, 2, …} 中的某个数。</p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>整型值可以使用十进制，十六进制，八进制或二进制表示，前面可以加上可选的符号（- 或者 +）。 可以用 <a href=\"https://www.php.net/manual/zh/language.operators.arithmetic.php\">负运算符</a> 来表示一个负的integer。</p>\n<p>二进制表达的 integer 自 PHP 5.4.0 起可用。</p>\n<p>要使用八进制表达，数字前必须加上 <code>0</code>（零）。要使用十六进制表达，数字前必须加上 <code>0x</code>。要使用二进制表达，数字前必须加上 <code>0b</code>。</p>\n<p>从 PHP 7.4.0 开始，整型数值可能会包含下划线 (<code>_</code>)，为了更好的阅读体验，这些下划线在展示的时候，会被 PHP 过滤掉。</p>\n<h3 id=\"Example-1-整数文字表达\"><a href=\"#Example-1-整数文字表达\" class=\"headerlink\" title=\"Example #1 整数文字表达\"></a><strong>Example #1 整数文字表达</strong></h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">1234</span>; <span class=\"comment\">// 十进制数</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">0123</span>; <span class=\"comment\">// 八进制数 (等于十进制 83)</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">0x1A</span>; <span class=\"comment\">// 十六进制数 (等于十进制 26)</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">0b11111111</span>; <span class=\"comment\">// 二进制数字 (等于十进制 255)</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"number\">1_234_567</span>; <span class=\"comment\">// 整型数值 (PHP 7.4.0 以后)</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整数溢出\"><a href=\"#整数溢出\" class=\"headerlink\" title=\"整数溢出\"></a>整数溢出</h2><p>如果给定的一个数超出了 integer 的范围，将会被解释为 float。同样如果执行的运算结果超出了 integer 范围，也会返回 float。</p>\n<h3 id=\"Example-2-32-位系统下的整数溢出\"><a href=\"#Example-2-32-位系统下的整数溢出\" class=\"headerlink\" title=\"Example #2 32 位系统下的整数溢出\"></a><strong>Example #2 32 位系统下的整数溢出</strong></h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$large_number</span> = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// int(2147483647)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$large_number</span> = <span class=\"number\">2147483648</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// float(2147483648)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$million</span> = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"><span class=\"variable\">$large_number</span> =  <span class=\"number\">50000</span> * <span class=\"variable\">$million</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// float(50000000000)</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Example #3 64 位系统下的整数溢出</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$large_number</span> = <span class=\"number\">9223372036854775807</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// int(9223372036854775807)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$large_number</span> = <span class=\"number\">9223372036854775808</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// float(9.2233720368548E+18)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$million</span> = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"><span class=\"variable\">$large_number</span> =  <span class=\"number\">50000000000000</span> * <span class=\"variable\">$million</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$large_number</span>);                     <span class=\"comment\">// float(5.0E+19)</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PHP 中没有整除的运算符。<code>1/2</code> 产生出 float <code>0.5</code>。 值可以舍弃小数部分，强制转换为 integer，或者使用 <a href=\"https://www.php.net/manual/zh/function.round.php\">round()</a> 函数可以更好地进行四舍五入。</p>\n<p>从 PHP 7.0.0 开始，函数 <a href=\"https://www.php.net/manual/zh/function.intdiv.php\">intdiv()</a> 可以用于整数除法。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">var_dump(<span class=\"number\">25</span>/<span class=\"number\">7</span>);         <span class=\"comment\">// float(3.5714285714286) </span></span><br><span class=\"line\">var_dump((<span class=\"keyword\">int</span>) (<span class=\"number\">25</span>/<span class=\"number\">7</span>)); <span class=\"comment\">// int(3)</span></span><br><span class=\"line\">var_dump(round(<span class=\"number\">25</span>/<span class=\"number\">7</span>));  <span class=\"comment\">// float(4) </span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转换为整形\"><a href=\"#转换为整形\" class=\"headerlink\" title=\"转换为整形\"></a>转换为整形</h2><p>要明确地将一个值转换为 integer，用 <code>(int)</code> 或 <code>(integer)</code> 强制转换。不过大多数情况下都不需要强制转换，因为当运算符，函数或流程控制需要一个 integer 参数时，值会自动转换。还可以通过函数 <a href=\"https://www.php.net/manual/zh/function.intval.php\">intval()</a> 来将一个值转换成整型。</p>\n<p>将 resource 转换成 integer 时， 结果会是 PHP 运行时为 resource 分配的唯一资源号。</p>\n<h3 id=\"从布尔值转换\"><a href=\"#从布尔值转换\" class=\"headerlink\" title=\"从布尔值转换\"></a>从布尔值转换</h3><p><strong><code>FALSE</code></strong> 将产生出 <code>0</code>（零），**<code>TRUE</code>** 将产生出 <code>1</code>（壹）。</p>\n<h3 id=\"从浮点型转换\"><a href=\"#从浮点型转换\" class=\"headerlink\" title=\"从浮点型转换\"></a>从浮点型转换</h3><p>当从浮点数转换成整数时，将向下取整。</p>\n<blockquote>\n<p>PHP 7.0.0 起，NaN 和 Infinity 在转换成 integer 时，不再是 undefined 或者依赖于平台，而是都会变成零。</p>\n<p>绝不要将未知的分数强制转换为 integer，这样有时会导致不可预料的结果，比如：</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"keyword\">int</span>) ( (<span class=\"number\">0.1</span>+<span class=\"number\">0.7</span>) * <span class=\"number\">10</span> ); <span class=\"comment\">// 显示 7!</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从字符串转换\"><a href=\"#从字符串转换\" class=\"headerlink\" title=\"从字符串转换\"></a>从字符串转换</h3><p>当一个字符串被当作一个数值来取值，其结果和类型如下：</p>\n<p>如果该字符串没有包含 ‘.’，’e’ 或 ‘E’ 并且其数字值在整型的范围之内（由 <strong><code>PHP_INT_MAX</code></strong> 所定义），该字符串将被当成 integer 来取值。其它所有情况下都被作为 float 来取值。</p>\n<p>该字符串的开始部分决定了它的值。如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。合法数值由可选的正负号，后面跟着一个或多个数字（可能有小数点），再跟着可选的指数部分。指数部分由 ‘e’ 或 ‘E’ 后面跟着一个或多个数字构成。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;10.5&quot;</span>;                <span class=\"comment\">// $foo is float (11.5)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;-1.3e3&quot;</span>;              <span class=\"comment\">// $foo is float (-1299)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;bob-1.3e3&quot;</span>;           <span class=\"comment\">// $foo is integer (1)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;bob3&quot;</span>;                <span class=\"comment\">// $foo is integer (1)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">1</span> + <span class=\"string\">&quot;10 Small Pigs&quot;</span>;       <span class=\"comment\">// $foo is integer (11)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"number\">4</span> + <span class=\"string\">&quot;10.2 Little Piggies&quot;</span>; <span class=\"comment\">// $foo is float (14.2)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"string\">&quot;10.0 pigs &quot;</span> + <span class=\"number\">1</span>;          <span class=\"comment\">// $foo is float (11)</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"string\">&quot;10.0 pigs &quot;</span> + <span class=\"number\">1.0</span>;        <span class=\"comment\">// $foo is float (11)     </span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从NULL转换\"><a href=\"#从NULL转换\" class=\"headerlink\" title=\"从NULL转换\"></a>从NULL转换</h3><p>NULL 会转换为零 (<code>0</code>)</p>\n<h3 id=\"从其它类型转换\"><a href=\"#从其它类型转换\" class=\"headerlink\" title=\"从其它类型转换\"></a>从其它类型转换</h3><p>Caution 没有定义从其它类型转换为整型的行为。<em>不要</em>依赖任何现有的行为，因为它会未加通知地改变</p>\n"},{"title":"PHP基础-数据类型-string","abbrlink":3247369179,"_content":"\n一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。\n\n这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode。\n\n> string 最大可以达到 2GB。\n\n## 语法\n\n一个字符串可以用4种方式表达：\n\n- 单引号\n- 双引号\n- heredoc 语法结构\n- nowdoc 语法结构（自 php5.5.0 起）\n\n### 单引号\n\n定义给个字符串的最简单的方法是用单引号把它包围起来。\n\n要表达一个单引号自身，需要在它的前边加个反斜线（\\）来转义。\n\n要表达一个反斜线自身，则用两个反斜线（\\\\）。\n\n其他任何方式的反斜线都会被当成反斜线本身；也就是说如果想使用其他转义序列，例如 \\r 或者 \\n，并不代表任何特殊含义，就单纯是这两个字符本身。\n\n> 不像 [双引号](https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.double) 和 [heredoc](https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.heredoc) 语法结构，在单引号字符串中的 [变量](https://www.php.net/manual/zh/language.variables.php) 和特殊字符的转义序列将*不会*被替换。\n\n```php\n<?php\necho 'this is a simple string';\n\n// 可以录入多行\necho 'You can also have embedded newlines in \nstrings this way as it is\nokay to do';\n\n// 输出： Arnold once said: \"I'll be back\"\necho 'Arnold once said: \"I\\'ll be back\"';\n\n// 输出： You deleted C:\\*.*?\necho 'You deleted C:\\\\*.*?';\n\n// 输出： You deleted C:\\*.*?\necho 'You deleted C:\\*.*?';\n\n// 输出： This will not expand: \\n a newline\necho 'This will not expand: \\n a newline';\n\n// 输出： Variables do not $expand $either\necho 'Variables do not $expand $either';\n?>\n```\n\n### 双引号\n\n如果字符串是包围在双引号（\"\"）中，PHP 将对一些特殊的字符进行解析。\n\n| 序列                 | 含义                                                         |\n| :------------------- | ------------------------------------------------------------ |\n| `\\n`                 | 换行（ASCII 字符集中的 LF 或 0x0A (10)）                     |\n| `\\r`                 | 回车（ASCII 字符集中的 CR 或 0x0D (13)）                     |\n| `\\t`                 | 水平制表符（ASCII 字符集中的 HT 或 0x09 (9)）                |\n| `\\v`                 | 垂直制表符（ASCII 字符集中的 VT 或 0x0B (11)）（自 PHP 5.2.5 起） |\n| `\\e`                 | Escape（ASCII 字符集中的 ESC 或 0x1B (27)）（自 PHP 5.4.0 起） |\n| `\\f`                 | 换页（ASCII 字符集中的 FF 或 0x0C (12)）（自 PHP 5.2.5 起）  |\n| `\\\\`                 | 反斜线                                                       |\n| `\\$`                 | 美元标记                                                     |\n| `\\\"`                 | 双引号                                                       |\n| `\\[0-7]{1,3}`        | 符合该正则表达式序列的是一个以八进制方式来表达的字符         |\n| `\\x[0-9A-Fa-f]{1,2}` | 符合该正则表达式序列的是一个以十六进制方式来表达的字符       |\n\n和单引号字符串一样，转义任何其他字符串都会导致反斜线被显示出来。php5.1.1以前，`\\{$var}` 中的反斜线还不会被显示出来。\n\n用双引号定义的字符串最重要的特征是就是变量会被解析。\n\n### Heredoc 结构\n\n第三种表达字符串的方法是用 heredoc 句法结构：`<<<`。在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。\n\n结束时所引用的标识符*必须*在该行的第一列，而且，标识符的命名也要像其它标签一样遵守 PHP 的规则：只能包含字母、数字和下划线，并且必须以字母和下划线作为开头。","source":"_posts/CodeLanguage/PHP/PHP基础-数据类型-string.md","raw":"---\ntitle: PHP基础-数据类型-string\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 3247369179\n---\n\n一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。\n\n这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode。\n\n> string 最大可以达到 2GB。\n\n## 语法\n\n一个字符串可以用4种方式表达：\n\n- 单引号\n- 双引号\n- heredoc 语法结构\n- nowdoc 语法结构（自 php5.5.0 起）\n\n### 单引号\n\n定义给个字符串的最简单的方法是用单引号把它包围起来。\n\n要表达一个单引号自身，需要在它的前边加个反斜线（\\）来转义。\n\n要表达一个反斜线自身，则用两个反斜线（\\\\）。\n\n其他任何方式的反斜线都会被当成反斜线本身；也就是说如果想使用其他转义序列，例如 \\r 或者 \\n，并不代表任何特殊含义，就单纯是这两个字符本身。\n\n> 不像 [双引号](https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.double) 和 [heredoc](https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.heredoc) 语法结构，在单引号字符串中的 [变量](https://www.php.net/manual/zh/language.variables.php) 和特殊字符的转义序列将*不会*被替换。\n\n```php\n<?php\necho 'this is a simple string';\n\n// 可以录入多行\necho 'You can also have embedded newlines in \nstrings this way as it is\nokay to do';\n\n// 输出： Arnold once said: \"I'll be back\"\necho 'Arnold once said: \"I\\'ll be back\"';\n\n// 输出： You deleted C:\\*.*?\necho 'You deleted C:\\\\*.*?';\n\n// 输出： You deleted C:\\*.*?\necho 'You deleted C:\\*.*?';\n\n// 输出： This will not expand: \\n a newline\necho 'This will not expand: \\n a newline';\n\n// 输出： Variables do not $expand $either\necho 'Variables do not $expand $either';\n?>\n```\n\n### 双引号\n\n如果字符串是包围在双引号（\"\"）中，PHP 将对一些特殊的字符进行解析。\n\n| 序列                 | 含义                                                         |\n| :------------------- | ------------------------------------------------------------ |\n| `\\n`                 | 换行（ASCII 字符集中的 LF 或 0x0A (10)）                     |\n| `\\r`                 | 回车（ASCII 字符集中的 CR 或 0x0D (13)）                     |\n| `\\t`                 | 水平制表符（ASCII 字符集中的 HT 或 0x09 (9)）                |\n| `\\v`                 | 垂直制表符（ASCII 字符集中的 VT 或 0x0B (11)）（自 PHP 5.2.5 起） |\n| `\\e`                 | Escape（ASCII 字符集中的 ESC 或 0x1B (27)）（自 PHP 5.4.0 起） |\n| `\\f`                 | 换页（ASCII 字符集中的 FF 或 0x0C (12)）（自 PHP 5.2.5 起）  |\n| `\\\\`                 | 反斜线                                                       |\n| `\\$`                 | 美元标记                                                     |\n| `\\\"`                 | 双引号                                                       |\n| `\\[0-7]{1,3}`        | 符合该正则表达式序列的是一个以八进制方式来表达的字符         |\n| `\\x[0-9A-Fa-f]{1,2}` | 符合该正则表达式序列的是一个以十六进制方式来表达的字符       |\n\n和单引号字符串一样，转义任何其他字符串都会导致反斜线被显示出来。php5.1.1以前，`\\{$var}` 中的反斜线还不会被显示出来。\n\n用双引号定义的字符串最重要的特征是就是变量会被解析。\n\n### Heredoc 结构\n\n第三种表达字符串的方法是用 heredoc 句法结构：`<<<`。在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。\n\n结束时所引用的标识符*必须*在该行的第一列，而且，标识符的命名也要像其它标签一样遵守 PHP 的规则：只能包含字母、数字和下划线，并且必须以字母和下划线作为开头。","slug":"CodeLanguage/PHP/PHP基础-数据类型-string","published":1,"date":"2021-04-16T13:50:20.181Z","updated":"2021-04-29T10:24:59.107Z","_id":"ckotdh5ve001skw8z6fj94dj2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。</p>\n<p>这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode。</p>\n<blockquote>\n<p>string 最大可以达到 2GB。</p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>一个字符串可以用4种方式表达：</p>\n<ul>\n<li>单引号</li>\n<li>双引号</li>\n<li>heredoc 语法结构</li>\n<li>nowdoc 语法结构（自 php5.5.0 起）</li>\n</ul>\n<h3 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h3><p>定义给个字符串的最简单的方法是用单引号把它包围起来。</p>\n<p>要表达一个单引号自身，需要在它的前边加个反斜线（\\）来转义。</p>\n<p>要表达一个反斜线自身，则用两个反斜线（\\）。</p>\n<p>其他任何方式的反斜线都会被当成反斜线本身；也就是说如果想使用其他转义序列，例如 \\r 或者 \\n，并不代表任何特殊含义，就单纯是这两个字符本身。</p>\n<blockquote>\n<p>不像 <a href=\"https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.double\">双引号</a> 和 <a href=\"https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.heredoc\">heredoc</a> 语法结构，在单引号字符串中的 <a href=\"https://www.php.net/manual/zh/language.variables.php\">变量</a> 和特殊字符的转义序列将<em>不会</em>被替换。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;this is a simple string&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以录入多行</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You can also have embedded newlines in </span></span><br><span class=\"line\"><span class=\"string\">strings this way as it is</span></span><br><span class=\"line\"><span class=\"string\">okay to do&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： Arnold once said: &quot;I&#x27;ll be back&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Arnold once said: &quot;I\\&#x27;ll be back&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： You deleted C:\\*.*?</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You deleted C:\\\\*.*?&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： You deleted C:\\*.*?</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You deleted C:\\*.*?&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： This will not expand: \\n a newline</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This will not expand: \\n a newline&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： Variables do not $expand $either</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Variables do not $expand $either&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h3><p>如果字符串是包围在双引号（””）中，PHP 将对一些特殊的字符进行解析。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>\\n</code></td>\n<td>换行（ASCII 字符集中的 LF 或 0x0A (10)）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\r</code></td>\n<td>回车（ASCII 字符集中的 CR 或 0x0D (13)）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\t</code></td>\n<td>水平制表符（ASCII 字符集中的 HT 或 0x09 (9)）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\v</code></td>\n<td>垂直制表符（ASCII 字符集中的 VT 或 0x0B (11)）（自 PHP 5.2.5 起）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\e</code></td>\n<td>Escape（ASCII 字符集中的 ESC 或 0x1B (27)）（自 PHP 5.4.0 起）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\f</code></td>\n<td>换页（ASCII 字符集中的 FF 或 0x0C (12)）（自 PHP 5.2.5 起）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\\\</code></td>\n<td>反斜线</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\$</code></td>\n<td>美元标记</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\&quot;</code></td>\n<td>双引号</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\[0-7]&#123;1,3&#125;</code></td>\n<td>符合该正则表达式序列的是一个以八进制方式来表达的字符</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\x[0-9A-Fa-f]&#123;1,2&#125;</code></td>\n<td>符合该正则表达式序列的是一个以十六进制方式来表达的字符</td>\n</tr>\n</tbody></table>\n<p>和单引号字符串一样，转义任何其他字符串都会导致反斜线被显示出来。php5.1.1以前，<code>\\&#123;$var&#125;</code> 中的反斜线还不会被显示出来。</p>\n<p>用双引号定义的字符串最重要的特征是就是变量会被解析。</p>\n<h3 id=\"Heredoc-结构\"><a href=\"#Heredoc-结构\" class=\"headerlink\" title=\"Heredoc 结构\"></a>Heredoc 结构</h3><p>第三种表达字符串的方法是用 heredoc 句法结构：<code>&lt;&lt;&lt;</code>。在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。</p>\n<p>结束时所引用的标识符<em>必须</em>在该行的第一列，而且，标识符的命名也要像其它标签一样遵守 PHP 的规则：只能包含字母、数字和下划线，并且必须以字母和下划线作为开头。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。</p>\n<p>这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode。</p>\n<blockquote>\n<p>string 最大可以达到 2GB。</p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>一个字符串可以用4种方式表达：</p>\n<ul>\n<li>单引号</li>\n<li>双引号</li>\n<li>heredoc 语法结构</li>\n<li>nowdoc 语法结构（自 php5.5.0 起）</li>\n</ul>\n<h3 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h3><p>定义给个字符串的最简单的方法是用单引号把它包围起来。</p>\n<p>要表达一个单引号自身，需要在它的前边加个反斜线（\\）来转义。</p>\n<p>要表达一个反斜线自身，则用两个反斜线（\\）。</p>\n<p>其他任何方式的反斜线都会被当成反斜线本身；也就是说如果想使用其他转义序列，例如 \\r 或者 \\n，并不代表任何特殊含义，就单纯是这两个字符本身。</p>\n<blockquote>\n<p>不像 <a href=\"https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.double\">双引号</a> 和 <a href=\"https://www.php.net/manual/zh/language.types.string.php#language.types.string.syntax.heredoc\">heredoc</a> 语法结构，在单引号字符串中的 <a href=\"https://www.php.net/manual/zh/language.variables.php\">变量</a> 和特殊字符的转义序列将<em>不会</em>被替换。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;this is a simple string&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以录入多行</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You can also have embedded newlines in </span></span><br><span class=\"line\"><span class=\"string\">strings this way as it is</span></span><br><span class=\"line\"><span class=\"string\">okay to do&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： Arnold once said: &quot;I&#x27;ll be back&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Arnold once said: &quot;I\\&#x27;ll be back&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： You deleted C:\\*.*?</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You deleted C:\\\\*.*?&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： You deleted C:\\*.*?</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You deleted C:\\*.*?&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： This will not expand: \\n a newline</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;This will not expand: \\n a newline&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出： Variables do not $expand $either</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Variables do not $expand $either&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h3><p>如果字符串是包围在双引号（””）中，PHP 将对一些特殊的字符进行解析。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>\\n</code></td>\n<td>换行（ASCII 字符集中的 LF 或 0x0A (10)）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\r</code></td>\n<td>回车（ASCII 字符集中的 CR 或 0x0D (13)）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\t</code></td>\n<td>水平制表符（ASCII 字符集中的 HT 或 0x09 (9)）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\v</code></td>\n<td>垂直制表符（ASCII 字符集中的 VT 或 0x0B (11)）（自 PHP 5.2.5 起）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\e</code></td>\n<td>Escape（ASCII 字符集中的 ESC 或 0x1B (27)）（自 PHP 5.4.0 起）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\f</code></td>\n<td>换页（ASCII 字符集中的 FF 或 0x0C (12)）（自 PHP 5.2.5 起）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\\\</code></td>\n<td>反斜线</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\$</code></td>\n<td>美元标记</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\&quot;</code></td>\n<td>双引号</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\[0-7]&#123;1,3&#125;</code></td>\n<td>符合该正则表达式序列的是一个以八进制方式来表达的字符</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\x[0-9A-Fa-f]&#123;1,2&#125;</code></td>\n<td>符合该正则表达式序列的是一个以十六进制方式来表达的字符</td>\n</tr>\n</tbody></table>\n<p>和单引号字符串一样，转义任何其他字符串都会导致反斜线被显示出来。php5.1.1以前，<code>\\&#123;$var&#125;</code> 中的反斜线还不会被显示出来。</p>\n<p>用双引号定义的字符串最重要的特征是就是变量会被解析。</p>\n<h3 id=\"Heredoc-结构\"><a href=\"#Heredoc-结构\" class=\"headerlink\" title=\"Heredoc 结构\"></a>Heredoc 结构</h3><p>第三种表达字符串的方法是用 heredoc 句法结构：<code>&lt;&lt;&lt;</code>。在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。</p>\n<p>结束时所引用的标识符<em>必须</em>在该行的第一列，而且，标识符的命名也要像其它标签一样遵守 PHP 的规则：只能包含字母、数字和下划线，并且必须以字母和下划线作为开头。</p>\n"},{"title":"PHP基础-数据类型-string和int比较","abbrlink":740536292,"_content":"\n> 在php中，string 类型和 int 类型相比较，string 类型的值会被转为 int 类型，实质上是两个 int 类型的数值相互比较。\n\n## 代码：\n\n```php\n<?php\n$a = 'c';\n$b = 0;\nvar_dump($a == $b);//输出true\n$c = 1;\nvar_dump($a == $c);//输出false\n$d = true;\nvar_dump($a == $d);//输出true\n$c = false;\nvar_dump($a == $c);//输出false\n```\n\n\n\n## 从以上结果发现：\n\n- string 类型的值和 int 类型的值比较，会被转为 int 类型的 0，也就是 true\n- string 类型的值和 bool 类型的值比较，会被转为 bool 类型的 true ","source":"_posts/CodeLanguage/PHP/PHP基础-数据类型-string和int比较.md","raw":"---\ntitle: PHP基础-数据类型-string和int比较\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 740536292\n---\n\n> 在php中，string 类型和 int 类型相比较，string 类型的值会被转为 int 类型，实质上是两个 int 类型的数值相互比较。\n\n## 代码：\n\n```php\n<?php\n$a = 'c';\n$b = 0;\nvar_dump($a == $b);//输出true\n$c = 1;\nvar_dump($a == $c);//输出false\n$d = true;\nvar_dump($a == $d);//输出true\n$c = false;\nvar_dump($a == $c);//输出false\n```\n\n\n\n## 从以上结果发现：\n\n- string 类型的值和 int 类型的值比较，会被转为 int 类型的 0，也就是 true\n- string 类型的值和 bool 类型的值比较，会被转为 bool 类型的 true ","slug":"CodeLanguage/PHP/PHP基础-数据类型-string和int比较","published":1,"date":"2021-04-16T13:50:20.185Z","updated":"2021-04-29T10:24:59.106Z","_id":"ckotdh5vf001tkw8zcnl04dk3","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>在php中，string 类型和 int 类型相比较，string 类型的值会被转为 int 类型，实质上是两个 int 类型的数值相互比较。</p>\n</blockquote>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&#x27;c&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$a</span> == <span class=\"variable\">$b</span>);<span class=\"comment\">//输出true</span></span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$a</span> == <span class=\"variable\">$c</span>);<span class=\"comment\">//输出false</span></span><br><span class=\"line\"><span class=\"variable\">$d</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$a</span> == <span class=\"variable\">$d</span>);<span class=\"comment\">//输出true</span></span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$a</span> == <span class=\"variable\">$c</span>);<span class=\"comment\">//输出false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"从以上结果发现：\"><a href=\"#从以上结果发现：\" class=\"headerlink\" title=\"从以上结果发现：\"></a>从以上结果发现：</h2><ul>\n<li>string 类型的值和 int 类型的值比较，会被转为 int 类型的 0，也就是 true</li>\n<li>string 类型的值和 bool 类型的值比较，会被转为 bool 类型的 true </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在php中，string 类型和 int 类型相比较，string 类型的值会被转为 int 类型，实质上是两个 int 类型的数值相互比较。</p>\n</blockquote>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&#x27;c&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$a</span> == <span class=\"variable\">$b</span>);<span class=\"comment\">//输出true</span></span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$a</span> == <span class=\"variable\">$c</span>);<span class=\"comment\">//输出false</span></span><br><span class=\"line\"><span class=\"variable\">$d</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$a</span> == <span class=\"variable\">$d</span>);<span class=\"comment\">//输出true</span></span><br><span class=\"line\"><span class=\"variable\">$c</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">var_dump(<span class=\"variable\">$a</span> == <span class=\"variable\">$c</span>);<span class=\"comment\">//输出false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"从以上结果发现：\"><a href=\"#从以上结果发现：\" class=\"headerlink\" title=\"从以上结果发现：\"></a>从以上结果发现：</h2><ul>\n<li>string 类型的值和 int 类型的值比较，会被转为 int 类型的 0，也就是 true</li>\n<li>string 类型的值和 bool 类型的值比较，会被转为 bool 类型的 true </li>\n</ul>\n"},{"title":"PHP基础-数据类型","abbrlink":2518559853,"_content":"\n## PHP支持10中原始数据类型\n\n### 四种标量类型：\n\n- boolean（布尔型）\n- integer（整型）\n- float（浮点型，也称作 double）\n- string（字符串）\n\n### 四种复合型：\n\n- array（数组）\n- object（对象）\n- callable（可调用）\n- iterable（可迭代）\n\n### 两种特殊类型：\n\n- resource（资源）\n- NULL（无类型）\n\n\n\n### 为了确保代码的易读性，还有伪类型：\n\n- mixed（混合类型）\n- number（数字类型）\n- array|object（数组|对象类型）\n- void（无类型）\n\n> 特殊的类型有 double（双精度），实际上 double 和 float 是相同的，由于历史原因，这两个名称同时存在。","source":"_posts/CodeLanguage/PHP/PHP基础-数据类型.md","raw":"---\ntitle: PHP基础-数据类型\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 2518559853\n---\n\n## PHP支持10中原始数据类型\n\n### 四种标量类型：\n\n- boolean（布尔型）\n- integer（整型）\n- float（浮点型，也称作 double）\n- string（字符串）\n\n### 四种复合型：\n\n- array（数组）\n- object（对象）\n- callable（可调用）\n- iterable（可迭代）\n\n### 两种特殊类型：\n\n- resource（资源）\n- NULL（无类型）\n\n\n\n### 为了确保代码的易读性，还有伪类型：\n\n- mixed（混合类型）\n- number（数字类型）\n- array|object（数组|对象类型）\n- void（无类型）\n\n> 特殊的类型有 double（双精度），实际上 double 和 float 是相同的，由于历史原因，这两个名称同时存在。","slug":"CodeLanguage/PHP/PHP基础-数据类型","published":1,"date":"2021-04-16T13:50:20.259Z","updated":"2021-04-29T10:24:59.122Z","_id":"ckotdh5vh001vkw8zb41p8d0o","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"PHP支持10中原始数据类型\"><a href=\"#PHP支持10中原始数据类型\" class=\"headerlink\" title=\"PHP支持10中原始数据类型\"></a>PHP支持10中原始数据类型</h2><h3 id=\"四种标量类型：\"><a href=\"#四种标量类型：\" class=\"headerlink\" title=\"四种标量类型：\"></a>四种标量类型：</h3><ul>\n<li>boolean（布尔型）</li>\n<li>integer（整型）</li>\n<li>float（浮点型，也称作 double）</li>\n<li>string（字符串）</li>\n</ul>\n<h3 id=\"四种复合型：\"><a href=\"#四种复合型：\" class=\"headerlink\" title=\"四种复合型：\"></a>四种复合型：</h3><ul>\n<li>array（数组）</li>\n<li>object（对象）</li>\n<li>callable（可调用）</li>\n<li>iterable（可迭代）</li>\n</ul>\n<h3 id=\"两种特殊类型：\"><a href=\"#两种特殊类型：\" class=\"headerlink\" title=\"两种特殊类型：\"></a>两种特殊类型：</h3><ul>\n<li>resource（资源）</li>\n<li>NULL（无类型）</li>\n</ul>\n<h3 id=\"为了确保代码的易读性，还有伪类型：\"><a href=\"#为了确保代码的易读性，还有伪类型：\" class=\"headerlink\" title=\"为了确保代码的易读性，还有伪类型：\"></a>为了确保代码的易读性，还有伪类型：</h3><ul>\n<li>mixed（混合类型）</li>\n<li>number（数字类型）</li>\n<li>array|object（数组|对象类型）</li>\n<li>void（无类型）</li>\n</ul>\n<blockquote>\n<p>特殊的类型有 double（双精度），实际上 double 和 float 是相同的，由于历史原因，这两个名称同时存在。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"PHP支持10中原始数据类型\"><a href=\"#PHP支持10中原始数据类型\" class=\"headerlink\" title=\"PHP支持10中原始数据类型\"></a>PHP支持10中原始数据类型</h2><h3 id=\"四种标量类型：\"><a href=\"#四种标量类型：\" class=\"headerlink\" title=\"四种标量类型：\"></a>四种标量类型：</h3><ul>\n<li>boolean（布尔型）</li>\n<li>integer（整型）</li>\n<li>float（浮点型，也称作 double）</li>\n<li>string（字符串）</li>\n</ul>\n<h3 id=\"四种复合型：\"><a href=\"#四种复合型：\" class=\"headerlink\" title=\"四种复合型：\"></a>四种复合型：</h3><ul>\n<li>array（数组）</li>\n<li>object（对象）</li>\n<li>callable（可调用）</li>\n<li>iterable（可迭代）</li>\n</ul>\n<h3 id=\"两种特殊类型：\"><a href=\"#两种特殊类型：\" class=\"headerlink\" title=\"两种特殊类型：\"></a>两种特殊类型：</h3><ul>\n<li>resource（资源）</li>\n<li>NULL（无类型）</li>\n</ul>\n<h3 id=\"为了确保代码的易读性，还有伪类型：\"><a href=\"#为了确保代码的易读性，还有伪类型：\" class=\"headerlink\" title=\"为了确保代码的易读性，还有伪类型：\"></a>为了确保代码的易读性，还有伪类型：</h3><ul>\n<li>mixed（混合类型）</li>\n<li>number（数字类型）</li>\n<li>array|object（数组|对象类型）</li>\n<li>void（无类型）</li>\n</ul>\n<blockquote>\n<p>特殊的类型有 double（双精度），实际上 double 和 float 是相同的，由于历史原因，这两个名称同时存在。</p>\n</blockquote>\n"},{"title":"PHP字符串函数","abbrlink":1503101483,"_content":"\n## 打印字符串的第一个字符\n\n```php\n$a='abcdr';\n//截取\necho substr($a,0,1);\n//字符串还有类数组的特性，可以用索引下标\necho $a[0];\n```\n\n## 如何实现字符串反转\n\n```php\n$str='abcde';\nfunction reu($str){\n  $len=-strlen($str);//-5\n  for($new='',$start=-1;$start>=$len;$start--){\n    $new.=substr($str,$start,1);\n  }\n  return $new;\n}\necho reu($str),'<br>';\n//系统自带的字符串函数\necho strrev($str);\n```\n\n## 将 1234567 转成 1，234，567\n\n```php\n$str=1234567;\n//第一种思路：首先反转字符串->将字符串长度和符号进行分割->反转回原样\nfunction t1($str){\n  //反转\n  $str=strrev($str);\n  $res=strrev(chunk_split($str,3,','));\n  return $res;\n}\nvar_dump(t1($str));//,1,234,567\n\n//第二种思路：反转->按三个分成数组->再将数组，转换为字符串->再反转回原样\nfunction t2($str){\n  $str=str_split(strrev($str),3);\n  $res=strrev(implode(',',$str));\n  return $res;\n}\nvar_dump(t2($str));//string(9) \"1,234,567\"\n\n//第三种\necho number_format($str);//1,234,567\n```\n\n## 获取文件的后缀名\n\n```php\n$file='abc.exce.jpg';\n//第一种：使用系统函数，查找的文件名\necho strchr($file,'.').'<br>';//.jpg\n//第二种：strstr()返回的是字符串首次出现，加上true表示返回的是. 之前的字符串\necho strrev(strstr(strrev($file),'.',true));//jpg\n//第三种：strrpos()返回的是最后一次.出现的位置,然后在进行截取\necho substr($file,strrops($file,'.'));\n//第四种：pathinfo()函数返回的是文件的路径的信息\necho pathinfo($file,PATHINFO_EXTENSION);//jpg\n\n```","source":"_posts/CodeLanguage/PHP/PHP字符串函数.md","raw":"---\ntitle: PHP字符串函数\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 1503101483\n---\n\n## 打印字符串的第一个字符\n\n```php\n$a='abcdr';\n//截取\necho substr($a,0,1);\n//字符串还有类数组的特性，可以用索引下标\necho $a[0];\n```\n\n## 如何实现字符串反转\n\n```php\n$str='abcde';\nfunction reu($str){\n  $len=-strlen($str);//-5\n  for($new='',$start=-1;$start>=$len;$start--){\n    $new.=substr($str,$start,1);\n  }\n  return $new;\n}\necho reu($str),'<br>';\n//系统自带的字符串函数\necho strrev($str);\n```\n\n## 将 1234567 转成 1，234，567\n\n```php\n$str=1234567;\n//第一种思路：首先反转字符串->将字符串长度和符号进行分割->反转回原样\nfunction t1($str){\n  //反转\n  $str=strrev($str);\n  $res=strrev(chunk_split($str,3,','));\n  return $res;\n}\nvar_dump(t1($str));//,1,234,567\n\n//第二种思路：反转->按三个分成数组->再将数组，转换为字符串->再反转回原样\nfunction t2($str){\n  $str=str_split(strrev($str),3);\n  $res=strrev(implode(',',$str));\n  return $res;\n}\nvar_dump(t2($str));//string(9) \"1,234,567\"\n\n//第三种\necho number_format($str);//1,234,567\n```\n\n## 获取文件的后缀名\n\n```php\n$file='abc.exce.jpg';\n//第一种：使用系统函数，查找的文件名\necho strchr($file,'.').'<br>';//.jpg\n//第二种：strstr()返回的是字符串首次出现，加上true表示返回的是. 之前的字符串\necho strrev(strstr(strrev($file),'.',true));//jpg\n//第三种：strrpos()返回的是最后一次.出现的位置,然后在进行截取\necho substr($file,strrops($file,'.'));\n//第四种：pathinfo()函数返回的是文件的路径的信息\necho pathinfo($file,PATHINFO_EXTENSION);//jpg\n\n```","slug":"CodeLanguage/PHP/PHP字符串函数","published":1,"date":"2021-04-16T13:50:20.225Z","updated":"2021-04-29T10:24:59.123Z","_id":"ckotdh5vi001wkw8zfnqd7cgi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"打印字符串的第一个字符\"><a href=\"#打印字符串的第一个字符\" class=\"headerlink\" title=\"打印字符串的第一个字符\"></a>打印字符串的第一个字符</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"string\">&#x27;abcdr&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//截取</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"variable\">$a</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//字符串还有类数组的特性，可以用索引下标</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何实现字符串反转\"><a href=\"#如何实现字符串反转\" class=\"headerlink\" title=\"如何实现字符串反转\"></a>如何实现字符串反转</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$str</span>=<span class=\"string\">&#x27;abcde&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reu</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"variable\">$len</span>=-strlen(<span class=\"variable\">$str</span>);<span class=\"comment\">//-5</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"variable\">$new</span>=<span class=\"string\">&#x27;&#x27;</span>,<span class=\"variable\">$start</span>=-<span class=\"number\">1</span>;<span class=\"variable\">$start</span>&gt;=<span class=\"variable\">$len</span>;<span class=\"variable\">$start</span>--)&#123;</span><br><span class=\"line\">    <span class=\"variable\">$new</span>.=substr(<span class=\"variable\">$str</span>,<span class=\"variable\">$start</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable\">$new</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> reu(<span class=\"variable\">$str</span>),<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//系统自带的字符串函数</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> strrev(<span class=\"variable\">$str</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将-1234567-转成-1，234，567\"><a href=\"#将-1234567-转成-1，234，567\" class=\"headerlink\" title=\"将 1234567 转成 1，234，567\"></a>将 1234567 转成 1，234，567</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$str</span>=<span class=\"number\">1234567</span>;</span><br><span class=\"line\"><span class=\"comment\">//第一种思路：首先反转字符串-&gt;将字符串长度和符号进行分割-&gt;反转回原样</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t1</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//反转</span></span><br><span class=\"line\">  <span class=\"variable\">$str</span>=strrev(<span class=\"variable\">$str</span>);</span><br><span class=\"line\">  <span class=\"variable\">$res</span>=strrev(chunk_split(<span class=\"variable\">$str</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable\">$res</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(t1(<span class=\"variable\">$str</span>));<span class=\"comment\">//,1,234,567</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种思路：反转-&gt;按三个分成数组-&gt;再将数组，转换为字符串-&gt;再反转回原样</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t2</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"variable\">$str</span>=str_split(strrev(<span class=\"variable\">$str</span>),<span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"variable\">$res</span>=strrev(implode(<span class=\"string\">&#x27;,&#x27;</span>,<span class=\"variable\">$str</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable\">$res</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(t2(<span class=\"variable\">$str</span>));<span class=\"comment\">//string(9) &quot;1,234,567&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第三种</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> number_format(<span class=\"variable\">$str</span>);<span class=\"comment\">//1,234,567</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取文件的后缀名\"><a href=\"#获取文件的后缀名\" class=\"headerlink\" title=\"获取文件的后缀名\"></a>获取文件的后缀名</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$file</span>=<span class=\"string\">&#x27;abc.exce.jpg&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//第一种：使用系统函数，查找的文件名</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> strchr(<span class=\"variable\">$file</span>,<span class=\"string\">&#x27;.&#x27;</span>).<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;<span class=\"comment\">//.jpg</span></span><br><span class=\"line\"><span class=\"comment\">//第二种：strstr()返回的是字符串首次出现，加上true表示返回的是. 之前的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> strrev(strstr(strrev(<span class=\"variable\">$file</span>),<span class=\"string\">&#x27;.&#x27;</span>,<span class=\"literal\">true</span>));<span class=\"comment\">//jpg</span></span><br><span class=\"line\"><span class=\"comment\">//第三种：strrpos()返回的是最后一次.出现的位置,然后在进行截取</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"variable\">$file</span>,strrops(<span class=\"variable\">$file</span>,<span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">//第四种：pathinfo()函数返回的是文件的路径的信息</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> pathinfo(<span class=\"variable\">$file</span>,PATHINFO_EXTENSION);<span class=\"comment\">//jpg</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"打印字符串的第一个字符\"><a href=\"#打印字符串的第一个字符\" class=\"headerlink\" title=\"打印字符串的第一个字符\"></a>打印字符串的第一个字符</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"string\">&#x27;abcdr&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//截取</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"variable\">$a</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//字符串还有类数组的特性，可以用索引下标</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何实现字符串反转\"><a href=\"#如何实现字符串反转\" class=\"headerlink\" title=\"如何实现字符串反转\"></a>如何实现字符串反转</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$str</span>=<span class=\"string\">&#x27;abcde&#x27;</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reu</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"variable\">$len</span>=-strlen(<span class=\"variable\">$str</span>);<span class=\"comment\">//-5</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"variable\">$new</span>=<span class=\"string\">&#x27;&#x27;</span>,<span class=\"variable\">$start</span>=-<span class=\"number\">1</span>;<span class=\"variable\">$start</span>&gt;=<span class=\"variable\">$len</span>;<span class=\"variable\">$start</span>--)&#123;</span><br><span class=\"line\">    <span class=\"variable\">$new</span>.=substr(<span class=\"variable\">$str</span>,<span class=\"variable\">$start</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable\">$new</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> reu(<span class=\"variable\">$str</span>),<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//系统自带的字符串函数</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> strrev(<span class=\"variable\">$str</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将-1234567-转成-1，234，567\"><a href=\"#将-1234567-转成-1，234，567\" class=\"headerlink\" title=\"将 1234567 转成 1，234，567\"></a>将 1234567 转成 1，234，567</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$str</span>=<span class=\"number\">1234567</span>;</span><br><span class=\"line\"><span class=\"comment\">//第一种思路：首先反转字符串-&gt;将字符串长度和符号进行分割-&gt;反转回原样</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t1</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//反转</span></span><br><span class=\"line\">  <span class=\"variable\">$str</span>=strrev(<span class=\"variable\">$str</span>);</span><br><span class=\"line\">  <span class=\"variable\">$res</span>=strrev(chunk_split(<span class=\"variable\">$str</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable\">$res</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(t1(<span class=\"variable\">$str</span>));<span class=\"comment\">//,1,234,567</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种思路：反转-&gt;按三个分成数组-&gt;再将数组，转换为字符串-&gt;再反转回原样</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t2</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"variable\">$str</span>=str_split(strrev(<span class=\"variable\">$str</span>),<span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"variable\">$res</span>=strrev(implode(<span class=\"string\">&#x27;,&#x27;</span>,<span class=\"variable\">$str</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable\">$res</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(t2(<span class=\"variable\">$str</span>));<span class=\"comment\">//string(9) &quot;1,234,567&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第三种</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> number_format(<span class=\"variable\">$str</span>);<span class=\"comment\">//1,234,567</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取文件的后缀名\"><a href=\"#获取文件的后缀名\" class=\"headerlink\" title=\"获取文件的后缀名\"></a>获取文件的后缀名</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$file</span>=<span class=\"string\">&#x27;abc.exce.jpg&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//第一种：使用系统函数，查找的文件名</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> strchr(<span class=\"variable\">$file</span>,<span class=\"string\">&#x27;.&#x27;</span>).<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;<span class=\"comment\">//.jpg</span></span><br><span class=\"line\"><span class=\"comment\">//第二种：strstr()返回的是字符串首次出现，加上true表示返回的是. 之前的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> strrev(strstr(strrev(<span class=\"variable\">$file</span>),<span class=\"string\">&#x27;.&#x27;</span>,<span class=\"literal\">true</span>));<span class=\"comment\">//jpg</span></span><br><span class=\"line\"><span class=\"comment\">//第三种：strrpos()返回的是最后一次.出现的位置,然后在进行截取</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"variable\">$file</span>,strrops(<span class=\"variable\">$file</span>,<span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">//第四种：pathinfo()函数返回的是文件的路径的信息</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> pathinfo(<span class=\"variable\">$file</span>,PATHINFO_EXTENSION);<span class=\"comment\">//jpg</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"PHP控制反转（IOC）和依赖注入（DI）","abbrlink":2916108243,"_content":"\n对于“控制反转（IOC）”和“依赖注入（DI）”两个概念，首先要明白以下概念：\n\n- 控制反转（IOC）是一种思想，依赖注入（DI）是实施这种思想的方法；\n- IOC 意味着将你设计好的对象交给容器控制，而不是传统的在对象内部控制；\n- 依赖注入（DI）实现了控制反转（IOC）；\n\n# 依赖注入的实现\n\n## 一：接口注入\n\n```php\n<?php\n\n/**\n * 定义一个消息接口\n * Interface Message\n */\ninterface Message\n{\n    public function send();\n}\n\n/**\n * 发送邮件的消息类\n * Class SendEmail\n */\nclass SendEmail implements Message\n{\n\n    public function send()\n    {\n        echo \"email 发送成功！\";\n    }\n}\n\n/**\n * 发送短信的消息类\n * Class SendSms\n */\nclass SendSms implements Message\n{\n\n    public function send()\n    {\n        echo \"sms 发送成功！\";\n    }\n}\n\n/**\n * 模拟购买流程\n * Class Order\n */\nclass Order\n{\n    //TODO::下单\n    //TODO::购买\n    //发送消息\n\n    /**\n     * @var String 消息内容\n     */\n    protected String $message;\n\n    function __construct(Message $message)\n    {\n        $this->message = $message;\n    }\n\n    public function send_msg()\n    {\n        return $this->message->send();\n    }\n}\n\n//TODO::比如购买成功了，这里开始发送消息\n$message = new SendEmail();//发送邮件\n//$message = new SendEmail();//发送短信\n$order = new Order($message);\n$order->send_msg();\n```\n\n\n\n## 分析\n\nOrder 类依赖消息类的 Message 接口\n\n```php\n$order = new Order($message);\n```\n\n具体的消息类实例化交给外部处理，不论你是发送短信还是邮件，你自己实例化就好，不要影响我的 Order 类，你只需要把 Message 的接口实现类给我就好\n\n```php\n$message = new SendEmail();//发送邮件\n//$message = new SendEmail();//发送短信\n$order = new Order($message); \n$order->send_msg();\n```\n\n\n\n### 二：构造器注入\n\n```php\n<?php\n\n/**\n * 构造器注入\n * 定义一个有构造函数的类\n * Class IocB\n */\nclass iocAA\n{\n    public $b;\n\n    public $c;\n\n    public function __construct($iocB, $iocC)\n    {\n        $this->b = $iocB;\n        $this->c = $iocC;\n    }\n\n    public function Method()\n    {\n        $this->b->Method();\n        $this->c->Method();\n    }\n}\n\nclass IocB\n{\n\n    public function Method()\n    {\n        echo '我是 IocB 的 Method 方法';\n    }\n}\n\nclass IocC\n{\n    public function Method()\n    {\n        echo '我是 IocC 的 Method 方法';\n    }\n}\n$a = new iocAA(new IocB(), new IocC());\n$a->Method();\n```\n\n\n\n## 分析\n\n进行实例化类的时候，对构造函数的两个参数进行实例化赋值（将实例化后的对象赋值给 iocAA 类 的两个属性）\n\n```php\n$a = new iocAA(new IocB(), new IocC());\n```\n\n然后调用对象的方法即可\n\n```php\n$a->Method();\n```\n\n\n\n## 三：setter 方法注入\n\n```php\n<?php\n\nclass IocC\n{\n    private $db;\n\n    private $file;\n\n    function setDb($db)\n    {\n        $this->db = $db;\n    }\n\n    function setFile($file)\n    {\n        $this->file = $file;\n    }\n}\n\nclass file\n{\n    public function __construct()\n    {\n        echo \"file 的 构造函数执行了\" . \"\\n\";\n    }\n\n    public function run()\n    {\n        echo \"file 的 run\" . \"\\n\";\n    }\n}\n\nclass db\n{\n    public function __construct()\n    {\n        echo \"db 的 构造函数执行了\" . \"\\n\";\n    }\n\n    public function run()\n    {\n        echo \"db 的 run\" . \"\\n\";\n    }\n}\n\n$iocC = new IocC();\n$iocC->setdb(new db());\n$iocC->setfile(new file());\n```\n\n\n\n## 分析\n\n先实例化 IocC 类\n\n```php\n$iocC = new IocC();\n```\n\n接着调用 IocC 类的方法使用，调用 IocC 的方法 setDb 和 setFile 的时候，需要把实例化的对象当做参数传进去\n\n```php\n$iocC->setdb(new db());\n$iocC->setfile(new file());\n```","source":"_posts/CodeLanguage/PHP/PHP控制反转(IOC)和依赖注入(DI).md","raw":"---\ntitle: PHP控制反转（IOC）和依赖注入（DI）\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 2916108243\n---\n\n对于“控制反转（IOC）”和“依赖注入（DI）”两个概念，首先要明白以下概念：\n\n- 控制反转（IOC）是一种思想，依赖注入（DI）是实施这种思想的方法；\n- IOC 意味着将你设计好的对象交给容器控制，而不是传统的在对象内部控制；\n- 依赖注入（DI）实现了控制反转（IOC）；\n\n# 依赖注入的实现\n\n## 一：接口注入\n\n```php\n<?php\n\n/**\n * 定义一个消息接口\n * Interface Message\n */\ninterface Message\n{\n    public function send();\n}\n\n/**\n * 发送邮件的消息类\n * Class SendEmail\n */\nclass SendEmail implements Message\n{\n\n    public function send()\n    {\n        echo \"email 发送成功！\";\n    }\n}\n\n/**\n * 发送短信的消息类\n * Class SendSms\n */\nclass SendSms implements Message\n{\n\n    public function send()\n    {\n        echo \"sms 发送成功！\";\n    }\n}\n\n/**\n * 模拟购买流程\n * Class Order\n */\nclass Order\n{\n    //TODO::下单\n    //TODO::购买\n    //发送消息\n\n    /**\n     * @var String 消息内容\n     */\n    protected String $message;\n\n    function __construct(Message $message)\n    {\n        $this->message = $message;\n    }\n\n    public function send_msg()\n    {\n        return $this->message->send();\n    }\n}\n\n//TODO::比如购买成功了，这里开始发送消息\n$message = new SendEmail();//发送邮件\n//$message = new SendEmail();//发送短信\n$order = new Order($message);\n$order->send_msg();\n```\n\n\n\n## 分析\n\nOrder 类依赖消息类的 Message 接口\n\n```php\n$order = new Order($message);\n```\n\n具体的消息类实例化交给外部处理，不论你是发送短信还是邮件，你自己实例化就好，不要影响我的 Order 类，你只需要把 Message 的接口实现类给我就好\n\n```php\n$message = new SendEmail();//发送邮件\n//$message = new SendEmail();//发送短信\n$order = new Order($message); \n$order->send_msg();\n```\n\n\n\n### 二：构造器注入\n\n```php\n<?php\n\n/**\n * 构造器注入\n * 定义一个有构造函数的类\n * Class IocB\n */\nclass iocAA\n{\n    public $b;\n\n    public $c;\n\n    public function __construct($iocB, $iocC)\n    {\n        $this->b = $iocB;\n        $this->c = $iocC;\n    }\n\n    public function Method()\n    {\n        $this->b->Method();\n        $this->c->Method();\n    }\n}\n\nclass IocB\n{\n\n    public function Method()\n    {\n        echo '我是 IocB 的 Method 方法';\n    }\n}\n\nclass IocC\n{\n    public function Method()\n    {\n        echo '我是 IocC 的 Method 方法';\n    }\n}\n$a = new iocAA(new IocB(), new IocC());\n$a->Method();\n```\n\n\n\n## 分析\n\n进行实例化类的时候，对构造函数的两个参数进行实例化赋值（将实例化后的对象赋值给 iocAA 类 的两个属性）\n\n```php\n$a = new iocAA(new IocB(), new IocC());\n```\n\n然后调用对象的方法即可\n\n```php\n$a->Method();\n```\n\n\n\n## 三：setter 方法注入\n\n```php\n<?php\n\nclass IocC\n{\n    private $db;\n\n    private $file;\n\n    function setDb($db)\n    {\n        $this->db = $db;\n    }\n\n    function setFile($file)\n    {\n        $this->file = $file;\n    }\n}\n\nclass file\n{\n    public function __construct()\n    {\n        echo \"file 的 构造函数执行了\" . \"\\n\";\n    }\n\n    public function run()\n    {\n        echo \"file 的 run\" . \"\\n\";\n    }\n}\n\nclass db\n{\n    public function __construct()\n    {\n        echo \"db 的 构造函数执行了\" . \"\\n\";\n    }\n\n    public function run()\n    {\n        echo \"db 的 run\" . \"\\n\";\n    }\n}\n\n$iocC = new IocC();\n$iocC->setdb(new db());\n$iocC->setfile(new file());\n```\n\n\n\n## 分析\n\n先实例化 IocC 类\n\n```php\n$iocC = new IocC();\n```\n\n接着调用 IocC 类的方法使用，调用 IocC 的方法 setDb 和 setFile 的时候，需要把实例化的对象当做参数传进去\n\n```php\n$iocC->setdb(new db());\n$iocC->setfile(new file());\n```","slug":"CodeLanguage/PHP/PHP控制反转(IOC)和依赖注入(DI)","published":1,"date":"2021-04-16T13:50:20.210Z","updated":"2021-04-29T10:24:59.126Z","_id":"ckotdh5vk001ykw8zf3g5f3oz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>对于“控制反转（IOC）”和“依赖注入（DI）”两个概念，首先要明白以下概念：</p>\n<ul>\n<li>控制反转（IOC）是一种思想，依赖注入（DI）是实施这种思想的方法；</li>\n<li>IOC 意味着将你设计好的对象交给容器控制，而不是传统的在对象内部控制；</li>\n<li>依赖注入（DI）实现了控制反转（IOC）；</li>\n</ul>\n<h1 id=\"依赖注入的实现\"><a href=\"#依赖注入的实现\" class=\"headerlink\" title=\"依赖注入的实现\"></a>依赖注入的实现</h1><h2 id=\"一：接口注入\"><a href=\"#一：接口注入\" class=\"headerlink\" title=\"一：接口注入\"></a>一：接口注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个消息接口</span></span><br><span class=\"line\"><span class=\"comment\"> * Interface Message</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Message</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送邮件的消息类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class SendEmail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendEmail</span> <span class=\"keyword\">implements</span> <span class=\"title\">Message</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;email 发送成功！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送短信的消息类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class SendSms</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendSms</span> <span class=\"keyword\">implements</span> <span class=\"title\">Message</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;sms 发送成功！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模拟购买流程</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Order</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>:下单</span></span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>:购买</span></span><br><span class=\"line\">    <span class=\"comment\">//发送消息</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> String 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">String</span> <span class=\"variable\">$message</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Message <span class=\"variable\">$message</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;message = <span class=\"variable\">$message</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send_msg</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;message-&gt;send();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//<span class=\"doctag\">TODO:</span>:比如购买成功了，这里开始发送消息</span></span><br><span class=\"line\"><span class=\"variable\">$message</span> = <span class=\"keyword\">new</span> SendEmail();<span class=\"comment\">//发送邮件</span></span><br><span class=\"line\"><span class=\"comment\">//$message = new SendEmail();//发送短信</span></span><br><span class=\"line\"><span class=\"variable\">$order</span> = <span class=\"keyword\">new</span> Order(<span class=\"variable\">$message</span>);</span><br><span class=\"line\"><span class=\"variable\">$order</span>-&gt;send_msg();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>Order 类依赖消息类的 Message 接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$order</span> = <span class=\"keyword\">new</span> Order(<span class=\"variable\">$message</span>);</span><br></pre></td></tr></table></figure>\n\n<p>具体的消息类实例化交给外部处理，不论你是发送短信还是邮件，你自己实例化就好，不要影响我的 Order 类，你只需要把 Message 的接口实现类给我就好</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$message</span> = <span class=\"keyword\">new</span> SendEmail();<span class=\"comment\">//发送邮件</span></span><br><span class=\"line\"><span class=\"comment\">//$message = new SendEmail();//发送短信</span></span><br><span class=\"line\"><span class=\"variable\">$order</span> = <span class=\"keyword\">new</span> Order(<span class=\"variable\">$message</span>); </span><br><span class=\"line\"><span class=\"variable\">$order</span>-&gt;send_msg();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二：构造器注入\"><a href=\"#二：构造器注入\" class=\"headerlink\" title=\"二：构造器注入\"></a>二：构造器注入</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构造器注入</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个有构造函数的类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class IocB</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iocAA</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$b</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$c</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$iocB</span>, <span class=\"variable\">$iocC</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;b = <span class=\"variable\">$iocB</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;c = <span class=\"variable\">$iocC</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;b-&gt;Method();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;c-&gt;Method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocB</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;我是 IocB 的 Method 方法&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocC</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;我是 IocC 的 Method 方法&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> iocAA(<span class=\"keyword\">new</span> IocB(), <span class=\"keyword\">new</span> IocC());</span><br><span class=\"line\"><span class=\"variable\">$a</span>-&gt;Method();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>进行实例化类的时候，对构造函数的两个参数进行实例化赋值（将实例化后的对象赋值给 iocAA 类 的两个属性）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> iocAA(<span class=\"keyword\">new</span> IocB(), <span class=\"keyword\">new</span> IocC());</span><br></pre></td></tr></table></figure>\n\n<p>然后调用对象的方法即可</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span>-&gt;Method();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三：setter-方法注入\"><a href=\"#三：setter-方法注入\" class=\"headerlink\" title=\"三：setter 方法注入\"></a>三：setter 方法注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocC</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$db</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$file</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setDb</span>(<span class=\"params\"><span class=\"variable\">$db</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;db = <span class=\"variable\">$db</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setFile</span>(<span class=\"params\"><span class=\"variable\">$file</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;file = <span class=\"variable\">$file</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">file</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;file 的 构造函数执行了&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;file 的 run&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">db</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;db 的 构造函数执行了&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;db 的 run&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$iocC</span> = <span class=\"keyword\">new</span> IocC();</span><br><span class=\"line\"><span class=\"variable\">$iocC</span>-&gt;setdb(<span class=\"keyword\">new</span> db());</span><br><span class=\"line\"><span class=\"variable\">$iocC</span>-&gt;setfile(<span class=\"keyword\">new</span> file());</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>先实例化 IocC 类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$iocC</span> = <span class=\"keyword\">new</span> IocC();</span><br></pre></td></tr></table></figure>\n\n<p>接着调用 IocC 类的方法使用，调用 IocC 的方法 setDb 和 setFile 的时候，需要把实例化的对象当做参数传进去</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$iocC</span>-&gt;setdb(<span class=\"keyword\">new</span> db());</span><br><span class=\"line\"><span class=\"variable\">$iocC</span>-&gt;setfile(<span class=\"keyword\">new</span> file());</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>对于“控制反转（IOC）”和“依赖注入（DI）”两个概念，首先要明白以下概念：</p>\n<ul>\n<li>控制反转（IOC）是一种思想，依赖注入（DI）是实施这种思想的方法；</li>\n<li>IOC 意味着将你设计好的对象交给容器控制，而不是传统的在对象内部控制；</li>\n<li>依赖注入（DI）实现了控制反转（IOC）；</li>\n</ul>\n<h1 id=\"依赖注入的实现\"><a href=\"#依赖注入的实现\" class=\"headerlink\" title=\"依赖注入的实现\"></a>依赖注入的实现</h1><h2 id=\"一：接口注入\"><a href=\"#一：接口注入\" class=\"headerlink\" title=\"一：接口注入\"></a>一：接口注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个消息接口</span></span><br><span class=\"line\"><span class=\"comment\"> * Interface Message</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Message</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送邮件的消息类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class SendEmail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendEmail</span> <span class=\"keyword\">implements</span> <span class=\"title\">Message</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;email 发送成功！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送短信的消息类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class SendSms</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendSms</span> <span class=\"keyword\">implements</span> <span class=\"title\">Message</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;sms 发送成功！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模拟购买流程</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Order</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>:下单</span></span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>:购买</span></span><br><span class=\"line\">    <span class=\"comment\">//发送消息</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> String 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">String</span> <span class=\"variable\">$message</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Message <span class=\"variable\">$message</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;message = <span class=\"variable\">$message</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send_msg</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;message-&gt;send();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//<span class=\"doctag\">TODO:</span>:比如购买成功了，这里开始发送消息</span></span><br><span class=\"line\"><span class=\"variable\">$message</span> = <span class=\"keyword\">new</span> SendEmail();<span class=\"comment\">//发送邮件</span></span><br><span class=\"line\"><span class=\"comment\">//$message = new SendEmail();//发送短信</span></span><br><span class=\"line\"><span class=\"variable\">$order</span> = <span class=\"keyword\">new</span> Order(<span class=\"variable\">$message</span>);</span><br><span class=\"line\"><span class=\"variable\">$order</span>-&gt;send_msg();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>Order 类依赖消息类的 Message 接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$order</span> = <span class=\"keyword\">new</span> Order(<span class=\"variable\">$message</span>);</span><br></pre></td></tr></table></figure>\n\n<p>具体的消息类实例化交给外部处理，不论你是发送短信还是邮件，你自己实例化就好，不要影响我的 Order 类，你只需要把 Message 的接口实现类给我就好</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$message</span> = <span class=\"keyword\">new</span> SendEmail();<span class=\"comment\">//发送邮件</span></span><br><span class=\"line\"><span class=\"comment\">//$message = new SendEmail();//发送短信</span></span><br><span class=\"line\"><span class=\"variable\">$order</span> = <span class=\"keyword\">new</span> Order(<span class=\"variable\">$message</span>); </span><br><span class=\"line\"><span class=\"variable\">$order</span>-&gt;send_msg();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二：构造器注入\"><a href=\"#二：构造器注入\" class=\"headerlink\" title=\"二：构造器注入\"></a>二：构造器注入</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构造器注入</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个有构造函数的类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class IocB</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iocAA</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$b</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$c</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$iocB</span>, <span class=\"variable\">$iocC</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;b = <span class=\"variable\">$iocB</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;c = <span class=\"variable\">$iocC</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;b-&gt;Method();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;c-&gt;Method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocB</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;我是 IocB 的 Method 方法&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocC</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;我是 IocC 的 Method 方法&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> iocAA(<span class=\"keyword\">new</span> IocB(), <span class=\"keyword\">new</span> IocC());</span><br><span class=\"line\"><span class=\"variable\">$a</span>-&gt;Method();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>进行实例化类的时候，对构造函数的两个参数进行实例化赋值（将实例化后的对象赋值给 iocAA 类 的两个属性）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> iocAA(<span class=\"keyword\">new</span> IocB(), <span class=\"keyword\">new</span> IocC());</span><br></pre></td></tr></table></figure>\n\n<p>然后调用对象的方法即可</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span>-&gt;Method();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三：setter-方法注入\"><a href=\"#三：setter-方法注入\" class=\"headerlink\" title=\"三：setter 方法注入\"></a>三：setter 方法注入</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IocC</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$db</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$file</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setDb</span>(<span class=\"params\"><span class=\"variable\">$db</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;db = <span class=\"variable\">$db</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setFile</span>(<span class=\"params\"><span class=\"variable\">$file</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;file = <span class=\"variable\">$file</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">file</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;file 的 构造函数执行了&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;file 的 run&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">db</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;db 的 构造函数执行了&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;db 的 run&quot;</span> . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$iocC</span> = <span class=\"keyword\">new</span> IocC();</span><br><span class=\"line\"><span class=\"variable\">$iocC</span>-&gt;setdb(<span class=\"keyword\">new</span> db());</span><br><span class=\"line\"><span class=\"variable\">$iocC</span>-&gt;setfile(<span class=\"keyword\">new</span> file());</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>先实例化 IocC 类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$iocC</span> = <span class=\"keyword\">new</span> IocC();</span><br></pre></td></tr></table></figure>\n\n<p>接着调用 IocC 类的方法使用，调用 IocC 的方法 setDb 和 setFile 的时候，需要把实例化的对象当做参数传进去</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$iocC</span>-&gt;setdb(<span class=\"keyword\">new</span> db());</span><br><span class=\"line\"><span class=\"variable\">$iocC</span>-&gt;setfile(<span class=\"keyword\">new</span> file());</span><br></pre></td></tr></table></figure>"},{"title":"PHP的垃圾回收机制-回收周期","abbrlink":1247192045,"_content":"\n## 回收周期(Collecting Cycles)\n\n传统上，像以前的 php 用到的引用计数内存机制，无法处理循环的引用内存泄漏。然而 5.3.0 PHP 使用文章[» 引用计数系统中的同步周期回收(Concurrent Cycle Collection in Reference Counted Systems)](http://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf)中的同步算法，来处理这个内存泄漏问题。\n\n对算法的完全说明有点超出这部分内容的范围，将只介绍其中基础部分。首先，我们先要建立一些基本规则，如果一个引用计数增加，它将继续被使用，当然就不再在垃圾中。如果引用计数减少到零，所在变量容器将被清除(free)。就是说，仅仅在引用计数减少到非零值时，才会产生垃圾周期(garbage cycle)。其次，在一个垃圾周期中，通过检查引用计数是否减1，并且检查哪些变量容器的引用次数是零，来发现哪部分是垃圾。\n\n\n\n![垃圾回收算法](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-algorithm.png)\n\n为避免不得不检查所有引用计数可能减少的垃圾周期，这个算法把所有可能根(possible roots 都是zval变量容器),放在根缓冲区(root buffer)中(用紫色来标记，称为疑似垃圾)，这样可以同时确保每个可能的垃圾根(possible garbage root)在缓冲区中只出现一次。仅仅在根缓冲区满了时，才对缓冲区内部所有不同的变量容器执行垃圾回收操作。看上图的步骤 A。\n\n在步骤 B 中，模拟删除每个紫色变量。模拟删除时可能将不是紫色的普通变量引用数减\"1\"，如果某个普通变量引用计数变成0了，就对这个普通变量再做一次模拟删除。每个变量只能被模拟删除一次，模拟删除后标记为灰（原文说确保不会对同一个变量容器减两次\"1\",不对的吧）。\n\n在步骤 C 中，模拟恢复每个紫色变量。恢复是有条件的，当变量的引用计数大于0时才对其做模拟恢复。同样每个变量只能恢复一次，恢复后标记为黑，基本就是步骤 B 的逆运算。这样剩下的一堆没能恢复的就是该删除的蓝色节点了，在步骤 D 中遍历出来真的删除掉。\n\n算法中都是模拟删除、模拟恢复、真的删除，都使用简单的遍历即可（最典型的深搜遍历）。复杂度为执行模拟操作的节点数正相关，不只是紫色的那些疑似垃圾变量。\n\n现在，你已经对这个算法有了基本了解，我们回头来看这个如何与PHP集成。默认的，PHP的垃圾回收机制是打开的，然后有个 php.ini 设置允许你修改它：**zend.enable_gc**。\n\n当垃圾回收机制打开时，每当根缓存区存满时，就会执行上面描述的循环查找算法。根缓存区有固定的大小，可存10,000个可能根,当然你可以通过修改PHP源码文件`Zend/zend_gc.c`中的常量`GC_ROOT_BUFFER_MAX_ENTRIES`，然后重新编译PHP，来修改这个10,000值。当垃圾回收机制关闭时，循环查找算法永不执行，然而，可能根将一直存在根缓冲区中，不管在配置中垃圾回收机制是否激活。\n\n当垃圾回收机制关闭时，如果根缓冲区存满了可能根，更多的可能根显然不会被记录。那些没被记录的可能根，将不会被这个算法来分析处理。如果他们是循环引用周期的一部分，将永不能被清除进而导致内存泄漏。\n\n即使在垃圾回收机制不可用时，可能根也被记录的原因是，相对于每次找到可能根后检查垃圾回收机制是否打开而言，记录可能根的操作更快。不过垃圾回收和分析机制本身要耗不少时间。\n\n除了修改配置**zend.enable_gc**，也能通过分别调用[gc_enable()](https://www.php.net/manual/zh/function.gc-enable.php) 和 [gc_disable()](https://www.php.net/manual/zh/function.gc-disable.php)函数来打开和关闭垃圾回收机制。调用这些函数，与修改配置项来打开或关闭垃圾回收机制的效果是一样的。即使在可能根缓冲区还没满时，也能强制执行周期回收。你能调用[gc_collect_cycles()](https://www.php.net/manual/zh/function.gc-collect-cycles.php)函数达到这个目的。这个函数将返回使用这个算法回收的周期数。\n\n允许打开和关闭垃圾回收机制并且允许自主的初始化的原因，是由于你的应用程序的某部分可能是高时效性的。在这种情况下，你可能不想使用垃圾回收机制。当然，对你的应用程序的某部分关闭垃圾回收机制，是在冒着可能内存泄漏的风险，因为一些可能根也许存不进有限的根缓冲区。因此，就在你调用[gc_disable()](https://www.php.net/manual/zh/function.gc-disable.php)函数释放内存之前，先调用[gc_collect_cycles()](https://www.php.net/manual/zh/function.gc-collect-cycles.php)函数可能比较明智。因为这将清除已存放在根缓冲区中的所有可能根，然后在垃圾回收机制被关闭时，可留下空缓冲区以有更多空间存储可能根。\n\n","source":"_posts/CodeLanguage/PHP/PHP的垃圾回收机制-回收周期.md","raw":"---\ntitle: PHP的垃圾回收机制-回收周期\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 1247192045\n---\n\n## 回收周期(Collecting Cycles)\n\n传统上，像以前的 php 用到的引用计数内存机制，无法处理循环的引用内存泄漏。然而 5.3.0 PHP 使用文章[» 引用计数系统中的同步周期回收(Concurrent Cycle Collection in Reference Counted Systems)](http://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf)中的同步算法，来处理这个内存泄漏问题。\n\n对算法的完全说明有点超出这部分内容的范围，将只介绍其中基础部分。首先，我们先要建立一些基本规则，如果一个引用计数增加，它将继续被使用，当然就不再在垃圾中。如果引用计数减少到零，所在变量容器将被清除(free)。就是说，仅仅在引用计数减少到非零值时，才会产生垃圾周期(garbage cycle)。其次，在一个垃圾周期中，通过检查引用计数是否减1，并且检查哪些变量容器的引用次数是零，来发现哪部分是垃圾。\n\n\n\n![垃圾回收算法](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-algorithm.png)\n\n为避免不得不检查所有引用计数可能减少的垃圾周期，这个算法把所有可能根(possible roots 都是zval变量容器),放在根缓冲区(root buffer)中(用紫色来标记，称为疑似垃圾)，这样可以同时确保每个可能的垃圾根(possible garbage root)在缓冲区中只出现一次。仅仅在根缓冲区满了时，才对缓冲区内部所有不同的变量容器执行垃圾回收操作。看上图的步骤 A。\n\n在步骤 B 中，模拟删除每个紫色变量。模拟删除时可能将不是紫色的普通变量引用数减\"1\"，如果某个普通变量引用计数变成0了，就对这个普通变量再做一次模拟删除。每个变量只能被模拟删除一次，模拟删除后标记为灰（原文说确保不会对同一个变量容器减两次\"1\",不对的吧）。\n\n在步骤 C 中，模拟恢复每个紫色变量。恢复是有条件的，当变量的引用计数大于0时才对其做模拟恢复。同样每个变量只能恢复一次，恢复后标记为黑，基本就是步骤 B 的逆运算。这样剩下的一堆没能恢复的就是该删除的蓝色节点了，在步骤 D 中遍历出来真的删除掉。\n\n算法中都是模拟删除、模拟恢复、真的删除，都使用简单的遍历即可（最典型的深搜遍历）。复杂度为执行模拟操作的节点数正相关，不只是紫色的那些疑似垃圾变量。\n\n现在，你已经对这个算法有了基本了解，我们回头来看这个如何与PHP集成。默认的，PHP的垃圾回收机制是打开的，然后有个 php.ini 设置允许你修改它：**zend.enable_gc**。\n\n当垃圾回收机制打开时，每当根缓存区存满时，就会执行上面描述的循环查找算法。根缓存区有固定的大小，可存10,000个可能根,当然你可以通过修改PHP源码文件`Zend/zend_gc.c`中的常量`GC_ROOT_BUFFER_MAX_ENTRIES`，然后重新编译PHP，来修改这个10,000值。当垃圾回收机制关闭时，循环查找算法永不执行，然而，可能根将一直存在根缓冲区中，不管在配置中垃圾回收机制是否激活。\n\n当垃圾回收机制关闭时，如果根缓冲区存满了可能根，更多的可能根显然不会被记录。那些没被记录的可能根，将不会被这个算法来分析处理。如果他们是循环引用周期的一部分，将永不能被清除进而导致内存泄漏。\n\n即使在垃圾回收机制不可用时，可能根也被记录的原因是，相对于每次找到可能根后检查垃圾回收机制是否打开而言，记录可能根的操作更快。不过垃圾回收和分析机制本身要耗不少时间。\n\n除了修改配置**zend.enable_gc**，也能通过分别调用[gc_enable()](https://www.php.net/manual/zh/function.gc-enable.php) 和 [gc_disable()](https://www.php.net/manual/zh/function.gc-disable.php)函数来打开和关闭垃圾回收机制。调用这些函数，与修改配置项来打开或关闭垃圾回收机制的效果是一样的。即使在可能根缓冲区还没满时，也能强制执行周期回收。你能调用[gc_collect_cycles()](https://www.php.net/manual/zh/function.gc-collect-cycles.php)函数达到这个目的。这个函数将返回使用这个算法回收的周期数。\n\n允许打开和关闭垃圾回收机制并且允许自主的初始化的原因，是由于你的应用程序的某部分可能是高时效性的。在这种情况下，你可能不想使用垃圾回收机制。当然，对你的应用程序的某部分关闭垃圾回收机制，是在冒着可能内存泄漏的风险，因为一些可能根也许存不进有限的根缓冲区。因此，就在你调用[gc_disable()](https://www.php.net/manual/zh/function.gc-disable.php)函数释放内存之前，先调用[gc_collect_cycles()](https://www.php.net/manual/zh/function.gc-collect-cycles.php)函数可能比较明智。因为这将清除已存放在根缓冲区中的所有可能根，然后在垃圾回收机制被关闭时，可留下空缓冲区以有更多空间存储可能根。\n\n","slug":"CodeLanguage/PHP/PHP的垃圾回收机制-回收周期","published":1,"date":"2021-04-16T13:50:20.191Z","updated":"2021-04-29T10:24:59.128Z","_id":"ckotdh5vl001zkw8z0kecheyy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"回收周期-Collecting-Cycles\"><a href=\"#回收周期-Collecting-Cycles\" class=\"headerlink\" title=\"回收周期(Collecting Cycles)\"></a>回收周期(Collecting Cycles)</h2><p>传统上，像以前的 php 用到的引用计数内存机制，无法处理循环的引用内存泄漏。然而 5.3.0 PHP 使用文章<a href=\"http://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf\">» 引用计数系统中的同步周期回收(Concurrent Cycle Collection in Reference Counted Systems)</a>中的同步算法，来处理这个内存泄漏问题。</p>\n<p>对算法的完全说明有点超出这部分内容的范围，将只介绍其中基础部分。首先，我们先要建立一些基本规则，如果一个引用计数增加，它将继续被使用，当然就不再在垃圾中。如果引用计数减少到零，所在变量容器将被清除(free)。就是说，仅仅在引用计数减少到非零值时，才会产生垃圾周期(garbage cycle)。其次，在一个垃圾周期中，通过检查引用计数是否减1，并且检查哪些变量容器的引用次数是零，来发现哪部分是垃圾。</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-algorithm.png\" alt=\"垃圾回收算法\"></p>\n<p>为避免不得不检查所有引用计数可能减少的垃圾周期，这个算法把所有可能根(possible roots 都是zval变量容器),放在根缓冲区(root buffer)中(用紫色来标记，称为疑似垃圾)，这样可以同时确保每个可能的垃圾根(possible garbage root)在缓冲区中只出现一次。仅仅在根缓冲区满了时，才对缓冲区内部所有不同的变量容器执行垃圾回收操作。看上图的步骤 A。</p>\n<p>在步骤 B 中，模拟删除每个紫色变量。模拟删除时可能将不是紫色的普通变量引用数减”1”，如果某个普通变量引用计数变成0了，就对这个普通变量再做一次模拟删除。每个变量只能被模拟删除一次，模拟删除后标记为灰（原文说确保不会对同一个变量容器减两次”1”,不对的吧）。</p>\n<p>在步骤 C 中，模拟恢复每个紫色变量。恢复是有条件的，当变量的引用计数大于0时才对其做模拟恢复。同样每个变量只能恢复一次，恢复后标记为黑，基本就是步骤 B 的逆运算。这样剩下的一堆没能恢复的就是该删除的蓝色节点了，在步骤 D 中遍历出来真的删除掉。</p>\n<p>算法中都是模拟删除、模拟恢复、真的删除，都使用简单的遍历即可（最典型的深搜遍历）。复杂度为执行模拟操作的节点数正相关，不只是紫色的那些疑似垃圾变量。</p>\n<p>现在，你已经对这个算法有了基本了解，我们回头来看这个如何与PHP集成。默认的，PHP的垃圾回收机制是打开的，然后有个 php.ini 设置允许你修改它：<strong>zend.enable_gc</strong>。</p>\n<p>当垃圾回收机制打开时，每当根缓存区存满时，就会执行上面描述的循环查找算法。根缓存区有固定的大小，可存10,000个可能根,当然你可以通过修改PHP源码文件<code>Zend/zend_gc.c</code>中的常量<code>GC_ROOT_BUFFER_MAX_ENTRIES</code>，然后重新编译PHP，来修改这个10,000值。当垃圾回收机制关闭时，循环查找算法永不执行，然而，可能根将一直存在根缓冲区中，不管在配置中垃圾回收机制是否激活。</p>\n<p>当垃圾回收机制关闭时，如果根缓冲区存满了可能根，更多的可能根显然不会被记录。那些没被记录的可能根，将不会被这个算法来分析处理。如果他们是循环引用周期的一部分，将永不能被清除进而导致内存泄漏。</p>\n<p>即使在垃圾回收机制不可用时，可能根也被记录的原因是，相对于每次找到可能根后检查垃圾回收机制是否打开而言，记录可能根的操作更快。不过垃圾回收和分析机制本身要耗不少时间。</p>\n<p>除了修改配置<strong>zend.enable_gc</strong>，也能通过分别调用<a href=\"https://www.php.net/manual/zh/function.gc-enable.php\">gc_enable()</a> 和 <a href=\"https://www.php.net/manual/zh/function.gc-disable.php\">gc_disable()</a>函数来打开和关闭垃圾回收机制。调用这些函数，与修改配置项来打开或关闭垃圾回收机制的效果是一样的。即使在可能根缓冲区还没满时，也能强制执行周期回收。你能调用<a href=\"https://www.php.net/manual/zh/function.gc-collect-cycles.php\">gc_collect_cycles()</a>函数达到这个目的。这个函数将返回使用这个算法回收的周期数。</p>\n<p>允许打开和关闭垃圾回收机制并且允许自主的初始化的原因，是由于你的应用程序的某部分可能是高时效性的。在这种情况下，你可能不想使用垃圾回收机制。当然，对你的应用程序的某部分关闭垃圾回收机制，是在冒着可能内存泄漏的风险，因为一些可能根也许存不进有限的根缓冲区。因此，就在你调用<a href=\"https://www.php.net/manual/zh/function.gc-disable.php\">gc_disable()</a>函数释放内存之前，先调用<a href=\"https://www.php.net/manual/zh/function.gc-collect-cycles.php\">gc_collect_cycles()</a>函数可能比较明智。因为这将清除已存放在根缓冲区中的所有可能根，然后在垃圾回收机制被关闭时，可留下空缓冲区以有更多空间存储可能根。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"回收周期-Collecting-Cycles\"><a href=\"#回收周期-Collecting-Cycles\" class=\"headerlink\" title=\"回收周期(Collecting Cycles)\"></a>回收周期(Collecting Cycles)</h2><p>传统上，像以前的 php 用到的引用计数内存机制，无法处理循环的引用内存泄漏。然而 5.3.0 PHP 使用文章<a href=\"http://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf\">» 引用计数系统中的同步周期回收(Concurrent Cycle Collection in Reference Counted Systems)</a>中的同步算法，来处理这个内存泄漏问题。</p>\n<p>对算法的完全说明有点超出这部分内容的范围，将只介绍其中基础部分。首先，我们先要建立一些基本规则，如果一个引用计数增加，它将继续被使用，当然就不再在垃圾中。如果引用计数减少到零，所在变量容器将被清除(free)。就是说，仅仅在引用计数减少到非零值时，才会产生垃圾周期(garbage cycle)。其次，在一个垃圾周期中，通过检查引用计数是否减1，并且检查哪些变量容器的引用次数是零，来发现哪部分是垃圾。</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-algorithm.png\" alt=\"垃圾回收算法\"></p>\n<p>为避免不得不检查所有引用计数可能减少的垃圾周期，这个算法把所有可能根(possible roots 都是zval变量容器),放在根缓冲区(root buffer)中(用紫色来标记，称为疑似垃圾)，这样可以同时确保每个可能的垃圾根(possible garbage root)在缓冲区中只出现一次。仅仅在根缓冲区满了时，才对缓冲区内部所有不同的变量容器执行垃圾回收操作。看上图的步骤 A。</p>\n<p>在步骤 B 中，模拟删除每个紫色变量。模拟删除时可能将不是紫色的普通变量引用数减”1”，如果某个普通变量引用计数变成0了，就对这个普通变量再做一次模拟删除。每个变量只能被模拟删除一次，模拟删除后标记为灰（原文说确保不会对同一个变量容器减两次”1”,不对的吧）。</p>\n<p>在步骤 C 中，模拟恢复每个紫色变量。恢复是有条件的，当变量的引用计数大于0时才对其做模拟恢复。同样每个变量只能恢复一次，恢复后标记为黑，基本就是步骤 B 的逆运算。这样剩下的一堆没能恢复的就是该删除的蓝色节点了，在步骤 D 中遍历出来真的删除掉。</p>\n<p>算法中都是模拟删除、模拟恢复、真的删除，都使用简单的遍历即可（最典型的深搜遍历）。复杂度为执行模拟操作的节点数正相关，不只是紫色的那些疑似垃圾变量。</p>\n<p>现在，你已经对这个算法有了基本了解，我们回头来看这个如何与PHP集成。默认的，PHP的垃圾回收机制是打开的，然后有个 php.ini 设置允许你修改它：<strong>zend.enable_gc</strong>。</p>\n<p>当垃圾回收机制打开时，每当根缓存区存满时，就会执行上面描述的循环查找算法。根缓存区有固定的大小，可存10,000个可能根,当然你可以通过修改PHP源码文件<code>Zend/zend_gc.c</code>中的常量<code>GC_ROOT_BUFFER_MAX_ENTRIES</code>，然后重新编译PHP，来修改这个10,000值。当垃圾回收机制关闭时，循环查找算法永不执行，然而，可能根将一直存在根缓冲区中，不管在配置中垃圾回收机制是否激活。</p>\n<p>当垃圾回收机制关闭时，如果根缓冲区存满了可能根，更多的可能根显然不会被记录。那些没被记录的可能根，将不会被这个算法来分析处理。如果他们是循环引用周期的一部分，将永不能被清除进而导致内存泄漏。</p>\n<p>即使在垃圾回收机制不可用时，可能根也被记录的原因是，相对于每次找到可能根后检查垃圾回收机制是否打开而言，记录可能根的操作更快。不过垃圾回收和分析机制本身要耗不少时间。</p>\n<p>除了修改配置<strong>zend.enable_gc</strong>，也能通过分别调用<a href=\"https://www.php.net/manual/zh/function.gc-enable.php\">gc_enable()</a> 和 <a href=\"https://www.php.net/manual/zh/function.gc-disable.php\">gc_disable()</a>函数来打开和关闭垃圾回收机制。调用这些函数，与修改配置项来打开或关闭垃圾回收机制的效果是一样的。即使在可能根缓冲区还没满时，也能强制执行周期回收。你能调用<a href=\"https://www.php.net/manual/zh/function.gc-collect-cycles.php\">gc_collect_cycles()</a>函数达到这个目的。这个函数将返回使用这个算法回收的周期数。</p>\n<p>允许打开和关闭垃圾回收机制并且允许自主的初始化的原因，是由于你的应用程序的某部分可能是高时效性的。在这种情况下，你可能不想使用垃圾回收机制。当然，对你的应用程序的某部分关闭垃圾回收机制，是在冒着可能内存泄漏的风险，因为一些可能根也许存不进有限的根缓冲区。因此，就在你调用<a href=\"https://www.php.net/manual/zh/function.gc-disable.php\">gc_disable()</a>函数释放内存之前，先调用<a href=\"https://www.php.net/manual/zh/function.gc-collect-cycles.php\">gc_collect_cycles()</a>函数可能比较明智。因为这将清除已存放在根缓冲区中的所有可能根，然后在垃圾回收机制被关闭时，可留下空缓冲区以有更多空间存储可能根。</p>\n"},{"title":"PHP的垃圾回收机制-性能方面考虑的因素","abbrlink":2943915566,"_content":"\n## 性能方面考虑的因素\n\n在上一节我们已经简单的提到：回收可能根有细微的性能上影响，但这是把PHP 5.2与PHP 5.3比较时才有的。尽管在PHP 5.2中，记录可能根相对于完全不记录可能根要慢些，而PHP 5.3中对 PHP run-time 的其他修改减少了这个性能损失。\n\n这里主要有两个领域对性能有影响。第一个是内存占用空间的节省，另一个是垃圾回收机制执行内存清理时的执行时间增加(run-time delay)。我们将研究这两个领域。\n\n### 内存占用空间的节省\n\n首先，实现垃圾回收机制的整个原因是为了，一旦先决条件满足，通过清理循环引用的变量来节省内存占用。在PHP执行中，一旦根缓冲区满了或者调用[gc_collect_cycles()](https://www.php.net/manual/zh/function.gc-collect-cycles.php) 函数时，就会执行垃圾回收。在下图中，显示了下面脚本分别在PHP 5.2 和 PHP 5.3环境下的内存占用情况，其中排除了脚本启动时PHP本身占用的基本内存。\n\n\n\n**Example #1 Memory usage example**\n\n```php\n<?php\nclass Foo\n{\n    public $var = '3.1415962654';\n}\n\n$baseMemory = memory_get_usage();\n\nfor ( $i = 0; $i <= 100000; $i++ )\n{\n    $a = new Foo;\n    $a->self = $a;\n    if ( $i % 500 === 0 )\n    {\n        echo sprintf( '%8d: ', $i ), memory_get_usage() - $baseMemory, \"\\n\";\n    }\n}\n?>\n```\n\n![Comparison of memory usage between PHP 5.2 and PHP 5.3](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-benchmark.png)\n\n在这个很理论性的例子中，我们创建了一个对象，这个对象中的一个属性被设置为指回对象本身。在循环的下一个重复(iteration)中，当脚本中的变量被重新复制时，就会发生典型性的内存泄漏。在这个例子中，两个变量容器是泄漏的(对象容器和属性容器)，但是仅仅能找到一个可能根：就是被unset的那个变量。在10,000次重复后(也就产生总共10,000个可能根)，当根缓冲区满时，就执行垃圾回收机制，并且释放那些关联的可能根的内存。这从PHP 5.3的锯齿型内存占用图中很容易就能看到。每次执行完10,000次重复后，执行垃圾回收，并释放相关的重复使用的引用变量。在这个例子中由于泄漏的数据结构非常简单，所以垃圾回收机制本身不必做太多工作。从这个图表中，你能看到 PHP 5.3的最大内存占用大概是9 Mb，而PHP 5.2的内存占用一直增加。\n\n### 执行时间增加(Run-Time Slowdowns)\n\n垃圾回收影响性能的第二个领域是它释放已泄漏的内存耗费的时间。为了看到这个耗时时多少，我们稍微改变了上面的脚本，有更多次数的重复并且删除了循环中的内存占用计算，第二个脚本代码如下：\n\n\n\n**Example #2 GC性能影响**\n\n```php\n<?php\nclass Foo\n{\n    public $var = '3.1415962654';\n}\n\nfor ( $i = 0; $i <= 1000000; $i++ )\n{\n    $a = new Foo;\n    $a->self = $a;\n}\n\necho memory_get_peak_usage(), \"\\n\";\n?>\n\n```\n\n我们将运行这个脚本两次，一次通过配置**zend.enable_gc**打开垃圾回收机制时，另一次是它关闭时。\n\n\n\n**Example #3 执行以上脚本**\n\n```shell\ntime php -dzend.enable_gc=0 -dmemory_limit=-1 -n example2.php\n# and\ntime php -dzend.enable_gc=1 -dmemory_limit=-1 -n example2.php\n```\n\n在我的机器上，第一个命令持续执行时间大概为10.7秒，而第二个命令耗费11.4秒。时间上增加了7%。然而，执行这个脚本时内存占用的峰值降低了98%，从931Mb 降到 10Mb。这个基准不是很科学，或者并不能代表真实应用程序的数据，但是它的确显示了垃圾回收机制在内存占用方面的好处。好消息就是，对这个脚本而言，在执行中出现更多的循环引用变量时，内存节省的更多的情况下，每次时间增加的百分比都是7%。\n\n### PHP内部 GC 统计信息\n\n在PHP内部，可以显示更多的关于垃圾回收机制如何运行的信息。但是要显示这些信息，你需要先重新编译PHP使benchmark和data-collecting code可用。你需要在按照你的意愿运行`./configure`前，把环境变量`CFLAGS`设置成`-DGC_BENCH=1`。下面的命令串就是做这个事：\n\n\n\n**Example #4 重新编译PHP以启用GC benchmarking**\n\n```shell\nexport CFLAGS=-DGC_BENCH=1\n./config.nice\nmake clean\nmake\n```\n\n当你用新编译的PHP二进制文件来重新执行上面的例子代码，在PHP执行结束后，你将看到下面的信息：\n\n\n\n**Example #5 GC 统计数据**\n\n```shell\nGC Statistics\n-------------\nRuns:               110\nCollected:          2072204\nRoot buffer length: 0\nRoot buffer peak:   10000\n\n      Possible            Remove from  Marked\n        Root    Buffered     buffer     grey\n      --------  --------  -----------  ------\nZVAL   7175487   1491291    1241690   3611871\nZOBJ  28506264   1527980     677581   1025731\n```\n\n主要的信息统计在第一个块。你能看到垃圾回收机制运行了110次，而且在这110次运行中，总共有超过两百万的内存分配被释放。只要垃圾回收机制运行了至少一次，根缓冲区峰值(Root buffer peak)总是10000.\n\n### 结论\n\n通常，PHP中的垃圾回收机制，仅仅在循环回收算法确实运行时会有时间消耗上的增加。但是在平常的(更小的)脚本中应根本就没有性能影响。\n\n然而，在平常脚本中有循环回收机制运行的情况下，内存的节省将允许更多这种脚本同时运行在你的服务器上。因为总共使用的内存没达到上限。\n\n这种好处在长时间运行脚本中尤其明显，诸如长时间的测试套件或者daemon脚本此类。同时，对通常比Web脚本运行时间长的[» PHP-GTK](http://gtk.php.net/)应用程序，新的垃圾回收机制，应该会大大改变一直以来认为内存泄漏问题难以解决的看法。","source":"_posts/CodeLanguage/PHP/PHP的垃圾回收机制-性能方面考虑的因素.md","raw":"---\ntitle: PHP的垃圾回收机制-性能方面考虑的因素\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 2943915566\n---\n\n## 性能方面考虑的因素\n\n在上一节我们已经简单的提到：回收可能根有细微的性能上影响，但这是把PHP 5.2与PHP 5.3比较时才有的。尽管在PHP 5.2中，记录可能根相对于完全不记录可能根要慢些，而PHP 5.3中对 PHP run-time 的其他修改减少了这个性能损失。\n\n这里主要有两个领域对性能有影响。第一个是内存占用空间的节省，另一个是垃圾回收机制执行内存清理时的执行时间增加(run-time delay)。我们将研究这两个领域。\n\n### 内存占用空间的节省\n\n首先，实现垃圾回收机制的整个原因是为了，一旦先决条件满足，通过清理循环引用的变量来节省内存占用。在PHP执行中，一旦根缓冲区满了或者调用[gc_collect_cycles()](https://www.php.net/manual/zh/function.gc-collect-cycles.php) 函数时，就会执行垃圾回收。在下图中，显示了下面脚本分别在PHP 5.2 和 PHP 5.3环境下的内存占用情况，其中排除了脚本启动时PHP本身占用的基本内存。\n\n\n\n**Example #1 Memory usage example**\n\n```php\n<?php\nclass Foo\n{\n    public $var = '3.1415962654';\n}\n\n$baseMemory = memory_get_usage();\n\nfor ( $i = 0; $i <= 100000; $i++ )\n{\n    $a = new Foo;\n    $a->self = $a;\n    if ( $i % 500 === 0 )\n    {\n        echo sprintf( '%8d: ', $i ), memory_get_usage() - $baseMemory, \"\\n\";\n    }\n}\n?>\n```\n\n![Comparison of memory usage between PHP 5.2 and PHP 5.3](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-benchmark.png)\n\n在这个很理论性的例子中，我们创建了一个对象，这个对象中的一个属性被设置为指回对象本身。在循环的下一个重复(iteration)中，当脚本中的变量被重新复制时，就会发生典型性的内存泄漏。在这个例子中，两个变量容器是泄漏的(对象容器和属性容器)，但是仅仅能找到一个可能根：就是被unset的那个变量。在10,000次重复后(也就产生总共10,000个可能根)，当根缓冲区满时，就执行垃圾回收机制，并且释放那些关联的可能根的内存。这从PHP 5.3的锯齿型内存占用图中很容易就能看到。每次执行完10,000次重复后，执行垃圾回收，并释放相关的重复使用的引用变量。在这个例子中由于泄漏的数据结构非常简单，所以垃圾回收机制本身不必做太多工作。从这个图表中，你能看到 PHP 5.3的最大内存占用大概是9 Mb，而PHP 5.2的内存占用一直增加。\n\n### 执行时间增加(Run-Time Slowdowns)\n\n垃圾回收影响性能的第二个领域是它释放已泄漏的内存耗费的时间。为了看到这个耗时时多少，我们稍微改变了上面的脚本，有更多次数的重复并且删除了循环中的内存占用计算，第二个脚本代码如下：\n\n\n\n**Example #2 GC性能影响**\n\n```php\n<?php\nclass Foo\n{\n    public $var = '3.1415962654';\n}\n\nfor ( $i = 0; $i <= 1000000; $i++ )\n{\n    $a = new Foo;\n    $a->self = $a;\n}\n\necho memory_get_peak_usage(), \"\\n\";\n?>\n\n```\n\n我们将运行这个脚本两次，一次通过配置**zend.enable_gc**打开垃圾回收机制时，另一次是它关闭时。\n\n\n\n**Example #3 执行以上脚本**\n\n```shell\ntime php -dzend.enable_gc=0 -dmemory_limit=-1 -n example2.php\n# and\ntime php -dzend.enable_gc=1 -dmemory_limit=-1 -n example2.php\n```\n\n在我的机器上，第一个命令持续执行时间大概为10.7秒，而第二个命令耗费11.4秒。时间上增加了7%。然而，执行这个脚本时内存占用的峰值降低了98%，从931Mb 降到 10Mb。这个基准不是很科学，或者并不能代表真实应用程序的数据，但是它的确显示了垃圾回收机制在内存占用方面的好处。好消息就是，对这个脚本而言，在执行中出现更多的循环引用变量时，内存节省的更多的情况下，每次时间增加的百分比都是7%。\n\n### PHP内部 GC 统计信息\n\n在PHP内部，可以显示更多的关于垃圾回收机制如何运行的信息。但是要显示这些信息，你需要先重新编译PHP使benchmark和data-collecting code可用。你需要在按照你的意愿运行`./configure`前，把环境变量`CFLAGS`设置成`-DGC_BENCH=1`。下面的命令串就是做这个事：\n\n\n\n**Example #4 重新编译PHP以启用GC benchmarking**\n\n```shell\nexport CFLAGS=-DGC_BENCH=1\n./config.nice\nmake clean\nmake\n```\n\n当你用新编译的PHP二进制文件来重新执行上面的例子代码，在PHP执行结束后，你将看到下面的信息：\n\n\n\n**Example #5 GC 统计数据**\n\n```shell\nGC Statistics\n-------------\nRuns:               110\nCollected:          2072204\nRoot buffer length: 0\nRoot buffer peak:   10000\n\n      Possible            Remove from  Marked\n        Root    Buffered     buffer     grey\n      --------  --------  -----------  ------\nZVAL   7175487   1491291    1241690   3611871\nZOBJ  28506264   1527980     677581   1025731\n```\n\n主要的信息统计在第一个块。你能看到垃圾回收机制运行了110次，而且在这110次运行中，总共有超过两百万的内存分配被释放。只要垃圾回收机制运行了至少一次，根缓冲区峰值(Root buffer peak)总是10000.\n\n### 结论\n\n通常，PHP中的垃圾回收机制，仅仅在循环回收算法确实运行时会有时间消耗上的增加。但是在平常的(更小的)脚本中应根本就没有性能影响。\n\n然而，在平常脚本中有循环回收机制运行的情况下，内存的节省将允许更多这种脚本同时运行在你的服务器上。因为总共使用的内存没达到上限。\n\n这种好处在长时间运行脚本中尤其明显，诸如长时间的测试套件或者daemon脚本此类。同时，对通常比Web脚本运行时间长的[» PHP-GTK](http://gtk.php.net/)应用程序，新的垃圾回收机制，应该会大大改变一直以来认为内存泄漏问题难以解决的看法。","slug":"CodeLanguage/PHP/PHP的垃圾回收机制-性能方面考虑的因素","published":1,"date":"2021-04-16T13:50:20.264Z","updated":"2021-04-29T10:24:59.132Z","_id":"ckotdh5vm0021kw8z4ai83he9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"性能方面考虑的因素\"><a href=\"#性能方面考虑的因素\" class=\"headerlink\" title=\"性能方面考虑的因素\"></a>性能方面考虑的因素</h2><p>在上一节我们已经简单的提到：回收可能根有细微的性能上影响，但这是把PHP 5.2与PHP 5.3比较时才有的。尽管在PHP 5.2中，记录可能根相对于完全不记录可能根要慢些，而PHP 5.3中对 PHP run-time 的其他修改减少了这个性能损失。</p>\n<p>这里主要有两个领域对性能有影响。第一个是内存占用空间的节省，另一个是垃圾回收机制执行内存清理时的执行时间增加(run-time delay)。我们将研究这两个领域。</p>\n<h3 id=\"内存占用空间的节省\"><a href=\"#内存占用空间的节省\" class=\"headerlink\" title=\"内存占用空间的节省\"></a>内存占用空间的节省</h3><p>首先，实现垃圾回收机制的整个原因是为了，一旦先决条件满足，通过清理循环引用的变量来节省内存占用。在PHP执行中，一旦根缓冲区满了或者调用<a href=\"https://www.php.net/manual/zh/function.gc-collect-cycles.php\">gc_collect_cycles()</a> 函数时，就会执行垃圾回收。在下图中，显示了下面脚本分别在PHP 5.2 和 PHP 5.3环境下的内存占用情况，其中排除了脚本启动时PHP本身占用的基本内存。</p>\n<p><strong>Example #1 Memory usage example</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var</span> = <span class=\"string\">&#x27;3.1415962654&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$baseMemory</span> = memory_get_usage();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt;= <span class=\"number\">100000</span>; <span class=\"variable\">$i</span>++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> Foo;</span><br><span class=\"line\">    <span class=\"variable\">$a</span>-&gt;self = <span class=\"variable\">$a</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"variable\">$i</span> % <span class=\"number\">500</span> === <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> sprintf( <span class=\"string\">&#x27;%8d: &#x27;</span>, <span class=\"variable\">$i</span> ), memory_get_usage() - <span class=\"variable\">$baseMemory</span>, <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-benchmark.png\" alt=\"Comparison of memory usage between PHP 5.2 and PHP 5.3\"></p>\n<p>在这个很理论性的例子中，我们创建了一个对象，这个对象中的一个属性被设置为指回对象本身。在循环的下一个重复(iteration)中，当脚本中的变量被重新复制时，就会发生典型性的内存泄漏。在这个例子中，两个变量容器是泄漏的(对象容器和属性容器)，但是仅仅能找到一个可能根：就是被unset的那个变量。在10,000次重复后(也就产生总共10,000个可能根)，当根缓冲区满时，就执行垃圾回收机制，并且释放那些关联的可能根的内存。这从PHP 5.3的锯齿型内存占用图中很容易就能看到。每次执行完10,000次重复后，执行垃圾回收，并释放相关的重复使用的引用变量。在这个例子中由于泄漏的数据结构非常简单，所以垃圾回收机制本身不必做太多工作。从这个图表中，你能看到 PHP 5.3的最大内存占用大概是9 Mb，而PHP 5.2的内存占用一直增加。</p>\n<h3 id=\"执行时间增加-Run-Time-Slowdowns\"><a href=\"#执行时间增加-Run-Time-Slowdowns\" class=\"headerlink\" title=\"执行时间增加(Run-Time Slowdowns)\"></a>执行时间增加(Run-Time Slowdowns)</h3><p>垃圾回收影响性能的第二个领域是它释放已泄漏的内存耗费的时间。为了看到这个耗时时多少，我们稍微改变了上面的脚本，有更多次数的重复并且删除了循环中的内存占用计算，第二个脚本代码如下：</p>\n<p><strong>Example #2 GC性能影响</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var</span> = <span class=\"string\">&#x27;3.1415962654&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt;= <span class=\"number\">1000000</span>; <span class=\"variable\">$i</span>++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> Foo;</span><br><span class=\"line\">    <span class=\"variable\">$a</span>-&gt;self = <span class=\"variable\">$a</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> memory_get_peak_usage(), <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们将运行这个脚本两次，一次通过配置<strong>zend.enable_gc</strong>打开垃圾回收机制时，另一次是它关闭时。</p>\n<p><strong>Example #3 执行以上脚本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time php -dzend.enable_gc=0 -dmemory_limit=-1 -n example2.php</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> and</span></span><br><span class=\"line\">time php -dzend.enable_gc=1 -dmemory_limit=-1 -n example2.php</span><br></pre></td></tr></table></figure>\n\n<p>在我的机器上，第一个命令持续执行时间大概为10.7秒，而第二个命令耗费11.4秒。时间上增加了7%。然而，执行这个脚本时内存占用的峰值降低了98%，从931Mb 降到 10Mb。这个基准不是很科学，或者并不能代表真实应用程序的数据，但是它的确显示了垃圾回收机制在内存占用方面的好处。好消息就是，对这个脚本而言，在执行中出现更多的循环引用变量时，内存节省的更多的情况下，每次时间增加的百分比都是7%。</p>\n<h3 id=\"PHP内部-GC-统计信息\"><a href=\"#PHP内部-GC-统计信息\" class=\"headerlink\" title=\"PHP内部 GC 统计信息\"></a>PHP内部 GC 统计信息</h3><p>在PHP内部，可以显示更多的关于垃圾回收机制如何运行的信息。但是要显示这些信息，你需要先重新编译PHP使benchmark和data-collecting code可用。你需要在按照你的意愿运行<code>./configure</code>前，把环境变量<code>CFLAGS</code>设置成<code>-DGC_BENCH=1</code>。下面的命令串就是做这个事：</p>\n<p><strong>Example #4 重新编译PHP以启用GC benchmarking</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CFLAGS=-DGC_BENCH=1</span><br><span class=\"line\">./config.nice</span><br><span class=\"line\">make clean</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>当你用新编译的PHP二进制文件来重新执行上面的例子代码，在PHP执行结束后，你将看到下面的信息：</p>\n<p><strong>Example #5 GC 统计数据</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GC Statistics</span><br><span class=\"line\">-------------</span><br><span class=\"line\">Runs:               110</span><br><span class=\"line\">Collected:          2072204</span><br><span class=\"line\">Root buffer length: 0</span><br><span class=\"line\">Root buffer peak:   10000</span><br><span class=\"line\"></span><br><span class=\"line\">      Possible            Remove from  Marked</span><br><span class=\"line\">        Root    Buffered     buffer     grey</span><br><span class=\"line\">      --------  --------  -----------  ------</span><br><span class=\"line\">ZVAL   7175487   1491291    1241690   3611871</span><br><span class=\"line\">ZOBJ  28506264   1527980     677581   1025731</span><br></pre></td></tr></table></figure>\n\n<p>主要的信息统计在第一个块。你能看到垃圾回收机制运行了110次，而且在这110次运行中，总共有超过两百万的内存分配被释放。只要垃圾回收机制运行了至少一次，根缓冲区峰值(Root buffer peak)总是10000.</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>通常，PHP中的垃圾回收机制，仅仅在循环回收算法确实运行时会有时间消耗上的增加。但是在平常的(更小的)脚本中应根本就没有性能影响。</p>\n<p>然而，在平常脚本中有循环回收机制运行的情况下，内存的节省将允许更多这种脚本同时运行在你的服务器上。因为总共使用的内存没达到上限。</p>\n<p>这种好处在长时间运行脚本中尤其明显，诸如长时间的测试套件或者daemon脚本此类。同时，对通常比Web脚本运行时间长的<a href=\"http://gtk.php.net/\">» PHP-GTK</a>应用程序，新的垃圾回收机制，应该会大大改变一直以来认为内存泄漏问题难以解决的看法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"性能方面考虑的因素\"><a href=\"#性能方面考虑的因素\" class=\"headerlink\" title=\"性能方面考虑的因素\"></a>性能方面考虑的因素</h2><p>在上一节我们已经简单的提到：回收可能根有细微的性能上影响，但这是把PHP 5.2与PHP 5.3比较时才有的。尽管在PHP 5.2中，记录可能根相对于完全不记录可能根要慢些，而PHP 5.3中对 PHP run-time 的其他修改减少了这个性能损失。</p>\n<p>这里主要有两个领域对性能有影响。第一个是内存占用空间的节省，另一个是垃圾回收机制执行内存清理时的执行时间增加(run-time delay)。我们将研究这两个领域。</p>\n<h3 id=\"内存占用空间的节省\"><a href=\"#内存占用空间的节省\" class=\"headerlink\" title=\"内存占用空间的节省\"></a>内存占用空间的节省</h3><p>首先，实现垃圾回收机制的整个原因是为了，一旦先决条件满足，通过清理循环引用的变量来节省内存占用。在PHP执行中，一旦根缓冲区满了或者调用<a href=\"https://www.php.net/manual/zh/function.gc-collect-cycles.php\">gc_collect_cycles()</a> 函数时，就会执行垃圾回收。在下图中，显示了下面脚本分别在PHP 5.2 和 PHP 5.3环境下的内存占用情况，其中排除了脚本启动时PHP本身占用的基本内存。</p>\n<p><strong>Example #1 Memory usage example</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var</span> = <span class=\"string\">&#x27;3.1415962654&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$baseMemory</span> = memory_get_usage();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt;= <span class=\"number\">100000</span>; <span class=\"variable\">$i</span>++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> Foo;</span><br><span class=\"line\">    <span class=\"variable\">$a</span>-&gt;self = <span class=\"variable\">$a</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"variable\">$i</span> % <span class=\"number\">500</span> === <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> sprintf( <span class=\"string\">&#x27;%8d: &#x27;</span>, <span class=\"variable\">$i</span> ), memory_get_usage() - <span class=\"variable\">$baseMemory</span>, <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-gc-benchmark.png\" alt=\"Comparison of memory usage between PHP 5.2 and PHP 5.3\"></p>\n<p>在这个很理论性的例子中，我们创建了一个对象，这个对象中的一个属性被设置为指回对象本身。在循环的下一个重复(iteration)中，当脚本中的变量被重新复制时，就会发生典型性的内存泄漏。在这个例子中，两个变量容器是泄漏的(对象容器和属性容器)，但是仅仅能找到一个可能根：就是被unset的那个变量。在10,000次重复后(也就产生总共10,000个可能根)，当根缓冲区满时，就执行垃圾回收机制，并且释放那些关联的可能根的内存。这从PHP 5.3的锯齿型内存占用图中很容易就能看到。每次执行完10,000次重复后，执行垃圾回收，并释放相关的重复使用的引用变量。在这个例子中由于泄漏的数据结构非常简单，所以垃圾回收机制本身不必做太多工作。从这个图表中，你能看到 PHP 5.3的最大内存占用大概是9 Mb，而PHP 5.2的内存占用一直增加。</p>\n<h3 id=\"执行时间增加-Run-Time-Slowdowns\"><a href=\"#执行时间增加-Run-Time-Slowdowns\" class=\"headerlink\" title=\"执行时间增加(Run-Time Slowdowns)\"></a>执行时间增加(Run-Time Slowdowns)</h3><p>垃圾回收影响性能的第二个领域是它释放已泄漏的内存耗费的时间。为了看到这个耗时时多少，我们稍微改变了上面的脚本，有更多次数的重复并且删除了循环中的内存占用计算，第二个脚本代码如下：</p>\n<p><strong>Example #2 GC性能影响</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var</span> = <span class=\"string\">&#x27;3.1415962654&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt;= <span class=\"number\">1000000</span>; <span class=\"variable\">$i</span>++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> Foo;</span><br><span class=\"line\">    <span class=\"variable\">$a</span>-&gt;self = <span class=\"variable\">$a</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> memory_get_peak_usage(), <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们将运行这个脚本两次，一次通过配置<strong>zend.enable_gc</strong>打开垃圾回收机制时，另一次是它关闭时。</p>\n<p><strong>Example #3 执行以上脚本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time php -dzend.enable_gc=0 -dmemory_limit=-1 -n example2.php</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> and</span></span><br><span class=\"line\">time php -dzend.enable_gc=1 -dmemory_limit=-1 -n example2.php</span><br></pre></td></tr></table></figure>\n\n<p>在我的机器上，第一个命令持续执行时间大概为10.7秒，而第二个命令耗费11.4秒。时间上增加了7%。然而，执行这个脚本时内存占用的峰值降低了98%，从931Mb 降到 10Mb。这个基准不是很科学，或者并不能代表真实应用程序的数据，但是它的确显示了垃圾回收机制在内存占用方面的好处。好消息就是，对这个脚本而言，在执行中出现更多的循环引用变量时，内存节省的更多的情况下，每次时间增加的百分比都是7%。</p>\n<h3 id=\"PHP内部-GC-统计信息\"><a href=\"#PHP内部-GC-统计信息\" class=\"headerlink\" title=\"PHP内部 GC 统计信息\"></a>PHP内部 GC 统计信息</h3><p>在PHP内部，可以显示更多的关于垃圾回收机制如何运行的信息。但是要显示这些信息，你需要先重新编译PHP使benchmark和data-collecting code可用。你需要在按照你的意愿运行<code>./configure</code>前，把环境变量<code>CFLAGS</code>设置成<code>-DGC_BENCH=1</code>。下面的命令串就是做这个事：</p>\n<p><strong>Example #4 重新编译PHP以启用GC benchmarking</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CFLAGS=-DGC_BENCH=1</span><br><span class=\"line\">./config.nice</span><br><span class=\"line\">make clean</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>当你用新编译的PHP二进制文件来重新执行上面的例子代码，在PHP执行结束后，你将看到下面的信息：</p>\n<p><strong>Example #5 GC 统计数据</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GC Statistics</span><br><span class=\"line\">-------------</span><br><span class=\"line\">Runs:               110</span><br><span class=\"line\">Collected:          2072204</span><br><span class=\"line\">Root buffer length: 0</span><br><span class=\"line\">Root buffer peak:   10000</span><br><span class=\"line\"></span><br><span class=\"line\">      Possible            Remove from  Marked</span><br><span class=\"line\">        Root    Buffered     buffer     grey</span><br><span class=\"line\">      --------  --------  -----------  ------</span><br><span class=\"line\">ZVAL   7175487   1491291    1241690   3611871</span><br><span class=\"line\">ZOBJ  28506264   1527980     677581   1025731</span><br></pre></td></tr></table></figure>\n\n<p>主要的信息统计在第一个块。你能看到垃圾回收机制运行了110次，而且在这110次运行中，总共有超过两百万的内存分配被释放。只要垃圾回收机制运行了至少一次，根缓冲区峰值(Root buffer peak)总是10000.</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>通常，PHP中的垃圾回收机制，仅仅在循环回收算法确实运行时会有时间消耗上的增加。但是在平常的(更小的)脚本中应根本就没有性能影响。</p>\n<p>然而，在平常脚本中有循环回收机制运行的情况下，内存的节省将允许更多这种脚本同时运行在你的服务器上。因为总共使用的内存没达到上限。</p>\n<p>这种好处在长时间运行脚本中尤其明显，诸如长时间的测试套件或者daemon脚本此类。同时，对通常比Web脚本运行时间长的<a href=\"http://gtk.php.net/\">» PHP-GTK</a>应用程序，新的垃圾回收机制，应该会大大改变一直以来认为内存泄漏问题难以解决的看法。</p>\n"},{"title":"PHP的垃圾回收机制","abbrlink":512206887,"_content":"\n#### 资料：\n\n- [引用计数基本知识](https://www.php.net/manual/zh/features.gc.refcounting-basics.php)\n- [回收周期(Collecting Cycles)](https://www.php.net/manual/zh/features.gc.collecting-cycles.php)\n- [性能方面考虑的因素](https://www.php.net/manual/zh/features.gc.performance-considerations.php)\n\n官方文档：https://www.php.net/manual/zh/features.gc.php","source":"_posts/CodeLanguage/PHP/PHP的垃圾回收机制.md","raw":"---\ntitle: PHP的垃圾回收机制\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 512206887\n---\n\n#### 资料：\n\n- [引用计数基本知识](https://www.php.net/manual/zh/features.gc.refcounting-basics.php)\n- [回收周期(Collecting Cycles)](https://www.php.net/manual/zh/features.gc.collecting-cycles.php)\n- [性能方面考虑的因素](https://www.php.net/manual/zh/features.gc.performance-considerations.php)\n\n官方文档：https://www.php.net/manual/zh/features.gc.php","slug":"CodeLanguage/PHP/PHP的垃圾回收机制","published":1,"date":"2021-04-16T13:50:20.275Z","updated":"2021-04-29T10:24:59.136Z","_id":"ckotdh5vq0022kw8zdgnr8qf4","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"资料：\"><a href=\"#资料：\" class=\"headerlink\" title=\"资料：\"></a>资料：</h4><ul>\n<li><a href=\"https://www.php.net/manual/zh/features.gc.refcounting-basics.php\">引用计数基本知识</a></li>\n<li><a href=\"https://www.php.net/manual/zh/features.gc.collecting-cycles.php\">回收周期(Collecting Cycles)</a></li>\n<li><a href=\"https://www.php.net/manual/zh/features.gc.performance-considerations.php\">性能方面考虑的因素</a></li>\n</ul>\n<p>官方文档：<a href=\"https://www.php.net/manual/zh/features.gc.php\">https://www.php.net/manual/zh/features.gc.php</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"资料：\"><a href=\"#资料：\" class=\"headerlink\" title=\"资料：\"></a>资料：</h4><ul>\n<li><a href=\"https://www.php.net/manual/zh/features.gc.refcounting-basics.php\">引用计数基本知识</a></li>\n<li><a href=\"https://www.php.net/manual/zh/features.gc.collecting-cycles.php\">回收周期(Collecting Cycles)</a></li>\n<li><a href=\"https://www.php.net/manual/zh/features.gc.performance-considerations.php\">性能方面考虑的因素</a></li>\n</ul>\n<p>官方文档：<a href=\"https://www.php.net/manual/zh/features.gc.php\">https://www.php.net/manual/zh/features.gc.php</a></p>\n"},{"title":"PHP自动加载机制","abbrlink":3981571320,"_content":"\n类的载入共经历了三个阶段：\n\n- 第一阶段是面向过程式的做法，整个项目里到处都是include或require\n\n- 第二阶段是魔术方法 __autoload ，当new一个类的时候，如果类不存在，则会调用此方法传入类名。autoload机制可以使得PHP程序在使用类时才自动包含文件，而不是一开始就将所有的类文件全部包含，这就是自动加载，\n\n​       问题：如今的项目越做越大，多人开发最终整合，甚至一个项目使用多个框架，这样就导致出现多个 __autoload 函数，函数名报错，函数内容不兼容。\n\n- 第三阶段是目前的做法，PHP推出了spl_autoload_register方法，该方法可以注册一个autoload，并且可以多次注册\n\n\n\n详细参考：https://www.cnblogs.com/fengyumeng/p/7749988.html","source":"_posts/CodeLanguage/PHP/PHP自动加载机制.md","raw":"---\ntitle: PHP自动加载机制\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 3981571320\n---\n\n类的载入共经历了三个阶段：\n\n- 第一阶段是面向过程式的做法，整个项目里到处都是include或require\n\n- 第二阶段是魔术方法 __autoload ，当new一个类的时候，如果类不存在，则会调用此方法传入类名。autoload机制可以使得PHP程序在使用类时才自动包含文件，而不是一开始就将所有的类文件全部包含，这就是自动加载，\n\n​       问题：如今的项目越做越大，多人开发最终整合，甚至一个项目使用多个框架，这样就导致出现多个 __autoload 函数，函数名报错，函数内容不兼容。\n\n- 第三阶段是目前的做法，PHP推出了spl_autoload_register方法，该方法可以注册一个autoload，并且可以多次注册\n\n\n\n详细参考：https://www.cnblogs.com/fengyumeng/p/7749988.html","slug":"CodeLanguage/PHP/PHP自动加载机制","published":1,"date":"2021-04-16T13:50:20.241Z","updated":"2021-04-29T10:24:59.140Z","_id":"ckotdh5vr0024kw8z3pp35qcb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>类的载入共经历了三个阶段：</p>\n<ul>\n<li><p>第一阶段是面向过程式的做法，整个项目里到处都是include或require</p>\n</li>\n<li><p>第二阶段是魔术方法 __autoload ，当new一个类的时候，如果类不存在，则会调用此方法传入类名。autoload机制可以使得PHP程序在使用类时才自动包含文件，而不是一开始就将所有的类文件全部包含，这就是自动加载，</p>\n</li>\n</ul>\n<p>​       问题：如今的项目越做越大，多人开发最终整合，甚至一个项目使用多个框架，这样就导致出现多个 __autoload 函数，函数名报错，函数内容不兼容。</p>\n<ul>\n<li>第三阶段是目前的做法，PHP推出了spl_autoload_register方法，该方法可以注册一个autoload，并且可以多次注册</li>\n</ul>\n<p>详细参考：<a href=\"https://www.cnblogs.com/fengyumeng/p/7749988.html\">https://www.cnblogs.com/fengyumeng/p/7749988.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>类的载入共经历了三个阶段：</p>\n<ul>\n<li><p>第一阶段是面向过程式的做法，整个项目里到处都是include或require</p>\n</li>\n<li><p>第二阶段是魔术方法 __autoload ，当new一个类的时候，如果类不存在，则会调用此方法传入类名。autoload机制可以使得PHP程序在使用类时才自动包含文件，而不是一开始就将所有的类文件全部包含，这就是自动加载，</p>\n</li>\n</ul>\n<p>​       问题：如今的项目越做越大，多人开发最终整合，甚至一个项目使用多个框架，这样就导致出现多个 __autoload 函数，函数名报错，函数内容不兼容。</p>\n<ul>\n<li>第三阶段是目前的做法，PHP推出了spl_autoload_register方法，该方法可以注册一个autoload，并且可以多次注册</li>\n</ul>\n<p>详细参考：<a href=\"https://www.cnblogs.com/fengyumeng/p/7749988.html\">https://www.cnblogs.com/fengyumeng/p/7749988.html</a></p>\n"},{"title":"self和$this的区别","abbrlink":137484498,"_content":"\n最主要的区别是self代表的是类, $this代表的是对象\n\n静态成员是给类调用的, 不是给 $this 调用的\n\n类外部：访问const(常量)或static(静态)修饰的成员, 必须使用 :: 操作符, 除此之外的成员必须使用操作符 ->\n\n类内部：访问const(常量)或static(静态)修饰的成员, 必须使用 self:: 操作符, 除此之外的成员必须使用操作符 $this->\n\n```php\n<?php\n\n\nclass Animal\n{\n    public $name = 'Animal';\n    public static $age = 10;\n\n\n    public function myPrint()\n    {\n// Animal\n        echo $this->name;\n// 10\n        echo self::$age;\n// 10 特殊用法, 允许使用 $this::$age 替代 self::$age\n        echo $this::$age;\n    }\n}\n\n\n// 类的外部访问\n// 10\necho Animal::$age;\n$animal = new Animal;\n// Animal\necho $animal->name;\n\n\n// 类的内部访问\n// Animal 10 10\n$animal->myPrint();\n```\n\n","source":"_posts/CodeLanguage/PHP/self和$this的区别.md","raw":"---\ntitle: self和$this的区别\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 137484498\n---\n\n最主要的区别是self代表的是类, $this代表的是对象\n\n静态成员是给类调用的, 不是给 $this 调用的\n\n类外部：访问const(常量)或static(静态)修饰的成员, 必须使用 :: 操作符, 除此之外的成员必须使用操作符 ->\n\n类内部：访问const(常量)或static(静态)修饰的成员, 必须使用 self:: 操作符, 除此之外的成员必须使用操作符 $this->\n\n```php\n<?php\n\n\nclass Animal\n{\n    public $name = 'Animal';\n    public static $age = 10;\n\n\n    public function myPrint()\n    {\n// Animal\n        echo $this->name;\n// 10\n        echo self::$age;\n// 10 特殊用法, 允许使用 $this::$age 替代 self::$age\n        echo $this::$age;\n    }\n}\n\n\n// 类的外部访问\n// 10\necho Animal::$age;\n$animal = new Animal;\n// Animal\necho $animal->name;\n\n\n// 类的内部访问\n// Animal 10 10\n$animal->myPrint();\n```\n\n","slug":"CodeLanguage/PHP/self和$this的区别","published":1,"date":"2021-04-16T13:50:20.282Z","updated":"2021-04-29T10:24:59.143Z","_id":"ckotdh5vs0025kw8z4ls57n4z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最主要的区别是self代表的是类, $this代表的是对象</p>\n<p>静态成员是给类调用的, 不是给 $this 调用的</p>\n<p>类外部：访问const(常量)或static(静态)修饰的成员, 必须使用 :: 操作符, 除此之外的成员必须使用操作符 -&gt;</p>\n<p>类内部：访问const(常量)或static(静态)修饰的成员, 必须使用 self:: 操作符, 除此之外的成员必须使用操作符 $this-&gt;</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;Animal&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"variable\">$age</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myPrint</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// Animal</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;name;</span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">self</span>::<span class=\"variable\">$age</span>;</span><br><span class=\"line\"><span class=\"comment\">// 10 特殊用法, 允许使用 $this::$age 替代 self::$age</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>::<span class=\"variable\">$age</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类的外部访问</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> Animal::<span class=\"variable\">$age</span>;</span><br><span class=\"line\"><span class=\"variable\">$animal</span> = <span class=\"keyword\">new</span> Animal;</span><br><span class=\"line\"><span class=\"comment\">// Animal</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$animal</span>-&gt;name;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类的内部访问</span></span><br><span class=\"line\"><span class=\"comment\">// Animal 10 10</span></span><br><span class=\"line\"><span class=\"variable\">$animal</span>-&gt;myPrint();</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>最主要的区别是self代表的是类, $this代表的是对象</p>\n<p>静态成员是给类调用的, 不是给 $this 调用的</p>\n<p>类外部：访问const(常量)或static(静态)修饰的成员, 必须使用 :: 操作符, 除此之外的成员必须使用操作符 -&gt;</p>\n<p>类内部：访问const(常量)或static(静态)修饰的成员, 必须使用 self:: 操作符, 除此之外的成员必须使用操作符 $this-&gt;</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;Animal&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"variable\">$age</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myPrint</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// Animal</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;name;</span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"built_in\">self</span>::<span class=\"variable\">$age</span>;</span><br><span class=\"line\"><span class=\"comment\">// 10 特殊用法, 允许使用 $this::$age 替代 self::$age</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>::<span class=\"variable\">$age</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类的外部访问</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> Animal::<span class=\"variable\">$age</span>;</span><br><span class=\"line\"><span class=\"variable\">$animal</span> = <span class=\"keyword\">new</span> Animal;</span><br><span class=\"line\"><span class=\"comment\">// Animal</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$animal</span>-&gt;name;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类的内部访问</span></span><br><span class=\"line\"><span class=\"comment\">// Animal 10 10</span></span><br><span class=\"line\"><span class=\"variable\">$animal</span>-&gt;myPrint();</span><br></pre></td></tr></table></figure>\n\n"},{"title":"PHP的垃圾回收机制-引用计数","abbrlink":2776614029,"_content":"\n## 引用计数基本知识\n\n每个php变量存在一个叫\"zval\"的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是\"is_ref\"，是个bool值，用来标识这个变量是否是属于引用集合(reference set)。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是\"refcount\"，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域(scope)，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。\n\n当一个变量被赋常量值时，就会生成一个zval变量容器，如下例这样：\n\n**Example #1 生成一个新的zval容器**\n\n```php\n<?php$a = \"new string\";?>\n```\n\n在上例中，新的变量`a`，是在当前作用域中生成的。并且生成了类型为 string 和值为`new string`的变量容器。在额外的两个字节信息中，\"is_ref\"被默认设置为 **`FALSE`**，因为没有任何自定义的引用生成。\"refcount\" 被设定为 `1`，因为这里只有一个变量使用这个变量容器. 注意到当\"refcount\"的值是`1`时，\"is_ref\"的值总是**`FALSE`**. 如果你已经安装了[» Xdebug](http://xdebug.org/)，你能通过调用函数 **xdebug_debug_zval()**显示\"refcount\"和\"is_ref\"的值。\n\n**Example #2 显示zval信息**\n\n```php\n<?phpxdebug_debug_zval('a');?>\n```\n\n以上例程会输出：\n\n```php\na: (refcount=1, is_ref=0)='new string'\n```\n\n把一个变量赋值给另一变量将增加引用次数(refcount).\n\n**Example #3 增加一个zval的引用计数**\n\n```php\n<?php$a = \"new string\";$b = $a;xdebug_debug_zval( 'a' );?>\n```\n\n以上例程会输出：\n\n```php\na: (refcount=2, is_ref=0)='new string'\n```\n\n这时，引用次数是`2`，因为同一个变量容器被变量 a 和变量 b关联.当没必要时，php不会去复制已生成的变量容器。变量容器在”refcount“变成0时就被销毁. 当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 [unset()](https://www.php.net/manual/zh/function.unset.php)时，”refcount“就会减1，下面的例子就能说明:\n\n**Example #4 减少引用计数**\n\n```php\n<?php$a = \"new string\";$c = $b = $a;xdebug_debug_zval( 'a' );unset( $b, $c );xdebug_debug_zval( 'a' );?>\n```\n\n以上例程会输出：\n\n```php\na: (refcount=3, is_ref=0)='new string'\na: (refcount=1, is_ref=0)='new string'\n```\n\n如果我们现在执行 `unset($a);`，包含类型和值的这个变量容器就会从内存中删除。\n\n### 复合类型(Compound Types)\n\n当考虑像 array和object这样的复合类型时，事情就稍微有点复杂. 与 标量(scalar)类型的值不同，array和 object类型的变量把它们的成员或属性存在自己的符号表中。这意味着下面的例子将生成三个zval变量容器。\n\n**Example #5 Creating a array zval**\n\n```php\n<?php$a = array( 'meaning' => 'life', 'number' => 42 );xdebug_debug_zval( 'a' );?>\n```\n\n以上例程的输出类似于：\n\n```php\na: (refcount=1, is_ref=0)=array (\n   'meaning' => (refcount=1, is_ref=0)='life',\n   'number' => (refcount=1, is_ref=0)=42\n)\n```\n\n图示:\n\n![一个简单数组的zval](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array.png)\n\n这三个zval变量容器是: a，meaning和 number。增加和减少”refcount”的规则和上面提到的一样. 下面, 我们在数组中再添加一个元素,并且把它的值设为数组中已存在元素的值:\n\n\n\n**Example #6 添加一个已经存在的元素到数组中**\n\n```php\n<?php$a = array( 'meaning' => 'life', 'number' => 42 );$a['life'] = $a['meaning'];xdebug_debug_zval( 'a' );?>\n```\n\n以上例程的输出类似于：\n\n```php\na: (refcount=1, is_ref=0)=array (\n   'meaning' => (refcount=2, is_ref=0)='life',\n   'number' => (refcount=1, is_ref=0)=42,\n   'life' => (refcount=2, is_ref=0)='life'\n)\n```\n\n图示：\n\n![带有引用的简单数组的zval](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array2.png)\n\n从以上的xdebug输出信息，我们看到原有的数组元素和新添加的数组元素关联到同一个\"refcount\"`2`的zval变量容器. 尽管 Xdebug的输出显示两个值为`'life'`的 zval 变量容器，其实是同一个。 函数**xdebug_debug_zval()**不显示这个信息，但是你能通过显示内存指针信息来看到。\n\n删除数组中的一个元素，就是类似于从作用域中删除一个变量. 删除后,数组中的这个元素所在的容器的“refcount”值减少，同样，当“refcount”为0时，这个变量容器就从内存中被删除，下面又一个例子可以说明：\n\n\n\n**Example #7 从数组中删除一个元素**\n\n```php\n<?php$a = array( 'meaning' => 'life', 'number' => 42 );$a['life'] = $a['meaning'];unset( $a['meaning'], $a['number'] );xdebug_debug_zval( 'a' );?>\n```\n\n以上例程的输出类似于：\n\n```php\na: (refcount=1, is_ref=0)=array (\n   'life' => (refcount=1, is_ref=0)='life'\n)\n```\n\n现在，当我们添加一个数组本身作为这个数组的元素时，事情就变得有趣，下个例子将说明这个。例中我们加入了引用操作符，否则php将生成一个复制。\n\n\n\n**Example #8 把数组作为一个元素添加到自己**\n\n```php\n<?php$a = array( 'one' );$a[] =& $a;xdebug_debug_zval( 'a' );?>\n```\n\n以上例程的输出类似于：\n\n```php\na: (refcount=2, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=2, is_ref=1)=...\n)\n```\n\n图示：\n\n![自引用(curcular reference,自己是自己的一个元素)的数组的zval](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-loop-array.png)\n\n能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 `2`。上面的输出结果中的\"...\"说明发生了递归操作, 显然在这种情况下意味着\"...\"指向原始数组。\n\n跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量$a调用unset, 那么变量 $a 和数组元素 \"1\" 所指向的变量容器的引用次数减1, 从\"2\"变成\"1\". 下例可以说明:\n\n\n\n**Example #9 Unsetting $a**\n\n```php\n(refcount=1, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=1, is_ref=1)=...\n)\n```\n\n图示：\n\n![Zvals after removal of array with a circular reference demonstrating the memory leak](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-leak-array.png)\n\n### 清理变量容器的问题(Cleanup Problems)\n\n尽管不再有某个作用域中的任何符号指向这个结构(就是变量容器)，由于数组元素“1”仍然指向数组本身，所以这个容器不能被清除 。因为没有另外的符号指向它，用户没有办法清除这个结构，结果就会导致内存泄漏。庆幸的是，php将在脚本执行结束时清除这个数据结构，但是在php清除之前，将耗费不少内存。如果你要实现分析算法，或者要做其他像一个子元素指向它的父元素这样的事情，这种情况就会经常发生。当然，同样的情况也会发生在对象上，实际上对象更有可能出现这种情况，因为对象总是隐式的被引用。\n\n如果上面的情况发生仅仅一两次倒没什么，但是如果出现几千次，甚至几十万次的内存泄漏，这显然是个大问题。这样的问题往往发生在长时间运行的脚本中，比如请求基本上不会结束的守护进程(deamons)或者单元测试中的大的套件(sets)中。后者的例子：在给巨大的eZ(一个知名的PHP Library) 组件库的模板组件做单元测试时，就可能会出现问题。有时测试可能需要耗用2GB的内存，而测试服务器很可能没有这么大的内存。","source":"_posts/CodeLanguage/PHP/PHP的垃圾回收机制-引用计数.md","raw":"---\ntitle: PHP的垃圾回收机制-引用计数\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 2776614029\n---\n\n## 引用计数基本知识\n\n每个php变量存在一个叫\"zval\"的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是\"is_ref\"，是个bool值，用来标识这个变量是否是属于引用集合(reference set)。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是\"refcount\"，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域(scope)，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。\n\n当一个变量被赋常量值时，就会生成一个zval变量容器，如下例这样：\n\n**Example #1 生成一个新的zval容器**\n\n```php\n<?php$a = \"new string\";?>\n```\n\n在上例中，新的变量`a`，是在当前作用域中生成的。并且生成了类型为 string 和值为`new string`的变量容器。在额外的两个字节信息中，\"is_ref\"被默认设置为 **`FALSE`**，因为没有任何自定义的引用生成。\"refcount\" 被设定为 `1`，因为这里只有一个变量使用这个变量容器. 注意到当\"refcount\"的值是`1`时，\"is_ref\"的值总是**`FALSE`**. 如果你已经安装了[» Xdebug](http://xdebug.org/)，你能通过调用函数 **xdebug_debug_zval()**显示\"refcount\"和\"is_ref\"的值。\n\n**Example #2 显示zval信息**\n\n```php\n<?phpxdebug_debug_zval('a');?>\n```\n\n以上例程会输出：\n\n```php\na: (refcount=1, is_ref=0)='new string'\n```\n\n把一个变量赋值给另一变量将增加引用次数(refcount).\n\n**Example #3 增加一个zval的引用计数**\n\n```php\n<?php$a = \"new string\";$b = $a;xdebug_debug_zval( 'a' );?>\n```\n\n以上例程会输出：\n\n```php\na: (refcount=2, is_ref=0)='new string'\n```\n\n这时，引用次数是`2`，因为同一个变量容器被变量 a 和变量 b关联.当没必要时，php不会去复制已生成的变量容器。变量容器在”refcount“变成0时就被销毁. 当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 [unset()](https://www.php.net/manual/zh/function.unset.php)时，”refcount“就会减1，下面的例子就能说明:\n\n**Example #4 减少引用计数**\n\n```php\n<?php$a = \"new string\";$c = $b = $a;xdebug_debug_zval( 'a' );unset( $b, $c );xdebug_debug_zval( 'a' );?>\n```\n\n以上例程会输出：\n\n```php\na: (refcount=3, is_ref=0)='new string'\na: (refcount=1, is_ref=0)='new string'\n```\n\n如果我们现在执行 `unset($a);`，包含类型和值的这个变量容器就会从内存中删除。\n\n### 复合类型(Compound Types)\n\n当考虑像 array和object这样的复合类型时，事情就稍微有点复杂. 与 标量(scalar)类型的值不同，array和 object类型的变量把它们的成员或属性存在自己的符号表中。这意味着下面的例子将生成三个zval变量容器。\n\n**Example #5 Creating a array zval**\n\n```php\n<?php$a = array( 'meaning' => 'life', 'number' => 42 );xdebug_debug_zval( 'a' );?>\n```\n\n以上例程的输出类似于：\n\n```php\na: (refcount=1, is_ref=0)=array (\n   'meaning' => (refcount=1, is_ref=0)='life',\n   'number' => (refcount=1, is_ref=0)=42\n)\n```\n\n图示:\n\n![一个简单数组的zval](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array.png)\n\n这三个zval变量容器是: a，meaning和 number。增加和减少”refcount”的规则和上面提到的一样. 下面, 我们在数组中再添加一个元素,并且把它的值设为数组中已存在元素的值:\n\n\n\n**Example #6 添加一个已经存在的元素到数组中**\n\n```php\n<?php$a = array( 'meaning' => 'life', 'number' => 42 );$a['life'] = $a['meaning'];xdebug_debug_zval( 'a' );?>\n```\n\n以上例程的输出类似于：\n\n```php\na: (refcount=1, is_ref=0)=array (\n   'meaning' => (refcount=2, is_ref=0)='life',\n   'number' => (refcount=1, is_ref=0)=42,\n   'life' => (refcount=2, is_ref=0)='life'\n)\n```\n\n图示：\n\n![带有引用的简单数组的zval](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array2.png)\n\n从以上的xdebug输出信息，我们看到原有的数组元素和新添加的数组元素关联到同一个\"refcount\"`2`的zval变量容器. 尽管 Xdebug的输出显示两个值为`'life'`的 zval 变量容器，其实是同一个。 函数**xdebug_debug_zval()**不显示这个信息，但是你能通过显示内存指针信息来看到。\n\n删除数组中的一个元素，就是类似于从作用域中删除一个变量. 删除后,数组中的这个元素所在的容器的“refcount”值减少，同样，当“refcount”为0时，这个变量容器就从内存中被删除，下面又一个例子可以说明：\n\n\n\n**Example #7 从数组中删除一个元素**\n\n```php\n<?php$a = array( 'meaning' => 'life', 'number' => 42 );$a['life'] = $a['meaning'];unset( $a['meaning'], $a['number'] );xdebug_debug_zval( 'a' );?>\n```\n\n以上例程的输出类似于：\n\n```php\na: (refcount=1, is_ref=0)=array (\n   'life' => (refcount=1, is_ref=0)='life'\n)\n```\n\n现在，当我们添加一个数组本身作为这个数组的元素时，事情就变得有趣，下个例子将说明这个。例中我们加入了引用操作符，否则php将生成一个复制。\n\n\n\n**Example #8 把数组作为一个元素添加到自己**\n\n```php\n<?php$a = array( 'one' );$a[] =& $a;xdebug_debug_zval( 'a' );?>\n```\n\n以上例程的输出类似于：\n\n```php\na: (refcount=2, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=2, is_ref=1)=...\n)\n```\n\n图示：\n\n![自引用(curcular reference,自己是自己的一个元素)的数组的zval](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-loop-array.png)\n\n能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 `2`。上面的输出结果中的\"...\"说明发生了递归操作, 显然在这种情况下意味着\"...\"指向原始数组。\n\n跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量$a调用unset, 那么变量 $a 和数组元素 \"1\" 所指向的变量容器的引用次数减1, 从\"2\"变成\"1\". 下例可以说明:\n\n\n\n**Example #9 Unsetting $a**\n\n```php\n(refcount=1, is_ref=1)=array (\n   0 => (refcount=1, is_ref=0)='one',\n   1 => (refcount=1, is_ref=1)=...\n)\n```\n\n图示：\n\n![Zvals after removal of array with a circular reference demonstrating the memory leak](https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-leak-array.png)\n\n### 清理变量容器的问题(Cleanup Problems)\n\n尽管不再有某个作用域中的任何符号指向这个结构(就是变量容器)，由于数组元素“1”仍然指向数组本身，所以这个容器不能被清除 。因为没有另外的符号指向它，用户没有办法清除这个结构，结果就会导致内存泄漏。庆幸的是，php将在脚本执行结束时清除这个数据结构，但是在php清除之前，将耗费不少内存。如果你要实现分析算法，或者要做其他像一个子元素指向它的父元素这样的事情，这种情况就会经常发生。当然，同样的情况也会发生在对象上，实际上对象更有可能出现这种情况，因为对象总是隐式的被引用。\n\n如果上面的情况发生仅仅一两次倒没什么，但是如果出现几千次，甚至几十万次的内存泄漏，这显然是个大问题。这样的问题往往发生在长时间运行的脚本中，比如请求基本上不会结束的守护进程(deamons)或者单元测试中的大的套件(sets)中。后者的例子：在给巨大的eZ(一个知名的PHP Library) 组件库的模板组件做单元测试时，就可能会出现问题。有时测试可能需要耗用2GB的内存，而测试服务器很可能没有这么大的内存。","slug":"CodeLanguage/PHP/PHP的垃圾回收机制-引用计数","published":1,"date":"2021-04-16T13:50:20.247Z","updated":"2021-04-29T10:24:59.130Z","_id":"ckotdh5vv0027kw8z8l6xb8yh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"引用计数基本知识\"><a href=\"#引用计数基本知识\" class=\"headerlink\" title=\"引用计数基本知识\"></a>引用计数基本知识</h2><p>每个php变量存在一个叫”zval”的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是”is_ref”，是个bool值，用来标识这个变量是否是属于引用集合(reference set)。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&amp;来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是”refcount”，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域(scope)，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。</p>\n<p>当一个变量被赋常量值时，就会生成一个zval变量容器，如下例这样：</p>\n<p><strong>Example #1 生成一个新的zval容器</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"string\">&quot;new string&quot;</span>;<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上例中，新的变量<code>a</code>，是在当前作用域中生成的。并且生成了类型为 string 和值为<code>new string</code>的变量容器。在额外的两个字节信息中，”is_ref”被默认设置为 <strong><code>FALSE</code><strong>，因为没有任何自定义的引用生成。”refcount” 被设定为 <code>1</code>，因为这里只有一个变量使用这个变量容器. 注意到当”refcount”的值是<code>1</code>时，”is_ref”的值总是</strong><code>FALSE</code></strong>. 如果你已经安装了<a href=\"http://xdebug.org/\">» Xdebug</a>，你能通过调用函数 **xdebug_debug_zval()**显示”refcount”和”is_ref”的值。</p>\n<p><strong>Example #2 显示zval信息</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>xdebug_debug_zval(<span class=\"string\">&#x27;a&#x27;</span>);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程会输出：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;new string&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>把一个变量赋值给另一变量将增加引用次数(refcount).</p>\n<p><strong>Example #3 增加一个zval的引用计数</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"string\">&quot;new string&quot;</span>;<span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程会输出：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;new string&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时，引用次数是<code>2</code>，因为同一个变量容器被变量 a 和变量 b关联.当没必要时，php不会去复制已生成的变量容器。变量容器在”refcount“变成0时就被销毁. 当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 <a href=\"https://www.php.net/manual/zh/function.unset.php\">unset()</a>时，”refcount“就会减1，下面的例子就能说明:</p>\n<p><strong>Example #4 减少引用计数</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"string\">&quot;new string&quot;</span>;<span class=\"variable\">$c</span> = <span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"keyword\">unset</span>( <span class=\"variable\">$b</span>, <span class=\"variable\">$c</span> );xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程会输出：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">3</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;new string&#x27;</span></span><br><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;new string&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我们现在执行 <code>unset($a);</code>，包含类型和值的这个变量容器就会从内存中删除。</p>\n<h3 id=\"复合类型-Compound-Types\"><a href=\"#复合类型-Compound-Types\" class=\"headerlink\" title=\"复合类型(Compound Types)\"></a>复合类型(Compound Types)</h3><p>当考虑像 array和object这样的复合类型时，事情就稍微有点复杂. 与 标量(scalar)类型的值不同，array和 object类型的变量把它们的成员或属性存在自己的符号表中。这意味着下面的例子将生成三个zval变量容器。</p>\n<p><strong>Example #5 Creating a array zval</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; <span class=\"string\">&#x27;life&#x27;</span>, <span class=\"string\">&#x27;number&#x27;</span> =&gt; <span class=\"number\">42</span> );xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;life&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;number&#x27;</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"number\">42</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>图示:</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array.png\" alt=\"一个简单数组的zval\"></p>\n<p>这三个zval变量容器是: a，meaning和 number。增加和减少”refcount”的规则和上面提到的一样. 下面, 我们在数组中再添加一个元素,并且把它的值设为数组中已存在元素的值:</p>\n<p><strong>Example #6 添加一个已经存在的元素到数组中</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; <span class=\"string\">&#x27;life&#x27;</span>, <span class=\"string\">&#x27;number&#x27;</span> =&gt; <span class=\"number\">42</span> );<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;life&#x27;</span>] = <span class=\"variable\">$a</span>[<span class=\"string\">&#x27;meaning&#x27;</span>];xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;life&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;number&#x27;</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"number\">42</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;life&#x27;</span> =&gt; (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;life&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>图示：</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array2.png\" alt=\"带有引用的简单数组的zval\"></p>\n<p>从以上的xdebug输出信息，我们看到原有的数组元素和新添加的数组元素关联到同一个”refcount”<code>2</code>的zval变量容器. 尽管 Xdebug的输出显示两个值为<code>&#39;life&#39;</code>的 zval 变量容器，其实是同一个。 函数**xdebug_debug_zval()**不显示这个信息，但是你能通过显示内存指针信息来看到。</p>\n<p>删除数组中的一个元素，就是类似于从作用域中删除一个变量. 删除后,数组中的这个元素所在的容器的“refcount”值减少，同样，当“refcount”为0时，这个变量容器就从内存中被删除，下面又一个例子可以说明：</p>\n<p><strong>Example #7 从数组中删除一个元素</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; <span class=\"string\">&#x27;life&#x27;</span>, <span class=\"string\">&#x27;number&#x27;</span> =&gt; <span class=\"number\">42</span> );<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;life&#x27;</span>] = <span class=\"variable\">$a</span>[<span class=\"string\">&#x27;meaning&#x27;</span>];<span class=\"keyword\">unset</span>( <span class=\"variable\">$a</span>[<span class=\"string\">&#x27;meaning&#x27;</span>], <span class=\"variable\">$a</span>[<span class=\"string\">&#x27;number&#x27;</span>] );xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"string\">&#x27;life&#x27;</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;life&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>现在，当我们添加一个数组本身作为这个数组的元素时，事情就变得有趣，下个例子将说明这个。例中我们加入了引用操作符，否则php将生成一个复制。</p>\n<p><strong>Example #8 把数组作为一个元素添加到自己</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;one&#x27;</span> );<span class=\"variable\">$a</span>[] =&amp; <span class=\"variable\">$a</span>;xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"number\">0</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">   <span class=\"number\">1</span> =&gt; (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>图示：</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-loop-array.png\" alt=\"自引用(curcular reference,自己是自己的一个元素)的数组的zval\"></p>\n<p>能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 <code>2</code>。上面的输出结果中的”…”说明发生了递归操作, 显然在这种情况下意味着”…”指向原始数组。</p>\n<p>跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量$a调用unset, 那么变量 $a 和数组元素 “1” 所指向的变量容器的引用次数减1, 从”2”变成”1”. 下例可以说明:</p>\n<p><strong>Example #9 Unsetting $a</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">1</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"number\">0</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">   <span class=\"number\">1</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">1</span>)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>图示：</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-leak-array.png\" alt=\"Zvals after removal of array with a circular reference demonstrating the memory leak\"></p>\n<h3 id=\"清理变量容器的问题-Cleanup-Problems\"><a href=\"#清理变量容器的问题-Cleanup-Problems\" class=\"headerlink\" title=\"清理变量容器的问题(Cleanup Problems)\"></a>清理变量容器的问题(Cleanup Problems)</h3><p>尽管不再有某个作用域中的任何符号指向这个结构(就是变量容器)，由于数组元素“1”仍然指向数组本身，所以这个容器不能被清除 。因为没有另外的符号指向它，用户没有办法清除这个结构，结果就会导致内存泄漏。庆幸的是，php将在脚本执行结束时清除这个数据结构，但是在php清除之前，将耗费不少内存。如果你要实现分析算法，或者要做其他像一个子元素指向它的父元素这样的事情，这种情况就会经常发生。当然，同样的情况也会发生在对象上，实际上对象更有可能出现这种情况，因为对象总是隐式的被引用。</p>\n<p>如果上面的情况发生仅仅一两次倒没什么，但是如果出现几千次，甚至几十万次的内存泄漏，这显然是个大问题。这样的问题往往发生在长时间运行的脚本中，比如请求基本上不会结束的守护进程(deamons)或者单元测试中的大的套件(sets)中。后者的例子：在给巨大的eZ(一个知名的PHP Library) 组件库的模板组件做单元测试时，就可能会出现问题。有时测试可能需要耗用2GB的内存，而测试服务器很可能没有这么大的内存。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引用计数基本知识\"><a href=\"#引用计数基本知识\" class=\"headerlink\" title=\"引用计数基本知识\"></a>引用计数基本知识</h2><p>每个php变量存在一个叫”zval”的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是”is_ref”，是个bool值，用来标识这个变量是否是属于引用集合(reference set)。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&amp;来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是”refcount”，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域(scope)，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。</p>\n<p>当一个变量被赋常量值时，就会生成一个zval变量容器，如下例这样：</p>\n<p><strong>Example #1 生成一个新的zval容器</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"string\">&quot;new string&quot;</span>;<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上例中，新的变量<code>a</code>，是在当前作用域中生成的。并且生成了类型为 string 和值为<code>new string</code>的变量容器。在额外的两个字节信息中，”is_ref”被默认设置为 <strong><code>FALSE</code><strong>，因为没有任何自定义的引用生成。”refcount” 被设定为 <code>1</code>，因为这里只有一个变量使用这个变量容器. 注意到当”refcount”的值是<code>1</code>时，”is_ref”的值总是</strong><code>FALSE</code></strong>. 如果你已经安装了<a href=\"http://xdebug.org/\">» Xdebug</a>，你能通过调用函数 **xdebug_debug_zval()**显示”refcount”和”is_ref”的值。</p>\n<p><strong>Example #2 显示zval信息</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>xdebug_debug_zval(<span class=\"string\">&#x27;a&#x27;</span>);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程会输出：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;new string&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>把一个变量赋值给另一变量将增加引用次数(refcount).</p>\n<p><strong>Example #3 增加一个zval的引用计数</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"string\">&quot;new string&quot;</span>;<span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程会输出：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;new string&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时，引用次数是<code>2</code>，因为同一个变量容器被变量 a 和变量 b关联.当没必要时，php不会去复制已生成的变量容器。变量容器在”refcount“变成0时就被销毁. 当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 <a href=\"https://www.php.net/manual/zh/function.unset.php\">unset()</a>时，”refcount“就会减1，下面的例子就能说明:</p>\n<p><strong>Example #4 减少引用计数</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"string\">&quot;new string&quot;</span>;<span class=\"variable\">$c</span> = <span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"keyword\">unset</span>( <span class=\"variable\">$b</span>, <span class=\"variable\">$c</span> );xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程会输出：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">3</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;new string&#x27;</span></span><br><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;new string&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我们现在执行 <code>unset($a);</code>，包含类型和值的这个变量容器就会从内存中删除。</p>\n<h3 id=\"复合类型-Compound-Types\"><a href=\"#复合类型-Compound-Types\" class=\"headerlink\" title=\"复合类型(Compound Types)\"></a>复合类型(Compound Types)</h3><p>当考虑像 array和object这样的复合类型时，事情就稍微有点复杂. 与 标量(scalar)类型的值不同，array和 object类型的变量把它们的成员或属性存在自己的符号表中。这意味着下面的例子将生成三个zval变量容器。</p>\n<p><strong>Example #5 Creating a array zval</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; <span class=\"string\">&#x27;life&#x27;</span>, <span class=\"string\">&#x27;number&#x27;</span> =&gt; <span class=\"number\">42</span> );xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;life&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;number&#x27;</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"number\">42</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>图示:</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array.png\" alt=\"一个简单数组的zval\"></p>\n<p>这三个zval变量容器是: a，meaning和 number。增加和减少”refcount”的规则和上面提到的一样. 下面, 我们在数组中再添加一个元素,并且把它的值设为数组中已存在元素的值:</p>\n<p><strong>Example #6 添加一个已经存在的元素到数组中</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; <span class=\"string\">&#x27;life&#x27;</span>, <span class=\"string\">&#x27;number&#x27;</span> =&gt; <span class=\"number\">42</span> );<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;life&#x27;</span>] = <span class=\"variable\">$a</span>[<span class=\"string\">&#x27;meaning&#x27;</span>];xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;life&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;number&#x27;</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"number\">42</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;life&#x27;</span> =&gt; (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;life&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>图示：</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array2.png\" alt=\"带有引用的简单数组的zval\"></p>\n<p>从以上的xdebug输出信息，我们看到原有的数组元素和新添加的数组元素关联到同一个”refcount”<code>2</code>的zval变量容器. 尽管 Xdebug的输出显示两个值为<code>&#39;life&#39;</code>的 zval 变量容器，其实是同一个。 函数**xdebug_debug_zval()**不显示这个信息，但是你能通过显示内存指针信息来看到。</p>\n<p>删除数组中的一个元素，就是类似于从作用域中删除一个变量. 删除后,数组中的这个元素所在的容器的“refcount”值减少，同样，当“refcount”为0时，这个变量容器就从内存中被删除，下面又一个例子可以说明：</p>\n<p><strong>Example #7 从数组中删除一个元素</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;meaning&#x27;</span> =&gt; <span class=\"string\">&#x27;life&#x27;</span>, <span class=\"string\">&#x27;number&#x27;</span> =&gt; <span class=\"number\">42</span> );<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;life&#x27;</span>] = <span class=\"variable\">$a</span>[<span class=\"string\">&#x27;meaning&#x27;</span>];<span class=\"keyword\">unset</span>( <span class=\"variable\">$a</span>[<span class=\"string\">&#x27;meaning&#x27;</span>], <span class=\"variable\">$a</span>[<span class=\"string\">&#x27;number&#x27;</span>] );xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"string\">&#x27;life&#x27;</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;life&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>现在，当我们添加一个数组本身作为这个数组的元素时，事情就变得有趣，下个例子将说明这个。例中我们加入了引用操作符，否则php将生成一个复制。</p>\n<p><strong>Example #8 把数组作为一个元素添加到自己</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;one&#x27;</span> );<span class=\"variable\">$a</span>[] =&amp; <span class=\"variable\">$a</span>;xdebug_debug_zval( <span class=\"string\">&#x27;a&#x27;</span> );<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上例程的输出类似于：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"number\">0</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">   <span class=\"number\">1</span> =&gt; (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>图示：</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-loop-array.png\" alt=\"自引用(curcular reference,自己是自己的一个元素)的数组的zval\"></p>\n<p>能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 <code>2</code>。上面的输出结果中的”…”说明发生了递归操作, 显然在这种情况下意味着”…”指向原始数组。</p>\n<p>跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量$a调用unset, 那么变量 $a 和数组元素 “1” 所指向的变量容器的引用次数减1, 从”2”变成”1”. 下例可以说明:</p>\n<p><strong>Example #9 Unsetting $a</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">1</span>)=<span class=\"keyword\">array</span> (</span><br><span class=\"line\">   <span class=\"number\">0</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>)=<span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">   <span class=\"number\">1</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">1</span>)=...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>图示：</p>\n<p><img src=\"https://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-leak-array.png\" alt=\"Zvals after removal of array with a circular reference demonstrating the memory leak\"></p>\n<h3 id=\"清理变量容器的问题-Cleanup-Problems\"><a href=\"#清理变量容器的问题-Cleanup-Problems\" class=\"headerlink\" title=\"清理变量容器的问题(Cleanup Problems)\"></a>清理变量容器的问题(Cleanup Problems)</h3><p>尽管不再有某个作用域中的任何符号指向这个结构(就是变量容器)，由于数组元素“1”仍然指向数组本身，所以这个容器不能被清除 。因为没有另外的符号指向它，用户没有办法清除这个结构，结果就会导致内存泄漏。庆幸的是，php将在脚本执行结束时清除这个数据结构，但是在php清除之前，将耗费不少内存。如果你要实现分析算法，或者要做其他像一个子元素指向它的父元素这样的事情，这种情况就会经常发生。当然，同样的情况也会发生在对象上，实际上对象更有可能出现这种情况，因为对象总是隐式的被引用。</p>\n<p>如果上面的情况发生仅仅一两次倒没什么，但是如果出现几千次，甚至几十万次的内存泄漏，这显然是个大问题。这样的问题往往发生在长时间运行的脚本中，比如请求基本上不会结束的守护进程(deamons)或者单元测试中的大的套件(sets)中。后者的例子：在给巨大的eZ(一个知名的PHP Library) 组件库的模板组件做单元测试时，就可能会出现问题。有时测试可能需要耗用2GB的内存，而测试服务器很可能没有这么大的内存。</p>\n"},{"title":"在Mac上使用Homebrew升级到PHP7.4","abbrlink":2844724790,"_content":"\n## 用brew升级\n\n首先要确保 Brew 是最新的：\n\n```shell\nbrew update\n```\n\n接下来，升级 PHP：\n\n```shell\nbrew upgrade php\n```\n\n通过运行`php -v`以下命令检查当前版本：\n\n```shell\nphp -v\n```\n\n重新启动 Nginx 或 Apache：\n\n```shell\nsudo nginx -s reload\nsudo apachectl restart\n```\n\n并通过访问以下脚本确保本地 Web 服务器也使用 PHP 7.4：\n\n```shell\n# index.php, accessible to your web server\nphpinfo(); die();\n```\n\n版本应显示`7.4.x`。\n\n注意：如果您使用的是 Laravel Valet，请继续阅读，您需要一些额外的步骤才能使Web服务器正常工作。\n\n## [＃](https://stitcher.io/blog/php-74-upgrade-mac#valet)Valet\n\n如果您使用的是 Laravel Valet，则应执行以下步骤对其进行升级：\n\n```shell\ncomposer global update\n```\n\n现在运行`valet install`：\n\n```shell\nvalet install\n```\n\n## [＃](https://stitcher.io/blog/php-74-upgrade-mac#extensions)pecl\n\nHomebrew 不再支持 PHP 扩展的安装，您应该使用 pecl 代替。我个人使用 Imagick，Redis 和 Xdebug。\n\n它们可以像这样安装：\n\n```shell\npecl install imagick\npecl install redis\npecl install xdebug\n```\n\n您可以运行`pecl list`以查看安装了哪些扩展：\n\n```shell\npecl list\n# Installed packages, channel pecl.php.net:\n# =========================================\n# Package Version State\n# imagick 3.4.4   stable\n# redis   5.1.1   stable\n# xdebug  2.8.0   stable\n```\n\n您可以使用来搜索其他扩展名`pecl search`：\n\n```shell\npecl search pdf\n# Retrieving data...0%\n# ..\n# Matched packages, channel pecl.php.net:\n# =======================================\n# Package Stable/(Latest) Local\n# pdflib  4.1.2 (stable)        Creating PDF on the fly with the PDFlib library\n```\n\n安装新软件包后，请确保重新启动Web服务器：\n\n```shell\nsudo nginx -s reload\nsudo apachectl restart\n```\n\n如果您使用的是 Laravel Valet，则也应重新启动它。\n\n```shell\nvalet restart\n```\n\n通过检查 PHP Web 服务器和 CLI 安装，确保正确安装和加载了所有扩展：\n\n```shell\nphp -i | grep redis\nvar_dump(extension_loaded('redis'));\n```\n\n如果扩展未正确加载，则有两个简单的修复程序。\n\n首先，请确保将扩展名添加到正确的 ini 文件中。您可以运行`php --ini`以了解加载了哪个文件：\n\n```shell\nConfiguration File (php.ini) Path: /usr/local/etc/php/7.4\nLoaded Configuration File:         /usr/local/etc/php/7.4/php.ini\nScan for additional .ini files in: /usr/local/etc/php/7.4/conf.d\nAdditional .ini files parsed:      /usr/local/etc/php/7.4/conf.d/ext-opcache.ini,\n/usr/local/etc/php/7.4/conf.d/php-memory-limits.ini\n```\n\n现在检查 ini 文件：\n\n```shell\nextension=\"redis.so\"\nextension=\"imagick.so\"\nextension=\"xdebug.so\"\n```\n\n请注意，如果您正在通过 CLI 测试已安装的扩展，则无需重新启动 nginx，apache 或 Valet。\n\n如果要从也使用 pecl 安装扩展程序的旧 PHP 版本进行更新，则可以做第二件事。是分别重新安装每个扩展。\n\n```shell\npecl uninstall imagick\npecl install imagick\n```\n\n## [＃](https://stitcher.io/blog/php-74-upgrade-mac#last-step)最后一步\n\n最后，您应该测试和升级项目以实现 [PHP 7.4兼容性](https://stitcher.io/blog/new-in-php-74)。\n\n> **本文摘录自：**[**https://stitcher.io/blog/php-74-upgrade-mac**](https://stitcher.io/blog/php-74-upgrade-mac)\n\n\n\n​                                                                                                                                                                  ","source":"_posts/CodeLanguage/PHP/在Mac上使用Homebrew升级到PHP7.4.md","raw":"---\ntitle: 在Mac上使用Homebrew升级到PHP7.4\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 2844724790\n---\n\n## 用brew升级\n\n首先要确保 Brew 是最新的：\n\n```shell\nbrew update\n```\n\n接下来，升级 PHP：\n\n```shell\nbrew upgrade php\n```\n\n通过运行`php -v`以下命令检查当前版本：\n\n```shell\nphp -v\n```\n\n重新启动 Nginx 或 Apache：\n\n```shell\nsudo nginx -s reload\nsudo apachectl restart\n```\n\n并通过访问以下脚本确保本地 Web 服务器也使用 PHP 7.4：\n\n```shell\n# index.php, accessible to your web server\nphpinfo(); die();\n```\n\n版本应显示`7.4.x`。\n\n注意：如果您使用的是 Laravel Valet，请继续阅读，您需要一些额外的步骤才能使Web服务器正常工作。\n\n## [＃](https://stitcher.io/blog/php-74-upgrade-mac#valet)Valet\n\n如果您使用的是 Laravel Valet，则应执行以下步骤对其进行升级：\n\n```shell\ncomposer global update\n```\n\n现在运行`valet install`：\n\n```shell\nvalet install\n```\n\n## [＃](https://stitcher.io/blog/php-74-upgrade-mac#extensions)pecl\n\nHomebrew 不再支持 PHP 扩展的安装，您应该使用 pecl 代替。我个人使用 Imagick，Redis 和 Xdebug。\n\n它们可以像这样安装：\n\n```shell\npecl install imagick\npecl install redis\npecl install xdebug\n```\n\n您可以运行`pecl list`以查看安装了哪些扩展：\n\n```shell\npecl list\n# Installed packages, channel pecl.php.net:\n# =========================================\n# Package Version State\n# imagick 3.4.4   stable\n# redis   5.1.1   stable\n# xdebug  2.8.0   stable\n```\n\n您可以使用来搜索其他扩展名`pecl search`：\n\n```shell\npecl search pdf\n# Retrieving data...0%\n# ..\n# Matched packages, channel pecl.php.net:\n# =======================================\n# Package Stable/(Latest) Local\n# pdflib  4.1.2 (stable)        Creating PDF on the fly with the PDFlib library\n```\n\n安装新软件包后，请确保重新启动Web服务器：\n\n```shell\nsudo nginx -s reload\nsudo apachectl restart\n```\n\n如果您使用的是 Laravel Valet，则也应重新启动它。\n\n```shell\nvalet restart\n```\n\n通过检查 PHP Web 服务器和 CLI 安装，确保正确安装和加载了所有扩展：\n\n```shell\nphp -i | grep redis\nvar_dump(extension_loaded('redis'));\n```\n\n如果扩展未正确加载，则有两个简单的修复程序。\n\n首先，请确保将扩展名添加到正确的 ini 文件中。您可以运行`php --ini`以了解加载了哪个文件：\n\n```shell\nConfiguration File (php.ini) Path: /usr/local/etc/php/7.4\nLoaded Configuration File:         /usr/local/etc/php/7.4/php.ini\nScan for additional .ini files in: /usr/local/etc/php/7.4/conf.d\nAdditional .ini files parsed:      /usr/local/etc/php/7.4/conf.d/ext-opcache.ini,\n/usr/local/etc/php/7.4/conf.d/php-memory-limits.ini\n```\n\n现在检查 ini 文件：\n\n```shell\nextension=\"redis.so\"\nextension=\"imagick.so\"\nextension=\"xdebug.so\"\n```\n\n请注意，如果您正在通过 CLI 测试已安装的扩展，则无需重新启动 nginx，apache 或 Valet。\n\n如果要从也使用 pecl 安装扩展程序的旧 PHP 版本进行更新，则可以做第二件事。是分别重新安装每个扩展。\n\n```shell\npecl uninstall imagick\npecl install imagick\n```\n\n## [＃](https://stitcher.io/blog/php-74-upgrade-mac#last-step)最后一步\n\n最后，您应该测试和升级项目以实现 [PHP 7.4兼容性](https://stitcher.io/blog/new-in-php-74)。\n\n> **本文摘录自：**[**https://stitcher.io/blog/php-74-upgrade-mac**](https://stitcher.io/blog/php-74-upgrade-mac)\n\n\n\n​                                                                                                                                                                  ","slug":"CodeLanguage/PHP/在Mac上使用Homebrew升级到PHP7.4","published":1,"date":"2021-04-16T13:50:20.219Z","updated":"2021-04-29T10:24:59.147Z","_id":"ckotdh5vw0028kw8zehyb7s0n","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"用brew升级\"><a href=\"#用brew升级\" class=\"headerlink\" title=\"用brew升级\"></a>用brew升级</h2><p>首先要确保 Brew 是最新的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br></pre></td></tr></table></figure>\n\n<p>接下来，升级 PHP：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade php</span><br></pre></td></tr></table></figure>\n\n<p>通过运行<code>php -v</code>以下命令检查当前版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -v</span><br></pre></td></tr></table></figure>\n\n<p>重新启动 Nginx 或 Apache：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br><span class=\"line\">sudo apachectl restart</span><br></pre></td></tr></table></figure>\n\n<p>并通过访问以下脚本确保本地 Web 服务器也使用 PHP 7.4：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> index.php, accessible to your web server</span></span><br><span class=\"line\">phpinfo(); die();</span><br></pre></td></tr></table></figure>\n\n<p>版本应显示<code>7.4.x</code>。</p>\n<p>注意：如果您使用的是 Laravel Valet，请继续阅读，您需要一些额外的步骤才能使Web服务器正常工作。</p>\n<h2 id=\"＃Valet\"><a href=\"#＃Valet\" class=\"headerlink\" title=\"＃Valet\"></a><a href=\"https://stitcher.io/blog/php-74-upgrade-mac#valet\">＃</a>Valet</h2><p>如果您使用的是 Laravel Valet，则应执行以下步骤对其进行升级：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer global update</span><br></pre></td></tr></table></figure>\n\n<p>现在运行<code>valet install</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valet install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"＃pecl\"><a href=\"#＃pecl\" class=\"headerlink\" title=\"＃pecl\"></a><a href=\"https://stitcher.io/blog/php-74-upgrade-mac#extensions\">＃</a>pecl</h2><p>Homebrew 不再支持 PHP 扩展的安装，您应该使用 pecl 代替。我个人使用 Imagick，Redis 和 Xdebug。</p>\n<p>它们可以像这样安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pecl install imagick</span><br><span class=\"line\">pecl install redis</span><br><span class=\"line\">pecl install xdebug</span><br></pre></td></tr></table></figure>\n\n<p>您可以运行<code>pecl list</code>以查看安装了哪些扩展：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pecl list</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Installed packages, channel pecl.php.net:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> =========================================</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Package Version State</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> imagick 3.4.4   stable</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> redis   5.1.1   stable</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> xdebug  2.8.0   stable</span></span><br></pre></td></tr></table></figure>\n\n<p>您可以使用来搜索其他扩展名<code>pecl search</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pecl search pdf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Retrieving data...0%</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ..</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Matched packages, channel pecl.php.net:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> =======================================</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Package Stable/(Latest) Local</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pdflib  4.1.2 (stable)        Creating PDF on the fly with the PDFlib library</span></span><br></pre></td></tr></table></figure>\n\n<p>安装新软件包后，请确保重新启动Web服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br><span class=\"line\">sudo apachectl restart</span><br></pre></td></tr></table></figure>\n\n<p>如果您使用的是 Laravel Valet，则也应重新启动它。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valet restart</span><br></pre></td></tr></table></figure>\n\n<p>通过检查 PHP Web 服务器和 CLI 安装，确保正确安装和加载了所有扩展：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -i | grep redis</span><br><span class=\"line\">var_dump(extension_loaded(&#x27;redis&#x27;));</span><br></pre></td></tr></table></figure>\n\n<p>如果扩展未正确加载，则有两个简单的修复程序。</p>\n<p>首先，请确保将扩展名添加到正确的 ini 文件中。您可以运行<code>php --ini</code>以了解加载了哪个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration File (php.ini) Path: /usr/local/etc/php/7.4</span><br><span class=\"line\">Loaded Configuration File:         /usr/local/etc/php/7.4/php.ini</span><br><span class=\"line\">Scan for additional .ini files in: /usr/local/etc/php/7.4/conf.d</span><br><span class=\"line\">Additional .ini files parsed:      /usr/local/etc/php/7.4/conf.d/ext-opcache.ini,</span><br><span class=\"line\">/usr/local/etc/php/7.4/conf.d/php-memory-limits.ini</span><br></pre></td></tr></table></figure>\n\n<p>现在检查 ini 文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension=&quot;redis.so&quot;</span><br><span class=\"line\">extension=&quot;imagick.so&quot;</span><br><span class=\"line\">extension=&quot;xdebug.so&quot;</span><br></pre></td></tr></table></figure>\n\n<p>请注意，如果您正在通过 CLI 测试已安装的扩展，则无需重新启动 nginx，apache 或 Valet。</p>\n<p>如果要从也使用 pecl 安装扩展程序的旧 PHP 版本进行更新，则可以做第二件事。是分别重新安装每个扩展。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pecl uninstall imagick</span><br><span class=\"line\">pecl install imagick</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"＃最后一步\"><a href=\"#＃最后一步\" class=\"headerlink\" title=\"＃最后一步\"></a><a href=\"https://stitcher.io/blog/php-74-upgrade-mac#last-step\">＃</a>最后一步</h2><p>最后，您应该测试和升级项目以实现 <a href=\"https://stitcher.io/blog/new-in-php-74\">PHP 7.4兼容性</a>。</p>\n<blockquote>\n<p><strong>本文摘录自：</strong><a href=\"https://stitcher.io/blog/php-74-upgrade-mac\"><strong>https://stitcher.io/blog/php-74-upgrade-mac</strong></a></p>\n</blockquote>\n<p>​                                                                                                                                                                  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用brew升级\"><a href=\"#用brew升级\" class=\"headerlink\" title=\"用brew升级\"></a>用brew升级</h2><p>首先要确保 Brew 是最新的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br></pre></td></tr></table></figure>\n\n<p>接下来，升级 PHP：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade php</span><br></pre></td></tr></table></figure>\n\n<p>通过运行<code>php -v</code>以下命令检查当前版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -v</span><br></pre></td></tr></table></figure>\n\n<p>重新启动 Nginx 或 Apache：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br><span class=\"line\">sudo apachectl restart</span><br></pre></td></tr></table></figure>\n\n<p>并通过访问以下脚本确保本地 Web 服务器也使用 PHP 7.4：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> index.php, accessible to your web server</span></span><br><span class=\"line\">phpinfo(); die();</span><br></pre></td></tr></table></figure>\n\n<p>版本应显示<code>7.4.x</code>。</p>\n<p>注意：如果您使用的是 Laravel Valet，请继续阅读，您需要一些额外的步骤才能使Web服务器正常工作。</p>\n<h2 id=\"＃Valet\"><a href=\"#＃Valet\" class=\"headerlink\" title=\"＃Valet\"></a><a href=\"https://stitcher.io/blog/php-74-upgrade-mac#valet\">＃</a>Valet</h2><p>如果您使用的是 Laravel Valet，则应执行以下步骤对其进行升级：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer global update</span><br></pre></td></tr></table></figure>\n\n<p>现在运行<code>valet install</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valet install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"＃pecl\"><a href=\"#＃pecl\" class=\"headerlink\" title=\"＃pecl\"></a><a href=\"https://stitcher.io/blog/php-74-upgrade-mac#extensions\">＃</a>pecl</h2><p>Homebrew 不再支持 PHP 扩展的安装，您应该使用 pecl 代替。我个人使用 Imagick，Redis 和 Xdebug。</p>\n<p>它们可以像这样安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pecl install imagick</span><br><span class=\"line\">pecl install redis</span><br><span class=\"line\">pecl install xdebug</span><br></pre></td></tr></table></figure>\n\n<p>您可以运行<code>pecl list</code>以查看安装了哪些扩展：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pecl list</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Installed packages, channel pecl.php.net:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> =========================================</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Package Version State</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> imagick 3.4.4   stable</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> redis   5.1.1   stable</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> xdebug  2.8.0   stable</span></span><br></pre></td></tr></table></figure>\n\n<p>您可以使用来搜索其他扩展名<code>pecl search</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pecl search pdf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Retrieving data...0%</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ..</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Matched packages, channel pecl.php.net:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> =======================================</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Package Stable/(Latest) Local</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pdflib  4.1.2 (stable)        Creating PDF on the fly with the PDFlib library</span></span><br></pre></td></tr></table></figure>\n\n<p>安装新软件包后，请确保重新启动Web服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br><span class=\"line\">sudo apachectl restart</span><br></pre></td></tr></table></figure>\n\n<p>如果您使用的是 Laravel Valet，则也应重新启动它。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valet restart</span><br></pre></td></tr></table></figure>\n\n<p>通过检查 PHP Web 服务器和 CLI 安装，确保正确安装和加载了所有扩展：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -i | grep redis</span><br><span class=\"line\">var_dump(extension_loaded(&#x27;redis&#x27;));</span><br></pre></td></tr></table></figure>\n\n<p>如果扩展未正确加载，则有两个简单的修复程序。</p>\n<p>首先，请确保将扩展名添加到正确的 ini 文件中。您可以运行<code>php --ini</code>以了解加载了哪个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration File (php.ini) Path: /usr/local/etc/php/7.4</span><br><span class=\"line\">Loaded Configuration File:         /usr/local/etc/php/7.4/php.ini</span><br><span class=\"line\">Scan for additional .ini files in: /usr/local/etc/php/7.4/conf.d</span><br><span class=\"line\">Additional .ini files parsed:      /usr/local/etc/php/7.4/conf.d/ext-opcache.ini,</span><br><span class=\"line\">/usr/local/etc/php/7.4/conf.d/php-memory-limits.ini</span><br></pre></td></tr></table></figure>\n\n<p>现在检查 ini 文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension=&quot;redis.so&quot;</span><br><span class=\"line\">extension=&quot;imagick.so&quot;</span><br><span class=\"line\">extension=&quot;xdebug.so&quot;</span><br></pre></td></tr></table></figure>\n\n<p>请注意，如果您正在通过 CLI 测试已安装的扩展，则无需重新启动 nginx，apache 或 Valet。</p>\n<p>如果要从也使用 pecl 安装扩展程序的旧 PHP 版本进行更新，则可以做第二件事。是分别重新安装每个扩展。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pecl uninstall imagick</span><br><span class=\"line\">pecl install imagick</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"＃最后一步\"><a href=\"#＃最后一步\" class=\"headerlink\" title=\"＃最后一步\"></a><a href=\"https://stitcher.io/blog/php-74-upgrade-mac#last-step\">＃</a>最后一步</h2><p>最后，您应该测试和升级项目以实现 <a href=\"https://stitcher.io/blog/new-in-php-74\">PHP 7.4兼容性</a>。</p>\n<blockquote>\n<p><strong>本文摘录自：</strong><a href=\"https://stitcher.io/blog/php-74-upgrade-mac\"><strong>https://stitcher.io/blog/php-74-upgrade-mac</strong></a></p>\n</blockquote>\n<p>​                                                                                                                                                                  </p>\n"},{"title":"如何使用brew安装多个PHP版本","abbrlink":3712615104,"_content":"\n一 安装7.1\n\n1. 安装PHP7.1\n\n```\nbrew install php@7.1\n```\n\n2. 修改配置 php-fpm.conf,一般在/usr/local/etc/php下(如果php-fpm.conf中不存在，则查找php-fpm.d目录)\n\n```\nvim php-fpm.conf` `listen = 127.0.0.1:9000\n```\n\n3. 启动PHP7.1\n\n```\nbrew services start php@7.1\n```\n\n4. 这时php-fpm会监听9000端口，修改nginx的配置文件改为端口为9000(一般在/usr/local/etc/nginx/下面)\n\n```\nvim nginx.conf` `fastcgi_pass  127.0.0.1:9000\n```\n\n5. 启动nginx服务\n\n```\n#启动 brew services start nginx` `#重启 brew services restart nginx\n```\n\n6. 查看当前版本\n\n```\nphp -v\n```\n\n \n\n二 安装并切换7.2\n\n1. 清除PHP7.1的软链\n\n```\nbrew unlink php@7.1\n```\n\n2. 安装PHP7.2 \n\n```\nbrew install php@7.2\n```\n\n3. 添加PHP7.2的软链\n\n```\nbrew link php@7.2\n```\n\n4. 修改配置 php-fpm.conf\n\n```\nvim php-fpm.conf` `listen = 127.0.0.1:9001\n```\n\n5. 启动PHP7.2\n\n```\nbrew services start php@7.2\n```\n\n6. 修改nginx配置\n\n```\nvim nginx.conf` `fastcgi_pass  127.0.0.1:9001\n```\n\n7. 重启nginx服务\n\n```\nbrew services restart nginx\n```\n\n8. 查看当前版本\n\n```\nphp -v\n```\n\n9.修改环境变量\n\n```\nvi ~/.bash_profile\n```\n\n10.重新刷新环境变量\n\n```\nsource ~/.bash_profile\n```\n\n \n\n以上就是这次的全部内容 ！\n\n​                                                                                                                                                                  ","source":"_posts/CodeLanguage/PHP/如何使用brew安装多个PHP版本.md","raw":"---\ntitle: 如何使用brew安装多个PHP版本\ncategories:\n  - 程序语言\n  - PHP\nabbrlink: 3712615104\n---\n\n一 安装7.1\n\n1. 安装PHP7.1\n\n```\nbrew install php@7.1\n```\n\n2. 修改配置 php-fpm.conf,一般在/usr/local/etc/php下(如果php-fpm.conf中不存在，则查找php-fpm.d目录)\n\n```\nvim php-fpm.conf` `listen = 127.0.0.1:9000\n```\n\n3. 启动PHP7.1\n\n```\nbrew services start php@7.1\n```\n\n4. 这时php-fpm会监听9000端口，修改nginx的配置文件改为端口为9000(一般在/usr/local/etc/nginx/下面)\n\n```\nvim nginx.conf` `fastcgi_pass  127.0.0.1:9000\n```\n\n5. 启动nginx服务\n\n```\n#启动 brew services start nginx` `#重启 brew services restart nginx\n```\n\n6. 查看当前版本\n\n```\nphp -v\n```\n\n \n\n二 安装并切换7.2\n\n1. 清除PHP7.1的软链\n\n```\nbrew unlink php@7.1\n```\n\n2. 安装PHP7.2 \n\n```\nbrew install php@7.2\n```\n\n3. 添加PHP7.2的软链\n\n```\nbrew link php@7.2\n```\n\n4. 修改配置 php-fpm.conf\n\n```\nvim php-fpm.conf` `listen = 127.0.0.1:9001\n```\n\n5. 启动PHP7.2\n\n```\nbrew services start php@7.2\n```\n\n6. 修改nginx配置\n\n```\nvim nginx.conf` `fastcgi_pass  127.0.0.1:9001\n```\n\n7. 重启nginx服务\n\n```\nbrew services restart nginx\n```\n\n8. 查看当前版本\n\n```\nphp -v\n```\n\n9.修改环境变量\n\n```\nvi ~/.bash_profile\n```\n\n10.重新刷新环境变量\n\n```\nsource ~/.bash_profile\n```\n\n \n\n以上就是这次的全部内容 ！\n\n​                                                                                                                                                                  ","slug":"CodeLanguage/PHP/如何使用brew安装多个PHP版本","published":1,"date":"2021-04-16T13:50:20.219Z","updated":"2021-04-29T10:24:59.150Z","_id":"ckotdh5vx002akw8z1ha7fb1w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一 安装7.1</p>\n<ol>\n<li>安装PHP7.1</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install php@7.1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改配置 php-fpm.conf,一般在/usr/local/etc/php下(如果php-fpm.conf中不存在，则查找php-fpm.d目录)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim php-fpm.conf&#96; &#96;listen &#x3D; 127.0.0.1:9000</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动PHP7.1</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start php@7.1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>这时php-fpm会监听9000端口，修改nginx的配置文件改为端口为9000(一般在/usr/local/etc/nginx/下面)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim nginx.conf&#96; &#96;fastcgi_pass  127.0.0.1:9000</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>启动nginx服务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动 brew services start nginx&#96; &#96;#重启 brew services restart nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>查看当前版本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -v</span><br></pre></td></tr></table></figure>\n\n<p>二 安装并切换7.2</p>\n<ol>\n<li>清除PHP7.1的软链</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew unlink php@7.1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装PHP7.2 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install php@7.2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加PHP7.2的软链</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew link php@7.2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改配置 php-fpm.conf</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim php-fpm.conf&#96; &#96;listen &#x3D; 127.0.0.1:9001</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>启动PHP7.2</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start php@7.2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>修改nginx配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim nginx.conf&#96; &#96;fastcgi_pass  127.0.0.1:9001</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>重启nginx服务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services restart nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>查看当前版本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -v</span><br></pre></td></tr></table></figure>\n\n<p>9.修改环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>10.重新刷新环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>以上就是这次的全部内容 ！</p>\n<p>​                                                                                                                                                                  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>一 安装7.1</p>\n<ol>\n<li>安装PHP7.1</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install php@7.1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改配置 php-fpm.conf,一般在/usr/local/etc/php下(如果php-fpm.conf中不存在，则查找php-fpm.d目录)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim php-fpm.conf&#96; &#96;listen &#x3D; 127.0.0.1:9000</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动PHP7.1</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start php@7.1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>这时php-fpm会监听9000端口，修改nginx的配置文件改为端口为9000(一般在/usr/local/etc/nginx/下面)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim nginx.conf&#96; &#96;fastcgi_pass  127.0.0.1:9000</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>启动nginx服务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动 brew services start nginx&#96; &#96;#重启 brew services restart nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>查看当前版本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -v</span><br></pre></td></tr></table></figure>\n\n<p>二 安装并切换7.2</p>\n<ol>\n<li>清除PHP7.1的软链</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew unlink php@7.1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装PHP7.2 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install php@7.2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加PHP7.2的软链</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew link php@7.2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改配置 php-fpm.conf</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim php-fpm.conf&#96; &#96;listen &#x3D; 127.0.0.1:9001</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>启动PHP7.2</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start php@7.2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>修改nginx配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim nginx.conf&#96; &#96;fastcgi_pass  127.0.0.1:9001</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>重启nginx服务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services restart nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>查看当前版本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -v</span><br></pre></td></tr></table></figure>\n\n<p>9.修改环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>10.重新刷新环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>以上就是这次的全部内容 ！</p>\n<p>​                                                                                                                                                                  </p>\n"},{"title":"Docker相关命令","abbrlink":564644262,"_content":"\n查看 docker 的所有命令\n\n```shell\ndocker\n```\n\n更深入查看 docker 命令的使用方法和作用\n\n```shell\ndocker command --help\n```\n\n获取镜像（载入 ubuntu 镜像）\n\n```shell\ndocker pull ubuntu\n```\n\n使用 ubuntu 镜像启动容器，并且参数以命令模式进入该容器\n\n```shell\ndocker run it ubuntu /bin/bash\n```\n\n参数说明：\n\n- -i：交互时操作\n- -t：终端\n- ubuntu：ubuntu 镜像\n- /bin/bash：放在镜像后边是命令，交互式的 shell\n\n进入容器后，退出容器\n\n```shell\nexit\n```\n\n查看所有容器\n\n```shell\ndocker ps -a\n```\n\n查看正在运行的容器\n\n```shell\ndocker ps\n```\n\n启动一个停止的容器\n\n```shell\ndocker start 容器id\n```\n\n后台运行 docker 容器\n\n```shell\ndocker run -itd -name 容器自定义名字 镜像名称 /bin/bsah\n```\n\n停止一个容器\n\n```shell\ndocker stop 容器id\n```\n\n重启一个容器\n\n```shell\ndocker restart 容器id\n```\n\n进入一个容器\n\n```shell\ndocker attach 容器id\n```\n\n退出容器（推荐使用 `docker exec` ，因为这个命令退出容器，不会导致容器停止）\n\n```shell\ndocker exex\ndocker exec -it 容器id /bin/bash\n```\n\n导出容器\n\n```shell\ndocker export 容器id > 名称.tar\n```\n\n导入容器快照\n\n以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:\n\n```shell\ncat docker/名称.tar | docker import - test/ubuntu:v1\n```\n\n通过指定 URL 或者 目录导入\n\n```shell\ndocker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n删除容器\n\n```shell\ndocker rm -f 容器id\n```\n\n强制删除无法删除的容器\n\n```shell\ndocker rmi -f 容器id\n```\n\n\n\n参考文章：\n\n- https://www.runoob.com/docker/docker-container-usage.html\n\n\n\n\n\n​                                                                                                                                                                  \n\n","source":"_posts/Technology/Docker/Docker相关命令.md","raw":"---\ntitle: Docker相关命令\ncategories:\n  - 技术开发\n  - Docker\nabbrlink: 564644262\n---\n\n查看 docker 的所有命令\n\n```shell\ndocker\n```\n\n更深入查看 docker 命令的使用方法和作用\n\n```shell\ndocker command --help\n```\n\n获取镜像（载入 ubuntu 镜像）\n\n```shell\ndocker pull ubuntu\n```\n\n使用 ubuntu 镜像启动容器，并且参数以命令模式进入该容器\n\n```shell\ndocker run it ubuntu /bin/bash\n```\n\n参数说明：\n\n- -i：交互时操作\n- -t：终端\n- ubuntu：ubuntu 镜像\n- /bin/bash：放在镜像后边是命令，交互式的 shell\n\n进入容器后，退出容器\n\n```shell\nexit\n```\n\n查看所有容器\n\n```shell\ndocker ps -a\n```\n\n查看正在运行的容器\n\n```shell\ndocker ps\n```\n\n启动一个停止的容器\n\n```shell\ndocker start 容器id\n```\n\n后台运行 docker 容器\n\n```shell\ndocker run -itd -name 容器自定义名字 镜像名称 /bin/bsah\n```\n\n停止一个容器\n\n```shell\ndocker stop 容器id\n```\n\n重启一个容器\n\n```shell\ndocker restart 容器id\n```\n\n进入一个容器\n\n```shell\ndocker attach 容器id\n```\n\n退出容器（推荐使用 `docker exec` ，因为这个命令退出容器，不会导致容器停止）\n\n```shell\ndocker exex\ndocker exec -it 容器id /bin/bash\n```\n\n导出容器\n\n```shell\ndocker export 容器id > 名称.tar\n```\n\n导入容器快照\n\n以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:\n\n```shell\ncat docker/名称.tar | docker import - test/ubuntu:v1\n```\n\n通过指定 URL 或者 目录导入\n\n```shell\ndocker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n删除容器\n\n```shell\ndocker rm -f 容器id\n```\n\n强制删除无法删除的容器\n\n```shell\ndocker rmi -f 容器id\n```\n\n\n\n参考文章：\n\n- https://www.runoob.com/docker/docker-container-usage.html\n\n\n\n\n\n​                                                                                                                                                                  \n\n","slug":"Technology/Docker/Docker相关命令","published":1,"date":"2021-04-16T13:46:45.539Z","updated":"2021-04-29T10:24:59.063Z","_id":"ckotdh5vy002bkw8z7txo5ii3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看 docker 的所有命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker</span><br></pre></td></tr></table></figure>\n\n<p>更深入查看 docker 命令的使用方法和作用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker command --help</span><br></pre></td></tr></table></figure>\n\n<p>获取镜像（载入 ubuntu 镜像）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu</span><br></pre></td></tr></table></figure>\n\n<p>使用 ubuntu 镜像启动容器，并且参数以命令模式进入该容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>-i：交互时操作</li>\n<li>-t：终端</li>\n<li>ubuntu：ubuntu 镜像</li>\n<li>/bin/bash：放在镜像后边是命令，交互式的 shell</li>\n</ul>\n<p>进入容器后，退出容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<p>查看所有容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p>查看正在运行的容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p>启动一个停止的容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 容器id</span><br></pre></td></tr></table></figure>\n\n<p>后台运行 docker 容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -name 容器自定义名字 镜像名称 /bin/bsah</span><br></pre></td></tr></table></figure>\n\n<p>停止一个容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器id</span><br></pre></td></tr></table></figure>\n\n<p>重启一个容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart 容器id</span><br></pre></td></tr></table></figure>\n\n<p>进入一个容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 容器id</span><br></pre></td></tr></table></figure>\n\n<p>退出容器（推荐使用 <code>docker exec</code> ，因为这个命令退出容器，不会导致容器停止）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exex</span><br><span class=\"line\">docker exec -it 容器id /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>导出容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker export 容器id &gt; 名称.tar</span><br></pre></td></tr></table></figure>\n\n<p>导入容器快照</p>\n<p>以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat docker/名称.tar | docker import - test/ubuntu:v1</span><br></pre></td></tr></table></figure>\n\n<p>通过指定 URL 或者 目录导入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>\n\n<p>删除容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f 容器id</span><br></pre></td></tr></table></figure>\n\n<p>强制删除无法删除的容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f 容器id</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://www.runoob.com/docker/docker-container-usage.html\">https://www.runoob.com/docker/docker-container-usage.html</a></li>\n</ul>\n<p>​                                                                                                                                                                  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>查看 docker 的所有命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker</span><br></pre></td></tr></table></figure>\n\n<p>更深入查看 docker 命令的使用方法和作用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker command --help</span><br></pre></td></tr></table></figure>\n\n<p>获取镜像（载入 ubuntu 镜像）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu</span><br></pre></td></tr></table></figure>\n\n<p>使用 ubuntu 镜像启动容器，并且参数以命令模式进入该容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>-i：交互时操作</li>\n<li>-t：终端</li>\n<li>ubuntu：ubuntu 镜像</li>\n<li>/bin/bash：放在镜像后边是命令，交互式的 shell</li>\n</ul>\n<p>进入容器后，退出容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<p>查看所有容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p>查看正在运行的容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p>启动一个停止的容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 容器id</span><br></pre></td></tr></table></figure>\n\n<p>后台运行 docker 容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -name 容器自定义名字 镜像名称 /bin/bsah</span><br></pre></td></tr></table></figure>\n\n<p>停止一个容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器id</span><br></pre></td></tr></table></figure>\n\n<p>重启一个容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart 容器id</span><br></pre></td></tr></table></figure>\n\n<p>进入一个容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 容器id</span><br></pre></td></tr></table></figure>\n\n<p>退出容器（推荐使用 <code>docker exec</code> ，因为这个命令退出容器，不会导致容器停止）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exex</span><br><span class=\"line\">docker exec -it 容器id /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>导出容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker export 容器id &gt; 名称.tar</span><br></pre></td></tr></table></figure>\n\n<p>导入容器快照</p>\n<p>以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat docker/名称.tar | docker import - test/ubuntu:v1</span><br></pre></td></tr></table></figure>\n\n<p>通过指定 URL 或者 目录导入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>\n\n<p>删除容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f 容器id</span><br></pre></td></tr></table></figure>\n\n<p>强制删除无法删除的容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f 容器id</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://www.runoob.com/docker/docker-container-usage.html\">https://www.runoob.com/docker/docker-container-usage.html</a></li>\n</ul>\n<p>​                                                                                                                                                                  </p>\n"},{"title":"Docker命令详解（run篇）","abbrlink":2104589309,"_content":"\n命令格式：`docker run [OPTIONS] IMAGE [COMMAND] [ARG...]`\nUsage: Run a command in a new container\n中文意思为：通过run命令创建一个新的容器（container）\n\n- 常用选项说明\n\n  - `-d, --detach=false`， 指定容器运行于前台还是后台，默认为false\n\n  - `-i, --interactive=false`， 打开STDIN，用于控制台交互\n\n  - `-t, --tty=false`， 分配tty设备，该可以支持终端登录，默认为false\n\n  - `-u, --user=\"\"`， 指定容器的用户\n\n  - `-a, --attach=[]`， 登录容器（必须是以docker run -d启动的容器）\n\n  - `-w, --workdir=\"\"`， 指定容器的工作目录\n\n  - `-c, --cpu-shares=0`， 设置容器CPU权重，在CPU共享场景使用\n\n  - `-e, --env=[]`， 指定环境变量，容器中可以使用该环境变量\n\n  - `-m, --memory=\"\"`， 指定容器的内存上限\n\n  - `-P, --publish-all=false`， 指定容器暴露的端口\n\n  - `-p, --publish=[]`， 指定容器暴露的端口\n\n  - `-h, --hostname=\"\"`， 指定容器的主机名\n\n  - `-v, --volume=[]`， 给容器挂载存储卷，挂载到容器的某个目录\n\n  - `--volumes-from=[]`， 给容器挂载其他容器上的卷，挂载到容器的某个目录\n\n  - `--cap-add=[]`， 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities\n\n  - `--cap-drop=[]`， 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities\n\n  - `--cidfile=\"\"`， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法\n\n  - `--cpuset=\"\"`， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU\n\n  - `--device=[]`， 添加主机设备给容器，相当于设备直通\n\n  - `--dns=[]`， 指定容器的dns服务器\n\n  - `--dns-search=[]`， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件\n\n  - `--entrypoint=\"\"`， 覆盖image的入口点\n\n  - `--env-file=[]`， 指定环境变量文件，文件格式为每行一个环境变量\n\n  - `--expose=[]`， 指定容器暴露的端口，即修改镜像的暴露端口\n\n  - `--link=[]`， 指定容器间的关联，使用其他容器的IP、env等信息\n\n  - `--lxc-conf=[]`， 指定容器的配置文件，只有在指定--exec-driver=lxc时使用\n\n  - `--name=\"\"`， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字\n\n  - `--net=\"bridge\"`， 容器网络设置:\n    - bridge 使用docker daemon指定的网桥\n    - host //容器使用主机的网络\n- container:NAME_or_ID >//使用其他容器的网路，共享IP和PORT等网络资源\n    - none 容器使用自己的网络（类似--net=bridge），但是不进行配置\n\n  - `--privileged=false`， 指定容器是否为特权容器，特权容器拥有所有的capabilities\n  \n  - `--restart=\"no\"`， 指定容器停止后的重启策略:\n    - no：容器退出时不重启\n  - on-failure：容器故障退出（返回值非零）时重启\n  - always：容器退出时总是重启\n  \n  - `--rm=false`， 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)\n  \n  - `--sig-proxy=true`， 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理\n\n# 示例\n\n- 运行一个在后台执行的容器，同时，还能用控制台管理：\n\n  ```shell\n  docker run -i -t -d ubuntu:latest\n  ```\n\n- 运行一个带命令在后台不断执行的容器，不直接展示容器内部信息：\n\n  ```shell\n  docker run -d ubuntu:latest ping www.docker.com\n  ```\n\n- 运行一个在后台不断执行的容器，同时带有命令，程序被终止后还能重启继续跑，还能用控制台管理：\n\n  ```shell\n  docker run -d --restart=always ubuntu:latest ping www.docker.com\n  ```\n\n- 为容器指定一个名字：\n\n  ```shell\n  docker run -d --name=ubuntu_server ubuntu:latest\n  ```\n\n- 容器暴露80端口，并指定宿主机80端口与其通信(**:** 之前是宿主机端口，之后是容器需暴露的端口)：\n\n  ```shell\n  docker run -d --name=ubuntu_server -p 80:80 ubuntu:latest\n  ```\n\n- 指定容器内目录与宿主机目录共享(**:** 之前是宿主机文件夹，之后是容器需共享的文件夹)\n\n  ```shell\n  docker run -d --name=ubuntu_server -v /etc/www:/var/www ubuntu:latest\n  ```\n\n  \n\n","source":"_posts/Technology/Docker/Docker命令详解（run篇）.md","raw":"---\ntitle: Docker命令详解（run篇）\ncategories:\n  - 技术开发\n  - Docker\nabbrlink: 2104589309\n---\n\n命令格式：`docker run [OPTIONS] IMAGE [COMMAND] [ARG...]`\nUsage: Run a command in a new container\n中文意思为：通过run命令创建一个新的容器（container）\n\n- 常用选项说明\n\n  - `-d, --detach=false`， 指定容器运行于前台还是后台，默认为false\n\n  - `-i, --interactive=false`， 打开STDIN，用于控制台交互\n\n  - `-t, --tty=false`， 分配tty设备，该可以支持终端登录，默认为false\n\n  - `-u, --user=\"\"`， 指定容器的用户\n\n  - `-a, --attach=[]`， 登录容器（必须是以docker run -d启动的容器）\n\n  - `-w, --workdir=\"\"`， 指定容器的工作目录\n\n  - `-c, --cpu-shares=0`， 设置容器CPU权重，在CPU共享场景使用\n\n  - `-e, --env=[]`， 指定环境变量，容器中可以使用该环境变量\n\n  - `-m, --memory=\"\"`， 指定容器的内存上限\n\n  - `-P, --publish-all=false`， 指定容器暴露的端口\n\n  - `-p, --publish=[]`， 指定容器暴露的端口\n\n  - `-h, --hostname=\"\"`， 指定容器的主机名\n\n  - `-v, --volume=[]`， 给容器挂载存储卷，挂载到容器的某个目录\n\n  - `--volumes-from=[]`， 给容器挂载其他容器上的卷，挂载到容器的某个目录\n\n  - `--cap-add=[]`， 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities\n\n  - `--cap-drop=[]`， 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities\n\n  - `--cidfile=\"\"`， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法\n\n  - `--cpuset=\"\"`， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU\n\n  - `--device=[]`， 添加主机设备给容器，相当于设备直通\n\n  - `--dns=[]`， 指定容器的dns服务器\n\n  - `--dns-search=[]`， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件\n\n  - `--entrypoint=\"\"`， 覆盖image的入口点\n\n  - `--env-file=[]`， 指定环境变量文件，文件格式为每行一个环境变量\n\n  - `--expose=[]`， 指定容器暴露的端口，即修改镜像的暴露端口\n\n  - `--link=[]`， 指定容器间的关联，使用其他容器的IP、env等信息\n\n  - `--lxc-conf=[]`， 指定容器的配置文件，只有在指定--exec-driver=lxc时使用\n\n  - `--name=\"\"`， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字\n\n  - `--net=\"bridge\"`， 容器网络设置:\n    - bridge 使用docker daemon指定的网桥\n    - host //容器使用主机的网络\n- container:NAME_or_ID >//使用其他容器的网路，共享IP和PORT等网络资源\n    - none 容器使用自己的网络（类似--net=bridge），但是不进行配置\n\n  - `--privileged=false`， 指定容器是否为特权容器，特权容器拥有所有的capabilities\n  \n  - `--restart=\"no\"`， 指定容器停止后的重启策略:\n    - no：容器退出时不重启\n  - on-failure：容器故障退出（返回值非零）时重启\n  - always：容器退出时总是重启\n  \n  - `--rm=false`， 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)\n  \n  - `--sig-proxy=true`， 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理\n\n# 示例\n\n- 运行一个在后台执行的容器，同时，还能用控制台管理：\n\n  ```shell\n  docker run -i -t -d ubuntu:latest\n  ```\n\n- 运行一个带命令在后台不断执行的容器，不直接展示容器内部信息：\n\n  ```shell\n  docker run -d ubuntu:latest ping www.docker.com\n  ```\n\n- 运行一个在后台不断执行的容器，同时带有命令，程序被终止后还能重启继续跑，还能用控制台管理：\n\n  ```shell\n  docker run -d --restart=always ubuntu:latest ping www.docker.com\n  ```\n\n- 为容器指定一个名字：\n\n  ```shell\n  docker run -d --name=ubuntu_server ubuntu:latest\n  ```\n\n- 容器暴露80端口，并指定宿主机80端口与其通信(**:** 之前是宿主机端口，之后是容器需暴露的端口)：\n\n  ```shell\n  docker run -d --name=ubuntu_server -p 80:80 ubuntu:latest\n  ```\n\n- 指定容器内目录与宿主机目录共享(**:** 之前是宿主机文件夹，之后是容器需共享的文件夹)\n\n  ```shell\n  docker run -d --name=ubuntu_server -v /etc/www:/var/www ubuntu:latest\n  ```\n\n  \n\n","slug":"Technology/Docker/Docker命令详解（run篇）","published":1,"date":"2021-04-16T13:46:26.640Z","updated":"2021-04-29T10:24:59.061Z","_id":"ckotdh5w0002dkw8z1x0aexdf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>命令格式：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code><br>Usage: Run a command in a new container<br>中文意思为：通过run命令创建一个新的容器（container）</p>\n<ul>\n<li><p>常用选项说明</p>\n<ul>\n<li><p><code>-d, --detach=false</code>， 指定容器运行于前台还是后台，默认为false</p>\n</li>\n<li><p><code>-i, --interactive=false</code>， 打开STDIN，用于控制台交互</p>\n</li>\n<li><p><code>-t, --tty=false</code>， 分配tty设备，该可以支持终端登录，默认为false</p>\n</li>\n<li><p><code>-u, --user=&quot;&quot;</code>， 指定容器的用户</p>\n</li>\n<li><p><code>-a, --attach=[]</code>， 登录容器（必须是以docker run -d启动的容器）</p>\n</li>\n<li><p><code>-w, --workdir=&quot;&quot;</code>， 指定容器的工作目录</p>\n</li>\n<li><p><code>-c, --cpu-shares=0</code>， 设置容器CPU权重，在CPU共享场景使用</p>\n</li>\n<li><p><code>-e, --env=[]</code>， 指定环境变量，容器中可以使用该环境变量</p>\n</li>\n<li><p><code>-m, --memory=&quot;&quot;</code>， 指定容器的内存上限</p>\n</li>\n<li><p><code>-P, --publish-all=false</code>， 指定容器暴露的端口</p>\n</li>\n<li><p><code>-p, --publish=[]</code>， 指定容器暴露的端口</p>\n</li>\n<li><p><code>-h, --hostname=&quot;&quot;</code>， 指定容器的主机名</p>\n</li>\n<li><p><code>-v, --volume=[]</code>， 给容器挂载存储卷，挂载到容器的某个目录</p>\n</li>\n<li><p><code>--volumes-from=[]</code>， 给容器挂载其他容器上的卷，挂载到容器的某个目录</p>\n</li>\n<li><p><code>--cap-add=[]</code>， 添加权限，权限清单详见：<a href=\"http://linux.die.net/man/7/capabilities\">http://linux.die.net/man/7/capabilities</a></p>\n</li>\n<li><p><code>--cap-drop=[]</code>， 删除权限，权限清单详见：<a href=\"http://linux.die.net/man/7/capabilities\">http://linux.die.net/man/7/capabilities</a></p>\n</li>\n<li><p><code>--cidfile=&quot;&quot;</code>， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法</p>\n</li>\n<li><p><code>--cpuset=&quot;&quot;</code>， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU</p>\n</li>\n<li><p><code>--device=[]</code>， 添加主机设备给容器，相当于设备直通</p>\n</li>\n<li><p><code>--dns=[]</code>， 指定容器的dns服务器</p>\n</li>\n<li><p><code>--dns-search=[]</code>， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件</p>\n</li>\n<li><p><code>--entrypoint=&quot;&quot;</code>， 覆盖image的入口点</p>\n</li>\n<li><p><code>--env-file=[]</code>， 指定环境变量文件，文件格式为每行一个环境变量</p>\n</li>\n<li><p><code>--expose=[]</code>， 指定容器暴露的端口，即修改镜像的暴露端口</p>\n</li>\n<li><p><code>--link=[]</code>， 指定容器间的关联，使用其他容器的IP、env等信息</p>\n</li>\n<li><p><code>--lxc-conf=[]</code>， 指定容器的配置文件，只有在指定–exec-driver=lxc时使用</p>\n</li>\n<li><p><code>--name=&quot;&quot;</code>， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字</p>\n</li>\n<li><p><code>--net=&quot;bridge&quot;</code>， 容器网络设置:</p>\n<ul>\n<li>bridge 使用docker daemon指定的网桥</li>\n<li>host //容器使用主机的网络</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>container:NAME_or_ID &gt;//使用其他容器的网路，共享IP和PORT等网络资源</p>\n<ul>\n<li><p>none 容器使用自己的网络（类似–net=bridge），但是不进行配置</p>\n</li>\n<li><p><code>--privileged=false</code>， 指定容器是否为特权容器，特权容器拥有所有的capabilities</p>\n</li>\n<li><p><code>--restart=&quot;no&quot;</code>， 指定容器停止后的重启策略:</p>\n<ul>\n<li>no：容器退出时不重启</li>\n</ul>\n</li>\n<li><p>on-failure：容器故障退出（返回值非零）时重启</p>\n</li>\n<li><p>always：容器退出时总是重启</p>\n</li>\n<li><p><code>--rm=false</code>， 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)</p>\n</li>\n<li><p><code>--sig-proxy=true</code>， 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><ul>\n<li><p>运行一个在后台执行的容器，同时，还能用控制台管理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -d ubuntu:latest</span><br></pre></td></tr></table></figure></li>\n<li><p>运行一个带命令在后台不断执行的容器，不直接展示容器内部信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d ubuntu:latest ping www.docker.com</span><br></pre></td></tr></table></figure></li>\n<li><p>运行一个在后台不断执行的容器，同时带有命令，程序被终止后还能重启继续跑，还能用控制台管理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --restart=always ubuntu:latest ping www.docker.com</span><br></pre></td></tr></table></figure></li>\n<li><p>为容器指定一个名字：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=ubuntu_server ubuntu:latest</span><br></pre></td></tr></table></figure></li>\n<li><p>容器暴露80端口，并指定宿主机80端口与其通信(<strong>:</strong> 之前是宿主机端口，之后是容器需暴露的端口)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=ubuntu_server -p 80:80 ubuntu:latest</span><br></pre></td></tr></table></figure></li>\n<li><p>指定容器内目录与宿主机目录共享(<strong>:</strong> 之前是宿主机文件夹，之后是容器需共享的文件夹)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=ubuntu_server -v /etc/www:/var/www ubuntu:latest</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>命令格式：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code><br>Usage: Run a command in a new container<br>中文意思为：通过run命令创建一个新的容器（container）</p>\n<ul>\n<li><p>常用选项说明</p>\n<ul>\n<li><p><code>-d, --detach=false</code>， 指定容器运行于前台还是后台，默认为false</p>\n</li>\n<li><p><code>-i, --interactive=false</code>， 打开STDIN，用于控制台交互</p>\n</li>\n<li><p><code>-t, --tty=false</code>， 分配tty设备，该可以支持终端登录，默认为false</p>\n</li>\n<li><p><code>-u, --user=&quot;&quot;</code>， 指定容器的用户</p>\n</li>\n<li><p><code>-a, --attach=[]</code>， 登录容器（必须是以docker run -d启动的容器）</p>\n</li>\n<li><p><code>-w, --workdir=&quot;&quot;</code>， 指定容器的工作目录</p>\n</li>\n<li><p><code>-c, --cpu-shares=0</code>， 设置容器CPU权重，在CPU共享场景使用</p>\n</li>\n<li><p><code>-e, --env=[]</code>， 指定环境变量，容器中可以使用该环境变量</p>\n</li>\n<li><p><code>-m, --memory=&quot;&quot;</code>， 指定容器的内存上限</p>\n</li>\n<li><p><code>-P, --publish-all=false</code>， 指定容器暴露的端口</p>\n</li>\n<li><p><code>-p, --publish=[]</code>， 指定容器暴露的端口</p>\n</li>\n<li><p><code>-h, --hostname=&quot;&quot;</code>， 指定容器的主机名</p>\n</li>\n<li><p><code>-v, --volume=[]</code>， 给容器挂载存储卷，挂载到容器的某个目录</p>\n</li>\n<li><p><code>--volumes-from=[]</code>， 给容器挂载其他容器上的卷，挂载到容器的某个目录</p>\n</li>\n<li><p><code>--cap-add=[]</code>， 添加权限，权限清单详见：<a href=\"http://linux.die.net/man/7/capabilities\">http://linux.die.net/man/7/capabilities</a></p>\n</li>\n<li><p><code>--cap-drop=[]</code>， 删除权限，权限清单详见：<a href=\"http://linux.die.net/man/7/capabilities\">http://linux.die.net/man/7/capabilities</a></p>\n</li>\n<li><p><code>--cidfile=&quot;&quot;</code>， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法</p>\n</li>\n<li><p><code>--cpuset=&quot;&quot;</code>， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU</p>\n</li>\n<li><p><code>--device=[]</code>， 添加主机设备给容器，相当于设备直通</p>\n</li>\n<li><p><code>--dns=[]</code>， 指定容器的dns服务器</p>\n</li>\n<li><p><code>--dns-search=[]</code>， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件</p>\n</li>\n<li><p><code>--entrypoint=&quot;&quot;</code>， 覆盖image的入口点</p>\n</li>\n<li><p><code>--env-file=[]</code>， 指定环境变量文件，文件格式为每行一个环境变量</p>\n</li>\n<li><p><code>--expose=[]</code>， 指定容器暴露的端口，即修改镜像的暴露端口</p>\n</li>\n<li><p><code>--link=[]</code>， 指定容器间的关联，使用其他容器的IP、env等信息</p>\n</li>\n<li><p><code>--lxc-conf=[]</code>， 指定容器的配置文件，只有在指定–exec-driver=lxc时使用</p>\n</li>\n<li><p><code>--name=&quot;&quot;</code>， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字</p>\n</li>\n<li><p><code>--net=&quot;bridge&quot;</code>， 容器网络设置:</p>\n<ul>\n<li>bridge 使用docker daemon指定的网桥</li>\n<li>host //容器使用主机的网络</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>container:NAME_or_ID &gt;//使用其他容器的网路，共享IP和PORT等网络资源</p>\n<ul>\n<li><p>none 容器使用自己的网络（类似–net=bridge），但是不进行配置</p>\n</li>\n<li><p><code>--privileged=false</code>， 指定容器是否为特权容器，特权容器拥有所有的capabilities</p>\n</li>\n<li><p><code>--restart=&quot;no&quot;</code>， 指定容器停止后的重启策略:</p>\n<ul>\n<li>no：容器退出时不重启</li>\n</ul>\n</li>\n<li><p>on-failure：容器故障退出（返回值非零）时重启</p>\n</li>\n<li><p>always：容器退出时总是重启</p>\n</li>\n<li><p><code>--rm=false</code>， 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)</p>\n</li>\n<li><p><code>--sig-proxy=true</code>， 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><ul>\n<li><p>运行一个在后台执行的容器，同时，还能用控制台管理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -d ubuntu:latest</span><br></pre></td></tr></table></figure></li>\n<li><p>运行一个带命令在后台不断执行的容器，不直接展示容器内部信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d ubuntu:latest ping www.docker.com</span><br></pre></td></tr></table></figure></li>\n<li><p>运行一个在后台不断执行的容器，同时带有命令，程序被终止后还能重启继续跑，还能用控制台管理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --restart=always ubuntu:latest ping www.docker.com</span><br></pre></td></tr></table></figure></li>\n<li><p>为容器指定一个名字：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=ubuntu_server ubuntu:latest</span><br></pre></td></tr></table></figure></li>\n<li><p>容器暴露80端口，并指定宿主机80端口与其通信(<strong>:</strong> 之前是宿主机端口，之后是容器需暴露的端口)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=ubuntu_server -p 80:80 ubuntu:latest</span><br></pre></td></tr></table></figure></li>\n<li><p>指定容器内目录与宿主机目录共享(<strong>:</strong> 之前是宿主机文件夹，之后是容器需共享的文件夹)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=ubuntu_server -v /etc/www:/var/www ubuntu:latest</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"mongo数据库角色","abbrlink":1323723771,"_content":"\n## 内建的角色\n\n数据库用户角色：read、readWrite;\n数据库管理角色：dbAdmin、dbOwner、userAdmin；\n集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\n备份恢复角色：backup、restore；\n所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase\n超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）\n内部角色：__system\n\n## 角色说明：\n\nRead：允许用户读取指定数据库\nreadWrite：允许用户读写指定数据库\ndbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile\nuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户\nclusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。\nreadAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限\nreadWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限\nuserAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\ndbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。\nroot：只在admin数据库中可用。超级账号，超级权限\n\n### 参考资料：\n\n- 官方详情角色说明：https://docs.mongodb.com/manual/reference/built-in-roles/\n- 官方配置文件实例：https://docs.mongodb.com/manual/reference/configuration-options/\n- MongoDB学习笔记—权限管理：https://www.cnblogs.com/hanyinglong/p/5704320.html","source":"_posts/Technology/Mongo/mongo数据库角色.md","raw":"---\ntitle: mongo数据库角色\ncategories:\n  - 技术开发\n  - 数据库\n  - Mongo\nabbrlink: 1323723771\n---\n\n## 内建的角色\n\n数据库用户角色：read、readWrite;\n数据库管理角色：dbAdmin、dbOwner、userAdmin；\n集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\n备份恢复角色：backup、restore；\n所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase\n超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）\n内部角色：__system\n\n## 角色说明：\n\nRead：允许用户读取指定数据库\nreadWrite：允许用户读写指定数据库\ndbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile\nuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户\nclusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。\nreadAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限\nreadWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限\nuserAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\ndbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。\nroot：只在admin数据库中可用。超级账号，超级权限\n\n### 参考资料：\n\n- 官方详情角色说明：https://docs.mongodb.com/manual/reference/built-in-roles/\n- 官方配置文件实例：https://docs.mongodb.com/manual/reference/configuration-options/\n- MongoDB学习笔记—权限管理：https://www.cnblogs.com/hanyinglong/p/5704320.html","slug":"Technology/Mongo/mongo数据库角色","published":1,"date":"2021-04-16T13:45:36.645Z","updated":"2021-04-29T10:24:59.155Z","_id":"ckotdh5w1002ekw8z0e093vj6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"内建的角色\"><a href=\"#内建的角色\" class=\"headerlink\" title=\"内建的角色\"></a>内建的角色</h2><p>数据库用户角色：read、readWrite;<br>数据库管理角色：dbAdmin、dbOwner、userAdmin；<br>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；<br>备份恢复角色：backup、restore；<br>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase<br>超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）<br>内部角色：__system</p>\n<h2 id=\"角色说明：\"><a href=\"#角色说明：\" class=\"headerlink\" title=\"角色说明：\"></a>角色说明：</h2><p>Read：允许用户读取指定数据库<br>readWrite：允许用户读写指定数据库<br>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile<br>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户<br>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。<br>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限<br>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限<br>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限<br>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。<br>root：只在admin数据库中可用。超级账号，超级权限</p>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><ul>\n<li>官方详情角色说明：<a href=\"https://docs.mongodb.com/manual/reference/built-in-roles/\">https://docs.mongodb.com/manual/reference/built-in-roles/</a></li>\n<li>官方配置文件实例：<a href=\"https://docs.mongodb.com/manual/reference/configuration-options/\">https://docs.mongodb.com/manual/reference/configuration-options/</a></li>\n<li>MongoDB学习笔记—权限管理：<a href=\"https://www.cnblogs.com/hanyinglong/p/5704320.html\">https://www.cnblogs.com/hanyinglong/p/5704320.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内建的角色\"><a href=\"#内建的角色\" class=\"headerlink\" title=\"内建的角色\"></a>内建的角色</h2><p>数据库用户角色：read、readWrite;<br>数据库管理角色：dbAdmin、dbOwner、userAdmin；<br>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；<br>备份恢复角色：backup、restore；<br>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase<br>超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）<br>内部角色：__system</p>\n<h2 id=\"角色说明：\"><a href=\"#角色说明：\" class=\"headerlink\" title=\"角色说明：\"></a>角色说明：</h2><p>Read：允许用户读取指定数据库<br>readWrite：允许用户读写指定数据库<br>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile<br>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户<br>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。<br>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限<br>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限<br>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限<br>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。<br>root：只在admin数据库中可用。超级账号，超级权限</p>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><ul>\n<li>官方详情角色说明：<a href=\"https://docs.mongodb.com/manual/reference/built-in-roles/\">https://docs.mongodb.com/manual/reference/built-in-roles/</a></li>\n<li>官方配置文件实例：<a href=\"https://docs.mongodb.com/manual/reference/configuration-options/\">https://docs.mongodb.com/manual/reference/configuration-options/</a></li>\n<li>MongoDB学习笔记—权限管理：<a href=\"https://www.cnblogs.com/hanyinglong/p/5704320.html\">https://www.cnblogs.com/hanyinglong/p/5704320.html</a></li>\n</ul>\n"},{"title":"mongo新建用户","abbrlink":3140326379,"_content":"\n连接 mongo之后\n\n第一步：切换到 admin 库，mongo 默认库用来保存操作用户信息：\n\n```shell\nuse admin\n```\n\n第二步：创建一个用户名是root，密码是root123的管理员身份用户\n\n```shell\ndb.createUser({user:'root',pwd:'root123',roles:['userAdminAnyDatabase']})\n```\n\n第三步：切换到业务库\n\n```shell\nuse TestDemo\n```\n\n第四步：赋予新创建的用户TestDemo业务库的读写权限\n\n```shell\ndb.createUser({user:'root',pwd:'root123',roles:['readWrite']})\n```\n\n创建超极用户root\n\n```shell\nuse admin\ndb.createUser(\n  {\n    user: \"root\",\n    pwd: \"root\",\n    roles: [ { role: \"root\", db: \"admin\" } ]\n  }\n);\n```\n\n删除用户\n\n```\ndb.removeUser('XXX')            \n```\n\n","source":"_posts/Technology/Mongo/mongo新建用户.md","raw":"---\ntitle: mongo新建用户\ncategories:\n  - 技术开发\n  - 数据库\n  - Mongo\nabbrlink: 3140326379\n---\n\n连接 mongo之后\n\n第一步：切换到 admin 库，mongo 默认库用来保存操作用户信息：\n\n```shell\nuse admin\n```\n\n第二步：创建一个用户名是root，密码是root123的管理员身份用户\n\n```shell\ndb.createUser({user:'root',pwd:'root123',roles:['userAdminAnyDatabase']})\n```\n\n第三步：切换到业务库\n\n```shell\nuse TestDemo\n```\n\n第四步：赋予新创建的用户TestDemo业务库的读写权限\n\n```shell\ndb.createUser({user:'root',pwd:'root123',roles:['readWrite']})\n```\n\n创建超极用户root\n\n```shell\nuse admin\ndb.createUser(\n  {\n    user: \"root\",\n    pwd: \"root\",\n    roles: [ { role: \"root\", db: \"admin\" } ]\n  }\n);\n```\n\n删除用户\n\n```\ndb.removeUser('XXX')            \n```\n\n","slug":"Technology/Mongo/mongo新建用户","published":1,"date":"2021-04-16T13:45:36.699Z","updated":"2021-04-29T10:24:59.156Z","_id":"ckotdh5w2002gkw8z23alafi3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>连接 mongo之后</p>\n<p>第一步：切换到 admin 库，mongo 默认库用来保存操作用户信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br></pre></td></tr></table></figure>\n\n<p>第二步：创建一个用户名是root，密码是root123的管理员身份用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user:&#x27;root&#x27;,pwd:&#x27;root123&#x27;,roles:[&#x27;userAdminAnyDatabase&#x27;]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>第三步：切换到业务库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use TestDemo</span><br></pre></td></tr></table></figure>\n\n<p>第四步：赋予新创建的用户TestDemo业务库的读写权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user:&#x27;root&#x27;,pwd:&#x27;root123&#x27;,roles:[&#x27;readWrite&#x27;]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>创建超极用户root</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.createUser(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    user: &quot;root&quot;,</span><br><span class=\"line\">    pwd: &quot;root&quot;,</span><br><span class=\"line\">    roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>删除用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.removeUser(&#39;XXX&#39;)            </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>连接 mongo之后</p>\n<p>第一步：切换到 admin 库，mongo 默认库用来保存操作用户信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br></pre></td></tr></table></figure>\n\n<p>第二步：创建一个用户名是root，密码是root123的管理员身份用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user:&#x27;root&#x27;,pwd:&#x27;root123&#x27;,roles:[&#x27;userAdminAnyDatabase&#x27;]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>第三步：切换到业务库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use TestDemo</span><br></pre></td></tr></table></figure>\n\n<p>第四步：赋予新创建的用户TestDemo业务库的读写权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user:&#x27;root&#x27;,pwd:&#x27;root123&#x27;,roles:[&#x27;readWrite&#x27;]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>创建超极用户root</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.createUser(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    user: &quot;root&quot;,</span><br><span class=\"line\">    pwd: &quot;root&quot;,</span><br><span class=\"line\">    roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>删除用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.removeUser(&#39;XXX&#39;)            </span><br></pre></td></tr></table></figure>\n\n"},{"title":"一个很好地leetcode项目","abbrlink":3220316175,"_content":"\n#### 项目地址\n\nhttps://github.com/doocs/leetcode\n\n","source":"_posts/Technology/LeetCode/一个很好的leetcode项目.md","raw":"---\ntitle: 一个很好地leetcode项目\ncategories:\n  - 技术开发\n  - Leetcode\nabbrlink: 3220316175\n---\n\n#### 项目地址\n\nhttps://github.com/doocs/leetcode\n\n","slug":"Technology/LeetCode/一个很好的leetcode项目","published":1,"date":"2021-04-16T13:47:38.310Z","updated":"2021-04-29T10:24:59.064Z","_id":"ckotdh5w3002hkw8zflczhnmz","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h4><p><a href=\"https://github.com/doocs/leetcode\">https://github.com/doocs/leetcode</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h4><p><a href=\"https://github.com/doocs/leetcode\">https://github.com/doocs/leetcode</a></p>\n"},{"title":"mongo常用命令","abbrlink":1691421171,"_content":"\n```shell\nshow dbs  #显示数据库列表 \nshow collections  #显示当前数据库中的集合（类似关系数据库中的表）\nshow users  #显示用户\nuse <db name>  #切换当前数据库，如果数据库不存在则创建数据库。 \ndb.help()  #显示数据库操作命令，里面有很多的命令 \ndb.foo.help()  #显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令 \ndb.foo.find()  #对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据） \ndb.foo.find( { a : 1 } )  #对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1\ndb.dropDatabase()  #删除当前使用数据库\ndb.cloneDatabase(\"127.0.0.1\")   #将指定机器上的数据库的数据克隆到当前数据库\ndb.copyDatabase(\"mydb\", \"temp\", \"127.0.0.1\")  #将本机的mydb的数据复制到temp数据库中\ndb.repairDatabase()  #修复当前数据库\ndb.getName()  #查看当前使用的数据库，也可以直接用db\ndb.stats()  #显示当前db状态\ndb.version()  #当前db版本\ndb.getMongo()  ＃查看当前db的链接机器地址\ndb.serverStatus()  #查看数据库服务器的状态\n```\n\n","source":"_posts/Technology/Mongo/mongo常用命令.md","raw":"---\ntitle: mongo常用命令\ncategories:\n  - 技术开发\n  - 数据库\n  - Mongo\nabbrlink: 1691421171\n---\n\n```shell\nshow dbs  #显示数据库列表 \nshow collections  #显示当前数据库中的集合（类似关系数据库中的表）\nshow users  #显示用户\nuse <db name>  #切换当前数据库，如果数据库不存在则创建数据库。 \ndb.help()  #显示数据库操作命令，里面有很多的命令 \ndb.foo.help()  #显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令 \ndb.foo.find()  #对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据） \ndb.foo.find( { a : 1 } )  #对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1\ndb.dropDatabase()  #删除当前使用数据库\ndb.cloneDatabase(\"127.0.0.1\")   #将指定机器上的数据库的数据克隆到当前数据库\ndb.copyDatabase(\"mydb\", \"temp\", \"127.0.0.1\")  #将本机的mydb的数据复制到temp数据库中\ndb.repairDatabase()  #修复当前数据库\ndb.getName()  #查看当前使用的数据库，也可以直接用db\ndb.stats()  #显示当前db状态\ndb.version()  #当前db版本\ndb.getMongo()  ＃查看当前db的链接机器地址\ndb.serverStatus()  #查看数据库服务器的状态\n```\n\n","slug":"Technology/Mongo/mongo常用命令","published":1,"date":"2021-04-16T13:45:36.639Z","updated":"2021-04-29T10:24:59.153Z","_id":"ckotdh5wb002kkw8zhki1dyn6","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs  #显示数据库列表 </span><br><span class=\"line\">show collections  #显示当前数据库中的集合（类似关系数据库中的表）</span><br><span class=\"line\">show users  #显示用户</span><br><span class=\"line\">use &lt;db name&gt;  #切换当前数据库，如果数据库不存在则创建数据库。 </span><br><span class=\"line\">db.help()  #显示数据库操作命令，里面有很多的命令 </span><br><span class=\"line\">db.foo.help()  #显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令 </span><br><span class=\"line\">db.foo.find()  #对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据） </span><br><span class=\"line\">db.foo.find( &#123; a : 1 &#125; )  #对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1</span><br><span class=\"line\">db.dropDatabase()  #删除当前使用数据库</span><br><span class=\"line\">db.cloneDatabase(&quot;127.0.0.1&quot;)   #将指定机器上的数据库的数据克隆到当前数据库</span><br><span class=\"line\">db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;)  #将本机的mydb的数据复制到temp数据库中</span><br><span class=\"line\">db.repairDatabase()  #修复当前数据库</span><br><span class=\"line\">db.getName()  #查看当前使用的数据库，也可以直接用db</span><br><span class=\"line\">db.stats()  #显示当前db状态</span><br><span class=\"line\">db.version()  #当前db版本</span><br><span class=\"line\">db.getMongo()  ＃查看当前db的链接机器地址</span><br><span class=\"line\">db.serverStatus()  #查看数据库服务器的状态</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs  #显示数据库列表 </span><br><span class=\"line\">show collections  #显示当前数据库中的集合（类似关系数据库中的表）</span><br><span class=\"line\">show users  #显示用户</span><br><span class=\"line\">use &lt;db name&gt;  #切换当前数据库，如果数据库不存在则创建数据库。 </span><br><span class=\"line\">db.help()  #显示数据库操作命令，里面有很多的命令 </span><br><span class=\"line\">db.foo.help()  #显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令 </span><br><span class=\"line\">db.foo.find()  #对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据） </span><br><span class=\"line\">db.foo.find( &#123; a : 1 &#125; )  #对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1</span><br><span class=\"line\">db.dropDatabase()  #删除当前使用数据库</span><br><span class=\"line\">db.cloneDatabase(&quot;127.0.0.1&quot;)   #将指定机器上的数据库的数据克隆到当前数据库</span><br><span class=\"line\">db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;)  #将本机的mydb的数据复制到temp数据库中</span><br><span class=\"line\">db.repairDatabase()  #修复当前数据库</span><br><span class=\"line\">db.getName()  #查看当前使用的数据库，也可以直接用db</span><br><span class=\"line\">db.stats()  #显示当前db状态</span><br><span class=\"line\">db.version()  #当前db版本</span><br><span class=\"line\">db.getMongo()  ＃查看当前db的链接机器地址</span><br><span class=\"line\">db.serverStatus()  #查看数据库服务器的状态</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Centos7下Oracle19c的安装","abbrlink":1452475922,"_content":"\n## 第一步：检查Linux系统版本\n\n执行命令 lsb_release -a 查看系统版本\n\n```shell\nlsb_release -a\n```\n\n用yum更新升级自己的系统到当前最新。\n\n```shell\nyum -y clean all\n```\n\n```shell\nyum -y update\n```\n\n## 第二步：下载Oracle19c的安装包\n\n下载地址：https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c\n\n![image-20210408225643282](https://cdn.dd-code.site/PicGo/20210408225753.png)\n\n## 第三步：下载Oracle19c的预安装包\n\n下载地址：http://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm\n\n## 第四步：安装包全部上传到Linux\n\n```shell\nscp oracle-database-ee-19c-1.0-1.x86_64.rpm root@39.107.245.19:/root\n```\n\n","source":"_posts/Technology/Oracle/Centos7下Oracle19c的安装.md","raw":"---\ntitle: Centos7下Oracle19c的安装\ncategories:\n  - 技术开发\n  - 数据库\n  - Oracle\nabbrlink: 1452475922\n---\n\n## 第一步：检查Linux系统版本\n\n执行命令 lsb_release -a 查看系统版本\n\n```shell\nlsb_release -a\n```\n\n用yum更新升级自己的系统到当前最新。\n\n```shell\nyum -y clean all\n```\n\n```shell\nyum -y update\n```\n\n## 第二步：下载Oracle19c的安装包\n\n下载地址：https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c\n\n![image-20210408225643282](https://cdn.dd-code.site/PicGo/20210408225753.png)\n\n## 第三步：下载Oracle19c的预安装包\n\n下载地址：http://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm\n\n## 第四步：安装包全部上传到Linux\n\n```shell\nscp oracle-database-ee-19c-1.0-1.x86_64.rpm root@39.107.245.19:/root\n```\n\n","slug":"Technology/Oracle/Centos7下Oracle19c的安装","published":1,"date":"2021-04-16T13:48:08.416Z","updated":"2021-04-29T10:24:59.066Z","_id":"ckotdh5wd002mkw8zdd4aclgc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第一步：检查Linux系统版本\"><a href=\"#第一步：检查Linux系统版本\" class=\"headerlink\" title=\"第一步：检查Linux系统版本\"></a>第一步：检查Linux系统版本</h2><p>执行命令 lsb_release -a 查看系统版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br></pre></td></tr></table></figure>\n\n<p>用yum更新升级自己的系统到当前最新。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y clean all</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二步：下载Oracle19c的安装包\"><a href=\"#第二步：下载Oracle19c的安装包\" class=\"headerlink\" title=\"第二步：下载Oracle19c的安装包\"></a>第二步：下载Oracle19c的安装包</h2><p>下载地址：<a href=\"https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c\">https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c</a></p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20210408225753.png\" alt=\"image-20210408225643282\"></p>\n<h2 id=\"第三步：下载Oracle19c的预安装包\"><a href=\"#第三步：下载Oracle19c的预安装包\" class=\"headerlink\" title=\"第三步：下载Oracle19c的预安装包\"></a>第三步：下载Oracle19c的预安装包</h2><p>下载地址：<a href=\"http://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm\">http://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm</a></p>\n<h2 id=\"第四步：安装包全部上传到Linux\"><a href=\"#第四步：安装包全部上传到Linux\" class=\"headerlink\" title=\"第四步：安装包全部上传到Linux\"></a>第四步：安装包全部上传到Linux</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp oracle-database-ee-19c-1.0-1.x86_64.rpm root@39.107.245.19:/root</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一步：检查Linux系统版本\"><a href=\"#第一步：检查Linux系统版本\" class=\"headerlink\" title=\"第一步：检查Linux系统版本\"></a>第一步：检查Linux系统版本</h2><p>执行命令 lsb_release -a 查看系统版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br></pre></td></tr></table></figure>\n\n<p>用yum更新升级自己的系统到当前最新。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y clean all</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二步：下载Oracle19c的安装包\"><a href=\"#第二步：下载Oracle19c的安装包\" class=\"headerlink\" title=\"第二步：下载Oracle19c的安装包\"></a>第二步：下载Oracle19c的安装包</h2><p>下载地址：<a href=\"https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c\">https://www.oracle.com/database/technologies/oracle-database-software-downloads.html#19c</a></p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20210408225753.png\" alt=\"image-20210408225643282\"></p>\n<h2 id=\"第三步：下载Oracle19c的预安装包\"><a href=\"#第三步：下载Oracle19c的预安装包\" class=\"headerlink\" title=\"第三步：下载Oracle19c的预安装包\"></a>第三步：下载Oracle19c的预安装包</h2><p>下载地址：<a href=\"http://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm\">http://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm</a></p>\n<h2 id=\"第四步：安装包全部上传到Linux\"><a href=\"#第四步：安装包全部上传到Linux\" class=\"headerlink\" title=\"第四步：安装包全部上传到Linux\"></a>第四步：安装包全部上传到Linux</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp oracle-database-ee-19c-1.0-1.x86_64.rpm root@39.107.245.19:/root</span><br></pre></td></tr></table></figure>\n\n"},{"title":"docker安装oracle19c","abbrlink":3032572741,"_content":"\n## 拉取镜像\n\n```shell\ndocker pull registry.cn-hangzhou.aliyuncs.com/zhuyijun/oracle:19c\n```\n\n## 启动\n\n```sh\ndocker run -p 1521:1521 -p 5500:5500 \\\n-e ORACLE_SID=orcl \\\n-e ORACLE_PDB=orclpdb1 \\\n-e ORACLE_PWD=123456 \\\n-e ORACLE_CHARACTERSET=zhs16gbk \\\n-e ORACLE_BASE=/opt/oracle \\\n-e ORACLE_HOME=/opt/oracle/product/19c/dbhome_1 \\\n-e PATH=/opt/oracle/product/19c/dbhome_1/bin:/opt/oracle/product/19c/dbhome_1/OPatch/:/usr/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\n-v /Users/liudandan/homedata/oradata:/opt/oracle/oradata \\\n--name myoracle \\\nregistry.cn-hangzhou.aliyuncs.com/zhuyijun/oracle:19c\n```\n\n注意1：\n\n> 1、注意使用之前请修改启动参数   \n>\n> 2、修改/Users/liudandan/homedata/oradata为自己创建的orcale数据存储目录\n>\n> 3、<container name>请填写镜像的容器id或者容器名\n\n注意2：\n\n> 1、出现DATABASE IS READY TO USE 代表者成功了\n>\n> 2、这时先不要关闭终端，另外开启一个\n>\n> 3、进入环境修改oracle密码\n\n## 启动成功之后的界面\n\n启动需要一定时间，这是正在启动的画面\n\n![image-20210401213336943](https://cdn.dd-code.site/PicGo/20210401213339.png)\n\n![image-20210401213725696](https://cdn.dd-code.site/PicGo/20210401213728.png)\n\n![](https://cdn.dd-code.site/PicGo/20210402000212.png)\n\n## 修改Oralce数据库密码 \n\n```shell\ndocker exec  myoracle ./setPassword.sh 123456\n```\n\n> ！修改完密码后可以关闭之前终端了，出现 DATABASE IS READY TO USE之后，后边都是显示的日志，可以关闭终端，关闭终端不会导致它停止运行\n\n## 进入Oracle Enterprise Manager Database Express页面\n\n```\nhttps://localhost:5500/em\n```\n\n> ！注意输入网址是采用的是https，http无法访问。\n\n| 账号   | system/sys/等 |\n| ------ | ------------- |\n| 密码   | 123456        |\n| 容器名 | orclpdb1      |\n\n","source":"_posts/Technology/Oracle/docker安装oracle19c.md","raw":"---\ntitle: docker安装oracle19c\ncategories:\n  - 技术开发\n  - 数据库\n  - Oracle\nabbrlink: 3032572741\n---\n\n## 拉取镜像\n\n```shell\ndocker pull registry.cn-hangzhou.aliyuncs.com/zhuyijun/oracle:19c\n```\n\n## 启动\n\n```sh\ndocker run -p 1521:1521 -p 5500:5500 \\\n-e ORACLE_SID=orcl \\\n-e ORACLE_PDB=orclpdb1 \\\n-e ORACLE_PWD=123456 \\\n-e ORACLE_CHARACTERSET=zhs16gbk \\\n-e ORACLE_BASE=/opt/oracle \\\n-e ORACLE_HOME=/opt/oracle/product/19c/dbhome_1 \\\n-e PATH=/opt/oracle/product/19c/dbhome_1/bin:/opt/oracle/product/19c/dbhome_1/OPatch/:/usr/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\n-v /Users/liudandan/homedata/oradata:/opt/oracle/oradata \\\n--name myoracle \\\nregistry.cn-hangzhou.aliyuncs.com/zhuyijun/oracle:19c\n```\n\n注意1：\n\n> 1、注意使用之前请修改启动参数   \n>\n> 2、修改/Users/liudandan/homedata/oradata为自己创建的orcale数据存储目录\n>\n> 3、<container name>请填写镜像的容器id或者容器名\n\n注意2：\n\n> 1、出现DATABASE IS READY TO USE 代表者成功了\n>\n> 2、这时先不要关闭终端，另外开启一个\n>\n> 3、进入环境修改oracle密码\n\n## 启动成功之后的界面\n\n启动需要一定时间，这是正在启动的画面\n\n![image-20210401213336943](https://cdn.dd-code.site/PicGo/20210401213339.png)\n\n![image-20210401213725696](https://cdn.dd-code.site/PicGo/20210401213728.png)\n\n![](https://cdn.dd-code.site/PicGo/20210402000212.png)\n\n## 修改Oralce数据库密码 \n\n```shell\ndocker exec  myoracle ./setPassword.sh 123456\n```\n\n> ！修改完密码后可以关闭之前终端了，出现 DATABASE IS READY TO USE之后，后边都是显示的日志，可以关闭终端，关闭终端不会导致它停止运行\n\n## 进入Oracle Enterprise Manager Database Express页面\n\n```\nhttps://localhost:5500/em\n```\n\n> ！注意输入网址是采用的是https，http无法访问。\n\n| 账号   | system/sys/等 |\n| ------ | ------------- |\n| 密码   | 123456        |\n| 容器名 | orclpdb1      |\n\n","slug":"Technology/Oracle/docker安装oracle19c","published":1,"date":"2021-04-16T13:48:08.420Z","updated":"2021-04-29T10:24:59.067Z","_id":"ckotdh5we002pkw8zbwbch9yd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/zhuyijun/oracle:19c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 1521:1521 -p 5500:5500 \\</span><br><span class=\"line\">-e ORACLE_SID=orcl \\</span><br><span class=\"line\">-e ORACLE_PDB=orclpdb1 \\</span><br><span class=\"line\">-e ORACLE_PWD=123456 \\</span><br><span class=\"line\">-e ORACLE_CHARACTERSET=zhs16gbk \\</span><br><span class=\"line\">-e ORACLE_BASE=/opt/oracle \\</span><br><span class=\"line\">-e ORACLE_HOME=/opt/oracle/product/19c/dbhome_1 \\</span><br><span class=\"line\">-e PATH=/opt/oracle/product/19c/dbhome_1/bin:/opt/oracle/product/19c/dbhome_1/OPatch/:/usr/sbin:/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin \\</span><br><span class=\"line\">-v /Users/liudandan/homedata/oradata:/opt/oracle/oradata \\</span><br><span class=\"line\">--name myoracle \\</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/zhuyijun/oracle:19c</span><br></pre></td></tr></table></figure>\n\n<p>注意1：</p>\n<blockquote>\n<p>1、注意使用之前请修改启动参数   </p>\n<p>2、修改/Users/liudandan/homedata/oradata为自己创建的orcale数据存储目录</p>\n<p>3、<container name>请填写镜像的容器id或者容器名</p>\n</blockquote>\n<p>注意2：</p>\n<blockquote>\n<p>1、出现DATABASE IS READY TO USE 代表者成功了</p>\n<p>2、这时先不要关闭终端，另外开启一个</p>\n<p>3、进入环境修改oracle密码</p>\n</blockquote>\n<h2 id=\"启动成功之后的界面\"><a href=\"#启动成功之后的界面\" class=\"headerlink\" title=\"启动成功之后的界面\"></a>启动成功之后的界面</h2><p>启动需要一定时间，这是正在启动的画面</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20210401213339.png\" alt=\"image-20210401213336943\"></p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20210401213728.png\" alt=\"image-20210401213725696\"></p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20210402000212.png\"></p>\n<h2 id=\"修改Oralce数据库密码\"><a href=\"#修改Oralce数据库密码\" class=\"headerlink\" title=\"修改Oralce数据库密码\"></a>修改Oralce数据库密码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec  myoracle ./setPassword.sh 123456</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>！修改完密码后可以关闭之前终端了，出现 DATABASE IS READY TO USE之后，后边都是显示的日志，可以关闭终端，关闭终端不会导致它停止运行</p>\n</blockquote>\n<h2 id=\"进入Oracle-Enterprise-Manager-Database-Express页面\"><a href=\"#进入Oracle-Enterprise-Manager-Database-Express页面\" class=\"headerlink\" title=\"进入Oracle Enterprise Manager Database Express页面\"></a>进入Oracle Enterprise Manager Database Express页面</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;localhost:5500&#x2F;em</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>！注意输入网址是采用的是https，http无法访问。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>账号</th>\n<th>system/sys/等</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>密码</td>\n<td>123456</td>\n</tr>\n<tr>\n<td>容器名</td>\n<td>orclpdb1</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/zhuyijun/oracle:19c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 1521:1521 -p 5500:5500 \\</span><br><span class=\"line\">-e ORACLE_SID=orcl \\</span><br><span class=\"line\">-e ORACLE_PDB=orclpdb1 \\</span><br><span class=\"line\">-e ORACLE_PWD=123456 \\</span><br><span class=\"line\">-e ORACLE_CHARACTERSET=zhs16gbk \\</span><br><span class=\"line\">-e ORACLE_BASE=/opt/oracle \\</span><br><span class=\"line\">-e ORACLE_HOME=/opt/oracle/product/19c/dbhome_1 \\</span><br><span class=\"line\">-e PATH=/opt/oracle/product/19c/dbhome_1/bin:/opt/oracle/product/19c/dbhome_1/OPatch/:/usr/sbin:/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin \\</span><br><span class=\"line\">-v /Users/liudandan/homedata/oradata:/opt/oracle/oradata \\</span><br><span class=\"line\">--name myoracle \\</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/zhuyijun/oracle:19c</span><br></pre></td></tr></table></figure>\n\n<p>注意1：</p>\n<blockquote>\n<p>1、注意使用之前请修改启动参数   </p>\n<p>2、修改/Users/liudandan/homedata/oradata为自己创建的orcale数据存储目录</p>\n<p>3、<container name>请填写镜像的容器id或者容器名</p>\n</blockquote>\n<p>注意2：</p>\n<blockquote>\n<p>1、出现DATABASE IS READY TO USE 代表者成功了</p>\n<p>2、这时先不要关闭终端，另外开启一个</p>\n<p>3、进入环境修改oracle密码</p>\n</blockquote>\n<h2 id=\"启动成功之后的界面\"><a href=\"#启动成功之后的界面\" class=\"headerlink\" title=\"启动成功之后的界面\"></a>启动成功之后的界面</h2><p>启动需要一定时间，这是正在启动的画面</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20210401213339.png\" alt=\"image-20210401213336943\"></p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20210401213728.png\" alt=\"image-20210401213725696\"></p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20210402000212.png\"></p>\n<h2 id=\"修改Oralce数据库密码\"><a href=\"#修改Oralce数据库密码\" class=\"headerlink\" title=\"修改Oralce数据库密码\"></a>修改Oralce数据库密码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec  myoracle ./setPassword.sh 123456</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>！修改完密码后可以关闭之前终端了，出现 DATABASE IS READY TO USE之后，后边都是显示的日志，可以关闭终端，关闭终端不会导致它停止运行</p>\n</blockquote>\n<h2 id=\"进入Oracle-Enterprise-Manager-Database-Express页面\"><a href=\"#进入Oracle-Enterprise-Manager-Database-Express页面\" class=\"headerlink\" title=\"进入Oracle Enterprise Manager Database Express页面\"></a>进入Oracle Enterprise Manager Database Express页面</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;localhost:5500&#x2F;em</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>！注意输入网址是采用的是https，http无法访问。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>账号</th>\n<th>system/sys/等</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>密码</td>\n<td>123456</td>\n</tr>\n<tr>\n<td>容器名</td>\n<td>orclpdb1</td>\n</tr>\n</tbody></table>\n"},{"title":"Redis持久化","abbrlink":295621084,"_content":"\n- Redis是一种高级的key- value数据库。它所有的数据都保存在内存中，然后不定期的通过异步方式保存到磁盘上（这种称为“半持久化模式”），也可以把每一次的数据变化都写入到append only file（aof）里面（称为“全持久化模式”）。\n- 由于Redis的数据都放在内存中，如果没有配置持久化，redis重启后数据就全部丢失了，于是需要开启redis的持久化功能，将数据保存在磁盘上，当Redis重启后，可以从磁盘恢复数据。\n- Redis提供两种方式进行持久化：\n\n①是RDB持久化，原理是将Redis的数据记录定时备份到磁盘中；\n\n②是AOF持久化，原理是将Redis的操作日志以追加的方式写入文件。","source":"_posts/Technology/Redis/Redis持久化.md","raw":"---\ntitle: Redis持久化\ncategories:\n  - 技术开发\n  - 数据库\n  - Redis\nabbrlink: 295621084\n---\n\n- Redis是一种高级的key- value数据库。它所有的数据都保存在内存中，然后不定期的通过异步方式保存到磁盘上（这种称为“半持久化模式”），也可以把每一次的数据变化都写入到append only file（aof）里面（称为“全持久化模式”）。\n- 由于Redis的数据都放在内存中，如果没有配置持久化，redis重启后数据就全部丢失了，于是需要开启redis的持久化功能，将数据保存在磁盘上，当Redis重启后，可以从磁盘恢复数据。\n- Redis提供两种方式进行持久化：\n\n①是RDB持久化，原理是将Redis的数据记录定时备份到磁盘中；\n\n②是AOF持久化，原理是将Redis的操作日志以追加的方式写入文件。","slug":"Technology/Redis/Redis持久化","published":1,"date":"2021-04-16T13:51:53.953Z","updated":"2021-04-29T10:24:59.071Z","_id":"ckotdh5wf002qkw8zc4rr7bus","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>Redis是一种高级的key- value数据库。它所有的数据都保存在内存中，然后不定期的通过异步方式保存到磁盘上（这种称为“半持久化模式”），也可以把每一次的数据变化都写入到append only file（aof）里面（称为“全持久化模式”）。</li>\n<li>由于Redis的数据都放在内存中，如果没有配置持久化，redis重启后数据就全部丢失了，于是需要开启redis的持久化功能，将数据保存在磁盘上，当Redis重启后，可以从磁盘恢复数据。</li>\n<li>Redis提供两种方式进行持久化：</li>\n</ul>\n<p>①是RDB持久化，原理是将Redis的数据记录定时备份到磁盘中；</p>\n<p>②是AOF持久化，原理是将Redis的操作日志以追加的方式写入文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Redis是一种高级的key- value数据库。它所有的数据都保存在内存中，然后不定期的通过异步方式保存到磁盘上（这种称为“半持久化模式”），也可以把每一次的数据变化都写入到append only file（aof）里面（称为“全持久化模式”）。</li>\n<li>由于Redis的数据都放在内存中，如果没有配置持久化，redis重启后数据就全部丢失了，于是需要开启redis的持久化功能，将数据保存在磁盘上，当Redis重启后，可以从磁盘恢复数据。</li>\n<li>Redis提供两种方式进行持久化：</li>\n</ul>\n<p>①是RDB持久化，原理是将Redis的数据记录定时备份到磁盘中；</p>\n<p>②是AOF持久化，原理是将Redis的操作日志以追加的方式写入文件。</p>\n"},{"title":"Redis数据类型比较和使用场景","abbrlink":1349846639,"_content":"\n> Redis 支持五种数据类型：\n>\n> string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合）\n\n#### 字符串（String）\n\n`string` 是 **redis** 最基本的类型，可以理解为和 **memcache** 一模一样的类型，key->value 结构\n\nstring 类型是二进制安全的。意思是 redis 的 `string` 可以包含任何数据。比如 jpg 图片或者序列化的对象。\n\n`string` 类型是 redis 最基本的数据类型，`string` 类型的值最大能存储 512MB\n\n**应用场景：**\n\n- 手机验证码存储，过期时间失效\n- 缓存功能\n- 计数器\n- `bitmap` 位图：可广泛用于，签到、活跃、打卡等场景统计\n- 分布式锁\n\n\n\n#### 哈希（Hash）\n\nRedis `hash` 是一个键值对（`key->value`）集合，是一个 `string` 类型的 `field` 和 `value` 的映射表，`hash` 特别适合用于存储对象。\n\n每个 `hash` 可以存储 `232-1` 键值对（40多亿）。\n\n**应用场景：**\n\n- 存储一个用户信息对象数据，比如用户的昵称、年龄、性别、积分等\n- 购物车数据\n\n\n\n#### 列表（List）\n\nRedis  `List` 是一个双向链表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）。\n\n**应用场景：**\n\n- List 类型经常会被用于消息队列的服务，以完成多程序之间的消息交换\n- 各种列表，比如：关注列表、粉丝列表、最新消息排行、每篇文章的评论\n- 利用 `lrange` 可以很方便的实现 `list` 内容分页的功能\n\n\n\n#### 集合（Set）\n\nRedis 的 `set` 是 `string` 类型的无序集合。集合中的元素没有先后顺序，不重复。将重复的元素放入 `Set` 会自动去重。\n\n和列表一样，在执行插入、删除、判断是否存在某元素时，效率比较高。集合最大的优势在于可以进行交集、并集、差集 操作。\n\n`set` 可包含的最大元素数量是 `4294967295`。\n\n集合是通过哈希表实现的，所以添加、删除、查找的复杂度都是 `O（1）`。\n\n**应用场景：**\n\n- 利用交集求共同好友\n- 利用唯一性，可以统计访问网站的所有独立IP、需要去重列表场景\n- 好友推荐的时候可以根据 `tag` 求交集，大于某个临界值就可以推荐，集合最大的成员数为 232 - 1（4294967295，每个集合可存储40多亿个成员）\n\n\n\n#### 有序集合（zset）\n\nRedis `zset` 和 `set` 一样也是 `string` 类型元素的集合，且不允许重复的成员。\n\n不同的是每个元素都会关联一个 `double` 类型的分数。Redis 正是通过分数来为集合中的成员进行从小到大的排序。\n\n`zset`  的成员是惟一的，但分数 `score` 却可以重复。\n\n`sorted`、 `set` 是插入有序的，即自动排序。\n\n**应用场景：**\n\n当你需要一个有序的并且不重复的集合列表是，那么可以选择 `sorted` 、`set` 数据结构。\n\n**应用举例：**\n\n- 例如存储全班同学的成绩，其集合 `value` 可以是同学的学号，而 `score` 就可以是成绩\n- 排行榜应用，更具得分列出 **topN** 的用户\n- 不重复的集合列表\n- 过期淘汰场景","source":"_posts/Technology/Redis/Redis数据类型比较和使用场景.md","raw":"---\ntitle: Redis数据类型比较和使用场景\ncategories:\n  - 技术开发\n  - 数据库\n  - Redis\nabbrlink: 1349846639\n---\n\n> Redis 支持五种数据类型：\n>\n> string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合）\n\n#### 字符串（String）\n\n`string` 是 **redis** 最基本的类型，可以理解为和 **memcache** 一模一样的类型，key->value 结构\n\nstring 类型是二进制安全的。意思是 redis 的 `string` 可以包含任何数据。比如 jpg 图片或者序列化的对象。\n\n`string` 类型是 redis 最基本的数据类型，`string` 类型的值最大能存储 512MB\n\n**应用场景：**\n\n- 手机验证码存储，过期时间失效\n- 缓存功能\n- 计数器\n- `bitmap` 位图：可广泛用于，签到、活跃、打卡等场景统计\n- 分布式锁\n\n\n\n#### 哈希（Hash）\n\nRedis `hash` 是一个键值对（`key->value`）集合，是一个 `string` 类型的 `field` 和 `value` 的映射表，`hash` 特别适合用于存储对象。\n\n每个 `hash` 可以存储 `232-1` 键值对（40多亿）。\n\n**应用场景：**\n\n- 存储一个用户信息对象数据，比如用户的昵称、年龄、性别、积分等\n- 购物车数据\n\n\n\n#### 列表（List）\n\nRedis  `List` 是一个双向链表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）。\n\n**应用场景：**\n\n- List 类型经常会被用于消息队列的服务，以完成多程序之间的消息交换\n- 各种列表，比如：关注列表、粉丝列表、最新消息排行、每篇文章的评论\n- 利用 `lrange` 可以很方便的实现 `list` 内容分页的功能\n\n\n\n#### 集合（Set）\n\nRedis 的 `set` 是 `string` 类型的无序集合。集合中的元素没有先后顺序，不重复。将重复的元素放入 `Set` 会自动去重。\n\n和列表一样，在执行插入、删除、判断是否存在某元素时，效率比较高。集合最大的优势在于可以进行交集、并集、差集 操作。\n\n`set` 可包含的最大元素数量是 `4294967295`。\n\n集合是通过哈希表实现的，所以添加、删除、查找的复杂度都是 `O（1）`。\n\n**应用场景：**\n\n- 利用交集求共同好友\n- 利用唯一性，可以统计访问网站的所有独立IP、需要去重列表场景\n- 好友推荐的时候可以根据 `tag` 求交集，大于某个临界值就可以推荐，集合最大的成员数为 232 - 1（4294967295，每个集合可存储40多亿个成员）\n\n\n\n#### 有序集合（zset）\n\nRedis `zset` 和 `set` 一样也是 `string` 类型元素的集合，且不允许重复的成员。\n\n不同的是每个元素都会关联一个 `double` 类型的分数。Redis 正是通过分数来为集合中的成员进行从小到大的排序。\n\n`zset`  的成员是惟一的，但分数 `score` 却可以重复。\n\n`sorted`、 `set` 是插入有序的，即自动排序。\n\n**应用场景：**\n\n当你需要一个有序的并且不重复的集合列表是，那么可以选择 `sorted` 、`set` 数据结构。\n\n**应用举例：**\n\n- 例如存储全班同学的成绩，其集合 `value` 可以是同学的学号，而 `score` 就可以是成绩\n- 排行榜应用，更具得分列出 **topN** 的用户\n- 不重复的集合列表\n- 过期淘汰场景","slug":"Technology/Redis/Redis数据类型比较和使用场景","published":1,"date":"2021-04-16T13:51:53.940Z","updated":"2021-04-29T10:24:59.074Z","_id":"ckotdh5wg002rkw8z95y6dnxw","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Redis 支持五种数据类型：</p>\n<p>string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合）</p>\n</blockquote>\n<h4 id=\"字符串（String）\"><a href=\"#字符串（String）\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h4><p><code>string</code> 是 <strong>redis</strong> 最基本的类型，可以理解为和 <strong>memcache</strong> 一模一样的类型，key-&gt;value 结构</p>\n<p>string 类型是二进制安全的。意思是 redis 的 <code>string</code> 可以包含任何数据。比如 jpg 图片或者序列化的对象。</p>\n<p><code>string</code> 类型是 redis 最基本的数据类型，<code>string</code> 类型的值最大能存储 512MB</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>手机验证码存储，过期时间失效</li>\n<li>缓存功能</li>\n<li>计数器</li>\n<li><code>bitmap</code> 位图：可广泛用于，签到、活跃、打卡等场景统计</li>\n<li>分布式锁</li>\n</ul>\n<h4 id=\"哈希（Hash）\"><a href=\"#哈希（Hash）\" class=\"headerlink\" title=\"哈希（Hash）\"></a>哈希（Hash）</h4><p>Redis <code>hash</code> 是一个键值对（<code>key-&gt;value</code>）集合，是一个 <code>string</code> 类型的 <code>field</code> 和 <code>value</code> 的映射表，<code>hash</code> 特别适合用于存储对象。</p>\n<p>每个 <code>hash</code> 可以存储 <code>232-1</code> 键值对（40多亿）。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>存储一个用户信息对象数据，比如用户的昵称、年龄、性别、积分等</li>\n<li>购物车数据</li>\n</ul>\n<h4 id=\"列表（List）\"><a href=\"#列表（List）\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h4><p>Redis  <code>List</code> 是一个双向链表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>List 类型经常会被用于消息队列的服务，以完成多程序之间的消息交换</li>\n<li>各种列表，比如：关注列表、粉丝列表、最新消息排行、每篇文章的评论</li>\n<li>利用 <code>lrange</code> 可以很方便的实现 <code>list</code> 内容分页的功能</li>\n</ul>\n<h4 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h4><p>Redis 的 <code>set</code> 是 <code>string</code> 类型的无序集合。集合中的元素没有先后顺序，不重复。将重复的元素放入 <code>Set</code> 会自动去重。</p>\n<p>和列表一样，在执行插入、删除、判断是否存在某元素时，效率比较高。集合最大的优势在于可以进行交集、并集、差集 操作。</p>\n<p><code>set</code> 可包含的最大元素数量是 <code>4294967295</code>。</p>\n<p>集合是通过哈希表实现的，所以添加、删除、查找的复杂度都是 <code>O（1）</code>。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>利用交集求共同好友</li>\n<li>利用唯一性，可以统计访问网站的所有独立IP、需要去重列表场景</li>\n<li>好友推荐的时候可以根据 <code>tag</code> 求交集，大于某个临界值就可以推荐，集合最大的成员数为 232 - 1（4294967295，每个集合可存储40多亿个成员）</li>\n</ul>\n<h4 id=\"有序集合（zset）\"><a href=\"#有序集合（zset）\" class=\"headerlink\" title=\"有序集合（zset）\"></a>有序集合（zset）</h4><p>Redis <code>zset</code> 和 <code>set</code> 一样也是 <code>string</code> 类型元素的集合，且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个 <code>double</code> 类型的分数。Redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p><code>zset</code>  的成员是惟一的，但分数 <code>score</code> 却可以重复。</p>\n<p><code>sorted</code>、 <code>set</code> 是插入有序的，即自动排序。</p>\n<p><strong>应用场景：</strong></p>\n<p>当你需要一个有序的并且不重复的集合列表是，那么可以选择 <code>sorted</code> 、<code>set</code> 数据结构。</p>\n<p><strong>应用举例：</strong></p>\n<ul>\n<li>例如存储全班同学的成绩，其集合 <code>value</code> 可以是同学的学号，而 <code>score</code> 就可以是成绩</li>\n<li>排行榜应用，更具得分列出 <strong>topN</strong> 的用户</li>\n<li>不重复的集合列表</li>\n<li>过期淘汰场景</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Redis 支持五种数据类型：</p>\n<p>string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合）</p>\n</blockquote>\n<h4 id=\"字符串（String）\"><a href=\"#字符串（String）\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h4><p><code>string</code> 是 <strong>redis</strong> 最基本的类型，可以理解为和 <strong>memcache</strong> 一模一样的类型，key-&gt;value 结构</p>\n<p>string 类型是二进制安全的。意思是 redis 的 <code>string</code> 可以包含任何数据。比如 jpg 图片或者序列化的对象。</p>\n<p><code>string</code> 类型是 redis 最基本的数据类型，<code>string</code> 类型的值最大能存储 512MB</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>手机验证码存储，过期时间失效</li>\n<li>缓存功能</li>\n<li>计数器</li>\n<li><code>bitmap</code> 位图：可广泛用于，签到、活跃、打卡等场景统计</li>\n<li>分布式锁</li>\n</ul>\n<h4 id=\"哈希（Hash）\"><a href=\"#哈希（Hash）\" class=\"headerlink\" title=\"哈希（Hash）\"></a>哈希（Hash）</h4><p>Redis <code>hash</code> 是一个键值对（<code>key-&gt;value</code>）集合，是一个 <code>string</code> 类型的 <code>field</code> 和 <code>value</code> 的映射表，<code>hash</code> 特别适合用于存储对象。</p>\n<p>每个 <code>hash</code> 可以存储 <code>232-1</code> 键值对（40多亿）。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>存储一个用户信息对象数据，比如用户的昵称、年龄、性别、积分等</li>\n<li>购物车数据</li>\n</ul>\n<h4 id=\"列表（List）\"><a href=\"#列表（List）\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h4><p>Redis  <code>List</code> 是一个双向链表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>List 类型经常会被用于消息队列的服务，以完成多程序之间的消息交换</li>\n<li>各种列表，比如：关注列表、粉丝列表、最新消息排行、每篇文章的评论</li>\n<li>利用 <code>lrange</code> 可以很方便的实现 <code>list</code> 内容分页的功能</li>\n</ul>\n<h4 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h4><p>Redis 的 <code>set</code> 是 <code>string</code> 类型的无序集合。集合中的元素没有先后顺序，不重复。将重复的元素放入 <code>Set</code> 会自动去重。</p>\n<p>和列表一样，在执行插入、删除、判断是否存在某元素时，效率比较高。集合最大的优势在于可以进行交集、并集、差集 操作。</p>\n<p><code>set</code> 可包含的最大元素数量是 <code>4294967295</code>。</p>\n<p>集合是通过哈希表实现的，所以添加、删除、查找的复杂度都是 <code>O（1）</code>。</p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>利用交集求共同好友</li>\n<li>利用唯一性，可以统计访问网站的所有独立IP、需要去重列表场景</li>\n<li>好友推荐的时候可以根据 <code>tag</code> 求交集，大于某个临界值就可以推荐，集合最大的成员数为 232 - 1（4294967295，每个集合可存储40多亿个成员）</li>\n</ul>\n<h4 id=\"有序集合（zset）\"><a href=\"#有序集合（zset）\" class=\"headerlink\" title=\"有序集合（zset）\"></a>有序集合（zset）</h4><p>Redis <code>zset</code> 和 <code>set</code> 一样也是 <code>string</code> 类型元素的集合，且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个 <code>double</code> 类型的分数。Redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p><code>zset</code>  的成员是惟一的，但分数 <code>score</code> 却可以重复。</p>\n<p><code>sorted</code>、 <code>set</code> 是插入有序的，即自动排序。</p>\n<p><strong>应用场景：</strong></p>\n<p>当你需要一个有序的并且不重复的集合列表是，那么可以选择 <code>sorted</code> 、<code>set</code> 数据结构。</p>\n<p><strong>应用举例：</strong></p>\n<ul>\n<li>例如存储全班同学的成绩，其集合 <code>value</code> 可以是同学的学号，而 <code>score</code> 就可以是成绩</li>\n<li>排行榜应用，更具得分列出 <strong>topN</strong> 的用户</li>\n<li>不重复的集合列表</li>\n<li>过期淘汰场景</li>\n</ul>\n"},{"title":"Redis设置密码","abbrlink":1685059487,"_content":"\nRedis 没有实现访问控制这个功能，但是它提供了一个轻量级的认证方式，可以编辑 `redis.conf` 配置来启用认证。\n\n###    1、初始化Redis密码\n\n   在配置文件中有个参数： requirepass  这个就是配置 Redis 访问密码的参数，需重启 Redis 才能生效）\n\n```shell\n requirepass 密码\n```\n\nRedis 的查询速度是非常快的，外部用户一秒内可以尝试多大150K个密码，所以密码要尽量长（对于DBA 没有必要必须记住密码）；\n\n###    2、不重启Redis设置密码\n\n   在配置文件中配置 requirepass 的密码（当 Redis 重启时密码依然有效）\n\n```shell\n redis 127.0.0.1:6379> config set requirepass 密码\n```\n\n####    查询密码\n\n```shell\n   redis 127.0.0.1:6379> config get requirepass\n   (error) ERR operation not permitted\n```\n\n####    密码验证\n\n```shell\n   redis 127.0.0.1:6379> auth 密码\n   OK\n```\n\n####    再次查询\n\n```shell\n   redis 127.0.0.1:6379> config get requirepass\n   1) \"requirepass\"\n   2) \"test123\"\n```\n\n>    PS：如果配置文件中没添加密码 那么 Redis 重启后，密码失效。\n\n###    3、登陆有密码的 Redis：\n\n####    在登录的时候的时候输入密码\n\n```shell\nredis-cli -p 6379 -a test123\n```\n\n####    先登陆后验证  \n\n```shell\n redis-cli -p 6379\n redis 127.0.0.1:6379> auth test123\n OK\n```\n\n\n\n> AUTH 命令跟其他redis命令一样，是没有加密的；阻止不了攻击者在网络上窃取你的密码。 \n>\n> 认证层的目标是提供多一层的保护。如果防火墙或者用来保护redis的系统防御外部攻击失败的话，外部用户如果没有通过密码认证还是无法访问 Redis 的。\n\n\n\n参考资料：\n\nhttps://blog.51cto.com/weipengfei/1217872\n\n\n\n\n\n**<u>[<<点击返回主页](https://liudandandear.gitee.io)</u>**","source":"_posts/Technology/Redis/Redis设置密码.md","raw":"---\ntitle: Redis设置密码\ncategories:\n  - 技术开发\n  - 数据库\n  - Redis\nabbrlink: 1685059487\n---\n\nRedis 没有实现访问控制这个功能，但是它提供了一个轻量级的认证方式，可以编辑 `redis.conf` 配置来启用认证。\n\n###    1、初始化Redis密码\n\n   在配置文件中有个参数： requirepass  这个就是配置 Redis 访问密码的参数，需重启 Redis 才能生效）\n\n```shell\n requirepass 密码\n```\n\nRedis 的查询速度是非常快的，外部用户一秒内可以尝试多大150K个密码，所以密码要尽量长（对于DBA 没有必要必须记住密码）；\n\n###    2、不重启Redis设置密码\n\n   在配置文件中配置 requirepass 的密码（当 Redis 重启时密码依然有效）\n\n```shell\n redis 127.0.0.1:6379> config set requirepass 密码\n```\n\n####    查询密码\n\n```shell\n   redis 127.0.0.1:6379> config get requirepass\n   (error) ERR operation not permitted\n```\n\n####    密码验证\n\n```shell\n   redis 127.0.0.1:6379> auth 密码\n   OK\n```\n\n####    再次查询\n\n```shell\n   redis 127.0.0.1:6379> config get requirepass\n   1) \"requirepass\"\n   2) \"test123\"\n```\n\n>    PS：如果配置文件中没添加密码 那么 Redis 重启后，密码失效。\n\n###    3、登陆有密码的 Redis：\n\n####    在登录的时候的时候输入密码\n\n```shell\nredis-cli -p 6379 -a test123\n```\n\n####    先登陆后验证  \n\n```shell\n redis-cli -p 6379\n redis 127.0.0.1:6379> auth test123\n OK\n```\n\n\n\n> AUTH 命令跟其他redis命令一样，是没有加密的；阻止不了攻击者在网络上窃取你的密码。 \n>\n> 认证层的目标是提供多一层的保护。如果防火墙或者用来保护redis的系统防御外部攻击失败的话，外部用户如果没有通过密码认证还是无法访问 Redis 的。\n\n\n\n参考资料：\n\nhttps://blog.51cto.com/weipengfei/1217872\n\n\n\n\n\n**<u>[<<点击返回主页](https://liudandandear.gitee.io)</u>**","slug":"Technology/Redis/Redis设置密码","published":1,"date":"2021-04-16T13:51:53.927Z","updated":"2021-04-29T10:24:59.075Z","_id":"ckotdh5wh002tkw8z4rwfa9kr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Redis 没有实现访问控制这个功能，但是它提供了一个轻量级的认证方式，可以编辑 <code>redis.conf</code> 配置来启用认证。</p>\n<h3 id=\"1、初始化Redis密码\"><a href=\"#1、初始化Redis密码\" class=\"headerlink\" title=\"1、初始化Redis密码\"></a>1、初始化Redis密码</h3><p>   在配置文件中有个参数： requirepass  这个就是配置 Redis 访问密码的参数，需重启 Redis 才能生效）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requirepass 密码</span><br></pre></td></tr></table></figure>\n\n<p>Redis 的查询速度是非常快的，外部用户一秒内可以尝试多大150K个密码，所以密码要尽量长（对于DBA 没有必要必须记住密码）；</p>\n<h3 id=\"2、不重启Redis设置密码\"><a href=\"#2、不重启Redis设置密码\" class=\"headerlink\" title=\"2、不重启Redis设置密码\"></a>2、不重启Redis设置密码</h3><p>   在配置文件中配置 requirepass 的密码（当 Redis 重启时密码依然有效）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; config set requirepass 密码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询密码\"><a href=\"#查询密码\" class=\"headerlink\" title=\"查询密码\"></a>查询密码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; config get requirepass</span><br><span class=\"line\">(error) ERR operation not permitted</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"密码验证\"><a href=\"#密码验证\" class=\"headerlink\" title=\"密码验证\"></a>密码验证</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; auth 密码</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再次查询\"><a href=\"#再次查询\" class=\"headerlink\" title=\"再次查询\"></a>再次查询</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; config get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;test123&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>   PS：如果配置文件中没添加密码 那么 Redis 重启后，密码失效。</p>\n</blockquote>\n<h3 id=\"3、登陆有密码的-Redis：\"><a href=\"#3、登陆有密码的-Redis：\" class=\"headerlink\" title=\"3、登陆有密码的 Redis：\"></a>3、登陆有密码的 Redis：</h3><h4 id=\"在登录的时候的时候输入密码\"><a href=\"#在登录的时候的时候输入密码\" class=\"headerlink\" title=\"在登录的时候的时候输入密码\"></a>在登录的时候的时候输入密码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6379 -a test123</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"先登陆后验证\"><a href=\"#先登陆后验证\" class=\"headerlink\" title=\"先登陆后验证\"></a>先登陆后验证</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6379</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; auth test123</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>AUTH 命令跟其他redis命令一样，是没有加密的；阻止不了攻击者在网络上窃取你的密码。 </p>\n<p>认证层的目标是提供多一层的保护。如果防火墙或者用来保护redis的系统防御外部攻击失败的话，外部用户如果没有通过密码认证还是无法访问 Redis 的。</p>\n</blockquote>\n<p>参考资料：</p>\n<p><a href=\"https://blog.51cto.com/weipengfei/1217872\">https://blog.51cto.com/weipengfei/1217872</a></p>\n<p><strong><u><a href=\"https://liudandandear.gitee.io/\">&lt;&lt;点击返回主页</a></u></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Redis 没有实现访问控制这个功能，但是它提供了一个轻量级的认证方式，可以编辑 <code>redis.conf</code> 配置来启用认证。</p>\n<h3 id=\"1、初始化Redis密码\"><a href=\"#1、初始化Redis密码\" class=\"headerlink\" title=\"1、初始化Redis密码\"></a>1、初始化Redis密码</h3><p>   在配置文件中有个参数： requirepass  这个就是配置 Redis 访问密码的参数，需重启 Redis 才能生效）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requirepass 密码</span><br></pre></td></tr></table></figure>\n\n<p>Redis 的查询速度是非常快的，外部用户一秒内可以尝试多大150K个密码，所以密码要尽量长（对于DBA 没有必要必须记住密码）；</p>\n<h3 id=\"2、不重启Redis设置密码\"><a href=\"#2、不重启Redis设置密码\" class=\"headerlink\" title=\"2、不重启Redis设置密码\"></a>2、不重启Redis设置密码</h3><p>   在配置文件中配置 requirepass 的密码（当 Redis 重启时密码依然有效）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; config set requirepass 密码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询密码\"><a href=\"#查询密码\" class=\"headerlink\" title=\"查询密码\"></a>查询密码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; config get requirepass</span><br><span class=\"line\">(error) ERR operation not permitted</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"密码验证\"><a href=\"#密码验证\" class=\"headerlink\" title=\"密码验证\"></a>密码验证</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; auth 密码</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再次查询\"><a href=\"#再次查询\" class=\"headerlink\" title=\"再次查询\"></a>再次查询</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; config get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;test123&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>   PS：如果配置文件中没添加密码 那么 Redis 重启后，密码失效。</p>\n</blockquote>\n<h3 id=\"3、登陆有密码的-Redis：\"><a href=\"#3、登陆有密码的-Redis：\" class=\"headerlink\" title=\"3、登陆有密码的 Redis：\"></a>3、登陆有密码的 Redis：</h3><h4 id=\"在登录的时候的时候输入密码\"><a href=\"#在登录的时候的时候输入密码\" class=\"headerlink\" title=\"在登录的时候的时候输入密码\"></a>在登录的时候的时候输入密码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6379 -a test123</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"先登陆后验证\"><a href=\"#先登陆后验证\" class=\"headerlink\" title=\"先登陆后验证\"></a>先登陆后验证</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6379</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; auth test123</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>AUTH 命令跟其他redis命令一样，是没有加密的；阻止不了攻击者在网络上窃取你的密码。 </p>\n<p>认证层的目标是提供多一层的保护。如果防火墙或者用来保护redis的系统防御外部攻击失败的话，外部用户如果没有通过密码认证还是无法访问 Redis 的。</p>\n</blockquote>\n<p>参考资料：</p>\n<p><a href=\"https://blog.51cto.com/weipengfei/1217872\">https://blog.51cto.com/weipengfei/1217872</a></p>\n<p><strong><u><a href=\"https://liudandandear.gitee.io/\">&lt;&lt;点击返回主页</a></u></strong></p>\n"},{"title":"了解Memcache","abbrlink":2253204330,"_content":"\n## memcache 概述\nmemcache 就是一个数据库，但是数据存在内存中。常用来做缓存服务器、将数据库查询的数据缓存起来，减少数据库缓存、加快查询速度。\nmemcache 的数据仅保存在内存中，服务器重启后，数据将会丢失。\n\n## memcache 使用场景\n缓存服务器\n\n## 适合存储的数据\n- 访问比较频繁的数据，安全性较差的数据，丢失无所谓的数据\n- 数据更新比较频繁的数据，比如用户的在线状态\n- 数据的单个键值不能太大，不能超过 1Mb 数据\n\n## memcache 可以存储的数据类型\n整型、浮点型、布尔型、字符串型、数组型、对象类型、空类型\n\n## memcache 相关算法\n\n1、惰性过期机制\n\n说明：memcached 内部不会监视记录是否过期，而是在 get 时查看记录的时间戳，检查记录是否过期，这种技术被称为惰性过期。\n\n好处：减少监控过期产生的开销\n\n2、最近最少使用算法\n\n缓存空间已满，将使用频率最低数据进行删除。\n\n## memcache 常见问题\n\n### 1、缓存雪崩\n\n场景：项目缓存同一时间失效\n\n问题：瞬间几万次、几千万次的同时访问数据库，数据库崩溃。\n\n解决：\n\n①不要集中设置缓存有效期\n\n②控制缓存在闲时过期\n\n③主从复制、读写分离\n\n### 2、永久数据被踢\n\n原因：因为惰性过期机制和最少使用机制导致\n\n解决：永久数据和飞=非永久数据分开存放\n\n​                                                                                                                                               ","source":"_posts/Technology/Redis/了解Memcache.md","raw":"---\ntitle: 了解Memcache\ncategories:\n  - 技术开发\n  - 数据库\n  - Memcache\nabbrlink: 2253204330\n---\n\n## memcache 概述\nmemcache 就是一个数据库，但是数据存在内存中。常用来做缓存服务器、将数据库查询的数据缓存起来，减少数据库缓存、加快查询速度。\nmemcache 的数据仅保存在内存中，服务器重启后，数据将会丢失。\n\n## memcache 使用场景\n缓存服务器\n\n## 适合存储的数据\n- 访问比较频繁的数据，安全性较差的数据，丢失无所谓的数据\n- 数据更新比较频繁的数据，比如用户的在线状态\n- 数据的单个键值不能太大，不能超过 1Mb 数据\n\n## memcache 可以存储的数据类型\n整型、浮点型、布尔型、字符串型、数组型、对象类型、空类型\n\n## memcache 相关算法\n\n1、惰性过期机制\n\n说明：memcached 内部不会监视记录是否过期，而是在 get 时查看记录的时间戳，检查记录是否过期，这种技术被称为惰性过期。\n\n好处：减少监控过期产生的开销\n\n2、最近最少使用算法\n\n缓存空间已满，将使用频率最低数据进行删除。\n\n## memcache 常见问题\n\n### 1、缓存雪崩\n\n场景：项目缓存同一时间失效\n\n问题：瞬间几万次、几千万次的同时访问数据库，数据库崩溃。\n\n解决：\n\n①不要集中设置缓存有效期\n\n②控制缓存在闲时过期\n\n③主从复制、读写分离\n\n### 2、永久数据被踢\n\n原因：因为惰性过期机制和最少使用机制导致\n\n解决：永久数据和飞=非永久数据分开存放\n\n​                                                                                                                                               ","slug":"Technology/Redis/了解Memcache","published":1,"date":"2021-04-16T13:51:53.945Z","updated":"2021-04-29T10:24:59.080Z","_id":"ckotdh5wi002ukw8z4g60d7o5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"memcache-概述\"><a href=\"#memcache-概述\" class=\"headerlink\" title=\"memcache 概述\"></a>memcache 概述</h2><p>memcache 就是一个数据库，但是数据存在内存中。常用来做缓存服务器、将数据库查询的数据缓存起来，减少数据库缓存、加快查询速度。<br>memcache 的数据仅保存在内存中，服务器重启后，数据将会丢失。</p>\n<h2 id=\"memcache-使用场景\"><a href=\"#memcache-使用场景\" class=\"headerlink\" title=\"memcache 使用场景\"></a>memcache 使用场景</h2><p>缓存服务器</p>\n<h2 id=\"适合存储的数据\"><a href=\"#适合存储的数据\" class=\"headerlink\" title=\"适合存储的数据\"></a>适合存储的数据</h2><ul>\n<li>访问比较频繁的数据，安全性较差的数据，丢失无所谓的数据</li>\n<li>数据更新比较频繁的数据，比如用户的在线状态</li>\n<li>数据的单个键值不能太大，不能超过 1Mb 数据</li>\n</ul>\n<h2 id=\"memcache-可以存储的数据类型\"><a href=\"#memcache-可以存储的数据类型\" class=\"headerlink\" title=\"memcache 可以存储的数据类型\"></a>memcache 可以存储的数据类型</h2><p>整型、浮点型、布尔型、字符串型、数组型、对象类型、空类型</p>\n<h2 id=\"memcache-相关算法\"><a href=\"#memcache-相关算法\" class=\"headerlink\" title=\"memcache 相关算法\"></a>memcache 相关算法</h2><p>1、惰性过期机制</p>\n<p>说明：memcached 内部不会监视记录是否过期，而是在 get 时查看记录的时间戳，检查记录是否过期，这种技术被称为惰性过期。</p>\n<p>好处：减少监控过期产生的开销</p>\n<p>2、最近最少使用算法</p>\n<p>缓存空间已满，将使用频率最低数据进行删除。</p>\n<h2 id=\"memcache-常见问题\"><a href=\"#memcache-常见问题\" class=\"headerlink\" title=\"memcache 常见问题\"></a>memcache 常见问题</h2><h3 id=\"1、缓存雪崩\"><a href=\"#1、缓存雪崩\" class=\"headerlink\" title=\"1、缓存雪崩\"></a>1、缓存雪崩</h3><p>场景：项目缓存同一时间失效</p>\n<p>问题：瞬间几万次、几千万次的同时访问数据库，数据库崩溃。</p>\n<p>解决：</p>\n<p>①不要集中设置缓存有效期</p>\n<p>②控制缓存在闲时过期</p>\n<p>③主从复制、读写分离</p>\n<h3 id=\"2、永久数据被踢\"><a href=\"#2、永久数据被踢\" class=\"headerlink\" title=\"2、永久数据被踢\"></a>2、永久数据被踢</h3><p>原因：因为惰性过期机制和最少使用机制导致</p>\n<p>解决：永久数据和飞=非永久数据分开存放</p>\n<p>​                                                                                                                                               </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"memcache-概述\"><a href=\"#memcache-概述\" class=\"headerlink\" title=\"memcache 概述\"></a>memcache 概述</h2><p>memcache 就是一个数据库，但是数据存在内存中。常用来做缓存服务器、将数据库查询的数据缓存起来，减少数据库缓存、加快查询速度。<br>memcache 的数据仅保存在内存中，服务器重启后，数据将会丢失。</p>\n<h2 id=\"memcache-使用场景\"><a href=\"#memcache-使用场景\" class=\"headerlink\" title=\"memcache 使用场景\"></a>memcache 使用场景</h2><p>缓存服务器</p>\n<h2 id=\"适合存储的数据\"><a href=\"#适合存储的数据\" class=\"headerlink\" title=\"适合存储的数据\"></a>适合存储的数据</h2><ul>\n<li>访问比较频繁的数据，安全性较差的数据，丢失无所谓的数据</li>\n<li>数据更新比较频繁的数据，比如用户的在线状态</li>\n<li>数据的单个键值不能太大，不能超过 1Mb 数据</li>\n</ul>\n<h2 id=\"memcache-可以存储的数据类型\"><a href=\"#memcache-可以存储的数据类型\" class=\"headerlink\" title=\"memcache 可以存储的数据类型\"></a>memcache 可以存储的数据类型</h2><p>整型、浮点型、布尔型、字符串型、数组型、对象类型、空类型</p>\n<h2 id=\"memcache-相关算法\"><a href=\"#memcache-相关算法\" class=\"headerlink\" title=\"memcache 相关算法\"></a>memcache 相关算法</h2><p>1、惰性过期机制</p>\n<p>说明：memcached 内部不会监视记录是否过期，而是在 get 时查看记录的时间戳，检查记录是否过期，这种技术被称为惰性过期。</p>\n<p>好处：减少监控过期产生的开销</p>\n<p>2、最近最少使用算法</p>\n<p>缓存空间已满，将使用频率最低数据进行删除。</p>\n<h2 id=\"memcache-常见问题\"><a href=\"#memcache-常见问题\" class=\"headerlink\" title=\"memcache 常见问题\"></a>memcache 常见问题</h2><h3 id=\"1、缓存雪崩\"><a href=\"#1、缓存雪崩\" class=\"headerlink\" title=\"1、缓存雪崩\"></a>1、缓存雪崩</h3><p>场景：项目缓存同一时间失效</p>\n<p>问题：瞬间几万次、几千万次的同时访问数据库，数据库崩溃。</p>\n<p>解决：</p>\n<p>①不要集中设置缓存有效期</p>\n<p>②控制缓存在闲时过期</p>\n<p>③主从复制、读写分离</p>\n<h3 id=\"2、永久数据被踢\"><a href=\"#2、永久数据被踢\" class=\"headerlink\" title=\"2、永久数据被踢\"></a>2、永久数据被踢</h3><p>原因：因为惰性过期机制和最少使用机制导致</p>\n<p>解决：永久数据和飞=非永久数据分开存放</p>\n<p>​                                                                                                                                               </p>\n"},{"title":"了解Redis","abbrlink":1099414406,"_content":"\nRedis 是一个开源的内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如：\n\n字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）。\n\nRedis 内置了复制、LUA 脚本、LRU 驱动事件、事务和不同级别的磁盘持久化，并通过 **Redis哨兵** 和 **自动分区** 提供高可用性。\n\n## Redis 数据类型介绍\n\nRedis 并不是简单的 `key-value` 存储，实际上是一个数据结构服务器，支持不同类型的值。也就是说，你不必仅仅把字符串当做键所指向的值。\n\n## Redis 的值类型有：\n\n- 二进制安全的字符串\n- Lists：按插入顺序排序的字符串元素的集合，他们基本上都是链表（linked lists）\n- Sets：不重复且无序的字符串元素的集合\n- Sorted sets：类似 `Sets` ，但是每个字符串元素都关联到一个叫 `score` 浮动数值。里边的元素总是通过 `score` 进行排序，所以不同的是，它是可以检索的一系列元素。\n- Hashes：由 `field` 和关联的 `value` 组成的 `map`。\n- Bit arrays：通过特殊的命令，你可以将 `String` 值当做一系列 bits 处理：可以设置和清除单独的 bits，数出所有设为1 的bits 的数量，找到 最前的被设置为 1 或者0 的bit，等等。\n- HyperLogLogs：这是被用于估计一个 `set` 中元素数量的概率性的数据结构。\n\n\n\n## Redis 超时：数据在限定时间内存货（过期时间设定）\n\n在 `redis` 中可以对 `key` 设置一个超时时间，当这个时间达到后会被删除。精度可以使用毫秒或者秒。\n\n```shell\n// 对指定keys设置过期时间为60s\nexpire key 60\n// 在给key设置value的时候同时设置过期时间为60s\nset key value ex 60\n// 查询key还有多久过期\nttl key\n```","source":"_posts/Technology/Redis/了解Redis.md","raw":"---\ntitle: 了解Redis\ncategories:\n  - 技术开发\n  - 数据库\n  - Redis\nabbrlink: 1099414406\n---\n\nRedis 是一个开源的内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如：\n\n字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）。\n\nRedis 内置了复制、LUA 脚本、LRU 驱动事件、事务和不同级别的磁盘持久化，并通过 **Redis哨兵** 和 **自动分区** 提供高可用性。\n\n## Redis 数据类型介绍\n\nRedis 并不是简单的 `key-value` 存储，实际上是一个数据结构服务器，支持不同类型的值。也就是说，你不必仅仅把字符串当做键所指向的值。\n\n## Redis 的值类型有：\n\n- 二进制安全的字符串\n- Lists：按插入顺序排序的字符串元素的集合，他们基本上都是链表（linked lists）\n- Sets：不重复且无序的字符串元素的集合\n- Sorted sets：类似 `Sets` ，但是每个字符串元素都关联到一个叫 `score` 浮动数值。里边的元素总是通过 `score` 进行排序，所以不同的是，它是可以检索的一系列元素。\n- Hashes：由 `field` 和关联的 `value` 组成的 `map`。\n- Bit arrays：通过特殊的命令，你可以将 `String` 值当做一系列 bits 处理：可以设置和清除单独的 bits，数出所有设为1 的bits 的数量，找到 最前的被设置为 1 或者0 的bit，等等。\n- HyperLogLogs：这是被用于估计一个 `set` 中元素数量的概率性的数据结构。\n\n\n\n## Redis 超时：数据在限定时间内存货（过期时间设定）\n\n在 `redis` 中可以对 `key` 设置一个超时时间，当这个时间达到后会被删除。精度可以使用毫秒或者秒。\n\n```shell\n// 对指定keys设置过期时间为60s\nexpire key 60\n// 在给key设置value的时候同时设置过期时间为60s\nset key value ex 60\n// 查询key还有多久过期\nttl key\n```","slug":"Technology/Redis/了解Redis","published":1,"date":"2021-04-16T13:51:53.949Z","updated":"2021-04-29T10:24:59.078Z","_id":"ckotdh5wj002xkw8z90189kkz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Redis 是一个开源的内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如：</p>\n<p>字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）。</p>\n<p>Redis 内置了复制、LUA 脚本、LRU 驱动事件、事务和不同级别的磁盘持久化，并通过 <strong>Redis哨兵</strong> 和 <strong>自动分区</strong> 提供高可用性。</p>\n<h2 id=\"Redis-数据类型介绍\"><a href=\"#Redis-数据类型介绍\" class=\"headerlink\" title=\"Redis 数据类型介绍\"></a>Redis 数据类型介绍</h2><p>Redis 并不是简单的 <code>key-value</code> 存储，实际上是一个数据结构服务器，支持不同类型的值。也就是说，你不必仅仅把字符串当做键所指向的值。</p>\n<h2 id=\"Redis-的值类型有：\"><a href=\"#Redis-的值类型有：\" class=\"headerlink\" title=\"Redis 的值类型有：\"></a>Redis 的值类型有：</h2><ul>\n<li>二进制安全的字符串</li>\n<li>Lists：按插入顺序排序的字符串元素的集合，他们基本上都是链表（linked lists）</li>\n<li>Sets：不重复且无序的字符串元素的集合</li>\n<li>Sorted sets：类似 <code>Sets</code> ，但是每个字符串元素都关联到一个叫 <code>score</code> 浮动数值。里边的元素总是通过 <code>score</code> 进行排序，所以不同的是，它是可以检索的一系列元素。</li>\n<li>Hashes：由 <code>field</code> 和关联的 <code>value</code> 组成的 <code>map</code>。</li>\n<li>Bit arrays：通过特殊的命令，你可以将 <code>String</code> 值当做一系列 bits 处理：可以设置和清除单独的 bits，数出所有设为1 的bits 的数量，找到 最前的被设置为 1 或者0 的bit，等等。</li>\n<li>HyperLogLogs：这是被用于估计一个 <code>set</code> 中元素数量的概率性的数据结构。</li>\n</ul>\n<h2 id=\"Redis-超时：数据在限定时间内存货（过期时间设定）\"><a href=\"#Redis-超时：数据在限定时间内存货（过期时间设定）\" class=\"headerlink\" title=\"Redis 超时：数据在限定时间内存货（过期时间设定）\"></a>Redis 超时：数据在限定时间内存货（过期时间设定）</h2><p>在 <code>redis</code> 中可以对 <code>key</code> 设置一个超时时间，当这个时间达到后会被删除。精度可以使用毫秒或者秒。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对指定keys设置过期时间为60s</span><br><span class=\"line\">expire key 60</span><br><span class=\"line\">// 在给key设置value的时候同时设置过期时间为60s</span><br><span class=\"line\">set key value ex 60</span><br><span class=\"line\">// 查询key还有多久过期</span><br><span class=\"line\">ttl key</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Redis 是一个开源的内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如：</p>\n<p>字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）。</p>\n<p>Redis 内置了复制、LUA 脚本、LRU 驱动事件、事务和不同级别的磁盘持久化，并通过 <strong>Redis哨兵</strong> 和 <strong>自动分区</strong> 提供高可用性。</p>\n<h2 id=\"Redis-数据类型介绍\"><a href=\"#Redis-数据类型介绍\" class=\"headerlink\" title=\"Redis 数据类型介绍\"></a>Redis 数据类型介绍</h2><p>Redis 并不是简单的 <code>key-value</code> 存储，实际上是一个数据结构服务器，支持不同类型的值。也就是说，你不必仅仅把字符串当做键所指向的值。</p>\n<h2 id=\"Redis-的值类型有：\"><a href=\"#Redis-的值类型有：\" class=\"headerlink\" title=\"Redis 的值类型有：\"></a>Redis 的值类型有：</h2><ul>\n<li>二进制安全的字符串</li>\n<li>Lists：按插入顺序排序的字符串元素的集合，他们基本上都是链表（linked lists）</li>\n<li>Sets：不重复且无序的字符串元素的集合</li>\n<li>Sorted sets：类似 <code>Sets</code> ，但是每个字符串元素都关联到一个叫 <code>score</code> 浮动数值。里边的元素总是通过 <code>score</code> 进行排序，所以不同的是，它是可以检索的一系列元素。</li>\n<li>Hashes：由 <code>field</code> 和关联的 <code>value</code> 组成的 <code>map</code>。</li>\n<li>Bit arrays：通过特殊的命令，你可以将 <code>String</code> 值当做一系列 bits 处理：可以设置和清除单独的 bits，数出所有设为1 的bits 的数量，找到 最前的被设置为 1 或者0 的bit，等等。</li>\n<li>HyperLogLogs：这是被用于估计一个 <code>set</code> 中元素数量的概率性的数据结构。</li>\n</ul>\n<h2 id=\"Redis-超时：数据在限定时间内存货（过期时间设定）\"><a href=\"#Redis-超时：数据在限定时间内存货（过期时间设定）\" class=\"headerlink\" title=\"Redis 超时：数据在限定时间内存货（过期时间设定）\"></a>Redis 超时：数据在限定时间内存货（过期时间设定）</h2><p>在 <code>redis</code> 中可以对 <code>key</code> 设置一个超时时间，当这个时间达到后会被删除。精度可以使用毫秒或者秒。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对指定keys设置过期时间为60s</span><br><span class=\"line\">expire key 60</span><br><span class=\"line\">// 在给key设置value的时候同时设置过期时间为60s</span><br><span class=\"line\">set key value ex 60</span><br><span class=\"line\">// 查询key还有多久过期</span><br><span class=\"line\">ttl key</span><br></pre></td></tr></table></figure>"},{"title":"安装SSDB","abbrlink":1058490118,"_content":"\n## 什么是SSDB\n\n一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.\n\n## 特性\n\n- 替代 Redis 数据库, Redis 的 100 倍容量\n- LevelDB 网络支持, 使用 C/C++ 开发\n- Redis API 兼容, 支持 Redis 客户端\n- 适合存储集合数据, 如 list, hash, zset...\n- 客户端 API 支持的语言包括: [C++](http://ssdb.io/docs/cpp/), [PHP](http://ssdb.io/docs/zh_cn/php/), Python, [Java](http://ssdb.io/docs/java/), Go\n- 持久化的队列服务\n- **主从复制, 负载均衡**\n\n强烈推荐你把 SSDB 部署在 **Linux 操作系统**上.\n\n不要在生产环境中使用 Windows 操作系统来运行 SSDB 服务器. 如果你确实必须使用 Windows 操作系统, 请在上面运行一个 Linux 虚拟机, 然后再让 SSDB 运行于这个虚拟机之中.\n\n## 编译和安装\n\n```shell\nwget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip\nunzip master\ncd ssdb-master\nmake\n# 将安装在 /usr/local/ssdb 目录下\nsudo make install\n```\n\n如果你想安装 ssdb 在其它的目录, 不在 `/usr/local` 目录下, 可以这样\n\n```shell\nsudo make install PREFIX=/your/direcotry\n```\n\n## 问题解决\n\n如果出现如下错误:\n\n```shell\ng++ ...deps/snappy-1.1.0/.libs/libsnappy.a: No such file or directory\nmake[1]: *** [all] Error 1\n```\n\n或者\n\n```shell\ng++ ...deps/jemalloc-3.3.1/lib/libjemalloc.a: No such file or directory\nmake[1]: *** [all] Error 1\n```\n\n这是因为 Snappy 或者 Jemalloc 没有编译成功, 这一般是因为你的系统时钟有问题. 可以这样解决:\n\n```shell\ncd deps/snappy-1.1.0\nautoreconf --force --install\n./configure\nmake\n```\n\n或者\n\n```shell\ncd deps/jemalloc-3.3.1\nautoreconf --force --install\n./configure\nmake\n```\n\n## 启动和停止\n\n```shell\n# 启动主库, 此命令会阻塞住命令行\n./ssdb-server ssdb.conf\n\n# 或者启动为后台进程(不阻塞命令行)\n./ssdb-server -d ssdb.conf\n\n# 停止 ssdb-server\n./ssdb-server ssdb.conf -s stop\n# 对于旧版本\nkill `cat ./var/ssdb.pid`\n\n# 重启\n./ssdb-server ssdb.conf -s restart\n```\n\n到目前为止, 你需要手动管理 `ssdb-server` 进程, 如果你希望在操作系统启动和停止时自动地管理, 请按下面的说明进行.\n\n## SSDB 启动脚本(随操作系统自启动)\n\n假设你已经安装 SSDB 在默认的 `/usr/local/ssdb` 目录, 把 `tools/ssdb.sh` 脚本放到 `/etc/init.d` 目录下.\n\n注意: 对于 CentOS 用户, 请将 `ssdb.sh` 重命名为 `ssdb`.\n\n编辑下面的内容:\n\n```shell\n# each config file for one instance\nconfigs=/data/ssdb_data/test/ssdb.conf\n```\n\n将 `/data/ssdb_data/test/ssdb.conf` 修改为你的 SSDB 配置文件的路径. 如果你有多个 SSDB 实例, 那么把它们写在一行, 用空格来分隔, 例如:\n\n```shell\n# each config file for one instance\nconfigs=/data/ssdb_data/test/ssdb.conf /data/ssdb_data/demo/ssdb.conf\n```\n\n**CentOS**\n\n```shell\nsudo chkconfig --add ssdb\nsudo chkconfig ssdb on\n```\n\n**Ubuntu**\n\n```shell\nsudo chmod a+x /etc/init.d/ssdb.sh\nsudo update-rc.d ssdb.sh defaults\n```\n\n\n\n## 资料:\n\n- [中文官网](http://ssdb.io/zh_cn/)\n- [从 Redis 迁移到 SSDB](http://ssdb.io/docs/zh_cn/redis-to-ssdb.html)\n","source":"_posts/Technology/Redis/安装SSDB.md","raw":"---\ntitle: 安装SSDB\ncategories:\n  - 技术开发\n  - 数据库\n  - SSDB\ntags:\n  - SSDB\nabbrlink: 1058490118\n---\n\n## 什么是SSDB\n\n一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.\n\n## 特性\n\n- 替代 Redis 数据库, Redis 的 100 倍容量\n- LevelDB 网络支持, 使用 C/C++ 开发\n- Redis API 兼容, 支持 Redis 客户端\n- 适合存储集合数据, 如 list, hash, zset...\n- 客户端 API 支持的语言包括: [C++](http://ssdb.io/docs/cpp/), [PHP](http://ssdb.io/docs/zh_cn/php/), Python, [Java](http://ssdb.io/docs/java/), Go\n- 持久化的队列服务\n- **主从复制, 负载均衡**\n\n强烈推荐你把 SSDB 部署在 **Linux 操作系统**上.\n\n不要在生产环境中使用 Windows 操作系统来运行 SSDB 服务器. 如果你确实必须使用 Windows 操作系统, 请在上面运行一个 Linux 虚拟机, 然后再让 SSDB 运行于这个虚拟机之中.\n\n## 编译和安装\n\n```shell\nwget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip\nunzip master\ncd ssdb-master\nmake\n# 将安装在 /usr/local/ssdb 目录下\nsudo make install\n```\n\n如果你想安装 ssdb 在其它的目录, 不在 `/usr/local` 目录下, 可以这样\n\n```shell\nsudo make install PREFIX=/your/direcotry\n```\n\n## 问题解决\n\n如果出现如下错误:\n\n```shell\ng++ ...deps/snappy-1.1.0/.libs/libsnappy.a: No such file or directory\nmake[1]: *** [all] Error 1\n```\n\n或者\n\n```shell\ng++ ...deps/jemalloc-3.3.1/lib/libjemalloc.a: No such file or directory\nmake[1]: *** [all] Error 1\n```\n\n这是因为 Snappy 或者 Jemalloc 没有编译成功, 这一般是因为你的系统时钟有问题. 可以这样解决:\n\n```shell\ncd deps/snappy-1.1.0\nautoreconf --force --install\n./configure\nmake\n```\n\n或者\n\n```shell\ncd deps/jemalloc-3.3.1\nautoreconf --force --install\n./configure\nmake\n```\n\n## 启动和停止\n\n```shell\n# 启动主库, 此命令会阻塞住命令行\n./ssdb-server ssdb.conf\n\n# 或者启动为后台进程(不阻塞命令行)\n./ssdb-server -d ssdb.conf\n\n# 停止 ssdb-server\n./ssdb-server ssdb.conf -s stop\n# 对于旧版本\nkill `cat ./var/ssdb.pid`\n\n# 重启\n./ssdb-server ssdb.conf -s restart\n```\n\n到目前为止, 你需要手动管理 `ssdb-server` 进程, 如果你希望在操作系统启动和停止时自动地管理, 请按下面的说明进行.\n\n## SSDB 启动脚本(随操作系统自启动)\n\n假设你已经安装 SSDB 在默认的 `/usr/local/ssdb` 目录, 把 `tools/ssdb.sh` 脚本放到 `/etc/init.d` 目录下.\n\n注意: 对于 CentOS 用户, 请将 `ssdb.sh` 重命名为 `ssdb`.\n\n编辑下面的内容:\n\n```shell\n# each config file for one instance\nconfigs=/data/ssdb_data/test/ssdb.conf\n```\n\n将 `/data/ssdb_data/test/ssdb.conf` 修改为你的 SSDB 配置文件的路径. 如果你有多个 SSDB 实例, 那么把它们写在一行, 用空格来分隔, 例如:\n\n```shell\n# each config file for one instance\nconfigs=/data/ssdb_data/test/ssdb.conf /data/ssdb_data/demo/ssdb.conf\n```\n\n**CentOS**\n\n```shell\nsudo chkconfig --add ssdb\nsudo chkconfig ssdb on\n```\n\n**Ubuntu**\n\n```shell\nsudo chmod a+x /etc/init.d/ssdb.sh\nsudo update-rc.d ssdb.sh defaults\n```\n\n\n\n## 资料:\n\n- [中文官网](http://ssdb.io/zh_cn/)\n- [从 Redis 迁移到 SSDB](http://ssdb.io/docs/zh_cn/redis-to-ssdb.html)\n","slug":"Technology/Redis/安装SSDB","published":1,"date":"2021-04-16T13:51:53.934Z","updated":"2021-04-29T10:24:59.081Z","_id":"ckotdh5wk002zkw8zfkep7wb8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是SSDB\"><a href=\"#什么是SSDB\" class=\"headerlink\" title=\"什么是SSDB\"></a>什么是SSDB</h2><p>一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>替代 Redis 数据库, Redis 的 100 倍容量</li>\n<li>LevelDB 网络支持, 使用 C/C++ 开发</li>\n<li>Redis API 兼容, 支持 Redis 客户端</li>\n<li>适合存储集合数据, 如 list, hash, zset…</li>\n<li>客户端 API 支持的语言包括: <a href=\"http://ssdb.io/docs/cpp/\">C++</a>, <a href=\"http://ssdb.io/docs/zh_cn/php/\">PHP</a>, Python, <a href=\"http://ssdb.io/docs/java/\">Java</a>, Go</li>\n<li>持久化的队列服务</li>\n<li><strong>主从复制, 负载均衡</strong></li>\n</ul>\n<p>强烈推荐你把 SSDB 部署在 <strong>Linux 操作系统</strong>上.</p>\n<p>不要在生产环境中使用 Windows 操作系统来运行 SSDB 服务器. 如果你确实必须使用 Windows 操作系统, 请在上面运行一个 Linux 虚拟机, 然后再让 SSDB 运行于这个虚拟机之中.</p>\n<h2 id=\"编译和安装\"><a href=\"#编译和安装\" class=\"headerlink\" title=\"编译和安装\"></a>编译和安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip</span><br><span class=\"line\">unzip master</span><br><span class=\"line\">cd ssdb-master</span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将安装在 /usr/<span class=\"built_in\">local</span>/ssdb 目录下</span></span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>如果你想安装 ssdb 在其它的目录, 不在 <code>/usr/local</code> 目录下, 可以这样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install PREFIX=/your/direcotry</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>如果出现如下错误:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ ...deps/snappy-1.1.0/.libs/libsnappy.a: No such file or directory</span><br><span class=\"line\">make[1]: *** [all] Error 1</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ ...deps/jemalloc-3.3.1/lib/libjemalloc.a: No such file or directory</span><br><span class=\"line\">make[1]: *** [all] Error 1</span><br></pre></td></tr></table></figure>\n\n<p>这是因为 Snappy 或者 Jemalloc 没有编译成功, 这一般是因为你的系统时钟有问题. 可以这样解决:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd deps/snappy-1.1.0</span><br><span class=\"line\">autoreconf --force --install</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd deps/jemalloc-3.3.1</span><br><span class=\"line\">autoreconf --force --install</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动和停止\"><a href=\"#启动和停止\" class=\"headerlink\" title=\"启动和停止\"></a>启动和停止</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动主库, 此命令会阻塞住命令行</span></span><br><span class=\"line\">./ssdb-server ssdb.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者启动为后台进程(不阻塞命令行)</span></span><br><span class=\"line\">./ssdb-server -d ssdb.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止 ssdb-server</span></span><br><span class=\"line\">./ssdb-server ssdb.conf -s stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 对于旧版本</span></span><br><span class=\"line\">kill `cat ./var/ssdb.pid`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启</span></span><br><span class=\"line\">./ssdb-server ssdb.conf -s restart</span><br></pre></td></tr></table></figure>\n\n<p>到目前为止, 你需要手动管理 <code>ssdb-server</code> 进程, 如果你希望在操作系统启动和停止时自动地管理, 请按下面的说明进行.</p>\n<h2 id=\"SSDB-启动脚本-随操作系统自启动\"><a href=\"#SSDB-启动脚本-随操作系统自启动\" class=\"headerlink\" title=\"SSDB 启动脚本(随操作系统自启动)\"></a>SSDB 启动脚本(随操作系统自启动)</h2><p>假设你已经安装 SSDB 在默认的 <code>/usr/local/ssdb</code> 目录, 把 <code>tools/ssdb.sh</code> 脚本放到 <code>/etc/init.d</code> 目录下.</p>\n<p>注意: 对于 CentOS 用户, 请将 <code>ssdb.sh</code> 重命名为 <code>ssdb</code>.</p>\n<p>编辑下面的内容:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> each config file <span class=\"keyword\">for</span> one instance</span></span><br><span class=\"line\">configs=/data/ssdb_data/test/ssdb.conf</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>/data/ssdb_data/test/ssdb.conf</code> 修改为你的 SSDB 配置文件的路径. 如果你有多个 SSDB 实例, 那么把它们写在一行, 用空格来分隔, 例如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> each config file <span class=\"keyword\">for</span> one instance</span></span><br><span class=\"line\">configs=/data/ssdb_data/test/ssdb.conf /data/ssdb_data/demo/ssdb.conf</span><br></pre></td></tr></table></figure>\n\n<p><strong>CentOS</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chkconfig --add ssdb</span><br><span class=\"line\">sudo chkconfig ssdb on</span><br></pre></td></tr></table></figure>\n\n<p><strong>Ubuntu</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+x /etc/init.d/ssdb.sh</span><br><span class=\"line\">sudo update-rc.d ssdb.sh defaults</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料:\"></a>资料:</h2><ul>\n<li><a href=\"http://ssdb.io/zh_cn/\">中文官网</a></li>\n<li><a href=\"http://ssdb.io/docs/zh_cn/redis-to-ssdb.html\">从 Redis 迁移到 SSDB</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是SSDB\"><a href=\"#什么是SSDB\" class=\"headerlink\" title=\"什么是SSDB\"></a>什么是SSDB</h2><p>一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>替代 Redis 数据库, Redis 的 100 倍容量</li>\n<li>LevelDB 网络支持, 使用 C/C++ 开发</li>\n<li>Redis API 兼容, 支持 Redis 客户端</li>\n<li>适合存储集合数据, 如 list, hash, zset…</li>\n<li>客户端 API 支持的语言包括: <a href=\"http://ssdb.io/docs/cpp/\">C++</a>, <a href=\"http://ssdb.io/docs/zh_cn/php/\">PHP</a>, Python, <a href=\"http://ssdb.io/docs/java/\">Java</a>, Go</li>\n<li>持久化的队列服务</li>\n<li><strong>主从复制, 负载均衡</strong></li>\n</ul>\n<p>强烈推荐你把 SSDB 部署在 <strong>Linux 操作系统</strong>上.</p>\n<p>不要在生产环境中使用 Windows 操作系统来运行 SSDB 服务器. 如果你确实必须使用 Windows 操作系统, 请在上面运行一个 Linux 虚拟机, 然后再让 SSDB 运行于这个虚拟机之中.</p>\n<h2 id=\"编译和安装\"><a href=\"#编译和安装\" class=\"headerlink\" title=\"编译和安装\"></a>编译和安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip</span><br><span class=\"line\">unzip master</span><br><span class=\"line\">cd ssdb-master</span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将安装在 /usr/<span class=\"built_in\">local</span>/ssdb 目录下</span></span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>如果你想安装 ssdb 在其它的目录, 不在 <code>/usr/local</code> 目录下, 可以这样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install PREFIX=/your/direcotry</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>如果出现如下错误:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ ...deps/snappy-1.1.0/.libs/libsnappy.a: No such file or directory</span><br><span class=\"line\">make[1]: *** [all] Error 1</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ ...deps/jemalloc-3.3.1/lib/libjemalloc.a: No such file or directory</span><br><span class=\"line\">make[1]: *** [all] Error 1</span><br></pre></td></tr></table></figure>\n\n<p>这是因为 Snappy 或者 Jemalloc 没有编译成功, 这一般是因为你的系统时钟有问题. 可以这样解决:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd deps/snappy-1.1.0</span><br><span class=\"line\">autoreconf --force --install</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd deps/jemalloc-3.3.1</span><br><span class=\"line\">autoreconf --force --install</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动和停止\"><a href=\"#启动和停止\" class=\"headerlink\" title=\"启动和停止\"></a>启动和停止</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动主库, 此命令会阻塞住命令行</span></span><br><span class=\"line\">./ssdb-server ssdb.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者启动为后台进程(不阻塞命令行)</span></span><br><span class=\"line\">./ssdb-server -d ssdb.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止 ssdb-server</span></span><br><span class=\"line\">./ssdb-server ssdb.conf -s stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 对于旧版本</span></span><br><span class=\"line\">kill `cat ./var/ssdb.pid`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启</span></span><br><span class=\"line\">./ssdb-server ssdb.conf -s restart</span><br></pre></td></tr></table></figure>\n\n<p>到目前为止, 你需要手动管理 <code>ssdb-server</code> 进程, 如果你希望在操作系统启动和停止时自动地管理, 请按下面的说明进行.</p>\n<h2 id=\"SSDB-启动脚本-随操作系统自启动\"><a href=\"#SSDB-启动脚本-随操作系统自启动\" class=\"headerlink\" title=\"SSDB 启动脚本(随操作系统自启动)\"></a>SSDB 启动脚本(随操作系统自启动)</h2><p>假设你已经安装 SSDB 在默认的 <code>/usr/local/ssdb</code> 目录, 把 <code>tools/ssdb.sh</code> 脚本放到 <code>/etc/init.d</code> 目录下.</p>\n<p>注意: 对于 CentOS 用户, 请将 <code>ssdb.sh</code> 重命名为 <code>ssdb</code>.</p>\n<p>编辑下面的内容:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> each config file <span class=\"keyword\">for</span> one instance</span></span><br><span class=\"line\">configs=/data/ssdb_data/test/ssdb.conf</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>/data/ssdb_data/test/ssdb.conf</code> 修改为你的 SSDB 配置文件的路径. 如果你有多个 SSDB 实例, 那么把它们写在一行, 用空格来分隔, 例如:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> each config file <span class=\"keyword\">for</span> one instance</span></span><br><span class=\"line\">configs=/data/ssdb_data/test/ssdb.conf /data/ssdb_data/demo/ssdb.conf</span><br></pre></td></tr></table></figure>\n\n<p><strong>CentOS</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chkconfig --add ssdb</span><br><span class=\"line\">sudo chkconfig ssdb on</span><br></pre></td></tr></table></figure>\n\n<p><strong>Ubuntu</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+x /etc/init.d/ssdb.sh</span><br><span class=\"line\">sudo update-rc.d ssdb.sh defaults</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料:\"></a>资料:</h2><ul>\n<li><a href=\"http://ssdb.io/zh_cn/\">中文官网</a></li>\n<li><a href=\"http://ssdb.io/docs/zh_cn/redis-to-ssdb.html\">从 Redis 迁移到 SSDB</a></li>\n</ul>\n"},{"title":"缓存Memcache和Redis的区别","abbrlink":894376550,"_content":"\n- Redis 和 Memcache 都是将数据存放在内存中，都是内存数据库。不过 memcache 还可用于缓存其他东西，例如图片、视频等等\n- Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，hash 等数据结构的存储\n- 虚拟内存：Redis 当物理内存用完时，可以将一些很久没用到的 value 交换到磁盘\n- 过期策略：memcache 在 set 时就指定，例如 set key1 0 0 8，即永不过期。Redis 可以通过例如 expire 设定，例如 expire name 10\n- 分布式：设定 memcache 集群，利用 magent 做一主多从；redis 可以做一主多从。都可以一主一从\n- 存储数据安全：memcache 挂掉后，数据没了；redis 可以定期保存到磁盘（持久化）\n- 灾难恢复：memcache 挂掉后，数据不可恢复; redis 数据丢失后可以通过 aof 恢复\n- Redis支持数据的备份，即 master-slave 模式的数据备份\n\n","source":"_posts/Technology/Redis/缓存Memcache和Redis的区别.md","raw":"---\ntitle: 缓存Memcache和Redis的区别\ncategories:\n  - 技术开发\n  - 数据库\n  - Redis\nabbrlink: 894376550\n---\n\n- Redis 和 Memcache 都是将数据存放在内存中，都是内存数据库。不过 memcache 还可用于缓存其他东西，例如图片、视频等等\n- Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，hash 等数据结构的存储\n- 虚拟内存：Redis 当物理内存用完时，可以将一些很久没用到的 value 交换到磁盘\n- 过期策略：memcache 在 set 时就指定，例如 set key1 0 0 8，即永不过期。Redis 可以通过例如 expire 设定，例如 expire name 10\n- 分布式：设定 memcache 集群，利用 magent 做一主多从；redis 可以做一主多从。都可以一主一从\n- 存储数据安全：memcache 挂掉后，数据没了；redis 可以定期保存到磁盘（持久化）\n- 灾难恢复：memcache 挂掉后，数据不可恢复; redis 数据丢失后可以通过 aof 恢复\n- Redis支持数据的备份，即 master-slave 模式的数据备份\n\n","slug":"Technology/Redis/缓存Memcache和Redis的区别","published":1,"date":"2021-04-16T13:52:08.497Z","updated":"2021-04-29T10:24:59.084Z","_id":"ckotdh5wl0032kw8zg7qdagra","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>Redis 和 Memcache 都是将数据存放在内存中，都是内存数据库。不过 memcache 还可用于缓存其他东西，例如图片、视频等等</li>\n<li>Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，hash 等数据结构的存储</li>\n<li>虚拟内存：Redis 当物理内存用完时，可以将一些很久没用到的 value 交换到磁盘</li>\n<li>过期策略：memcache 在 set 时就指定，例如 set key1 0 0 8，即永不过期。Redis 可以通过例如 expire 设定，例如 expire name 10</li>\n<li>分布式：设定 memcache 集群，利用 magent 做一主多从；redis 可以做一主多从。都可以一主一从</li>\n<li>存储数据安全：memcache 挂掉后，数据没了；redis 可以定期保存到磁盘（持久化）</li>\n<li>灾难恢复：memcache 挂掉后，数据不可恢复; redis 数据丢失后可以通过 aof 恢复</li>\n<li>Redis支持数据的备份，即 master-slave 模式的数据备份</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Redis 和 Memcache 都是将数据存放在内存中，都是内存数据库。不过 memcache 还可用于缓存其他东西，例如图片、视频等等</li>\n<li>Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，hash 等数据结构的存储</li>\n<li>虚拟内存：Redis 当物理内存用完时，可以将一些很久没用到的 value 交换到磁盘</li>\n<li>过期策略：memcache 在 set 时就指定，例如 set key1 0 0 8，即永不过期。Redis 可以通过例如 expire 设定，例如 expire name 10</li>\n<li>分布式：设定 memcache 集群，利用 magent 做一主多从；redis 可以做一主多从。都可以一主一从</li>\n<li>存储数据安全：memcache 挂掉后，数据没了；redis 可以定期保存到磁盘（持久化）</li>\n<li>灾难恢复：memcache 挂掉后，数据不可恢复; redis 数据丢失后可以通过 aof 恢复</li>\n<li>Redis支持数据的备份，即 master-slave 模式的数据备份</li>\n</ul>\n"},{"title":"MyISAM和InnoDB的区别","abbrlink":4025057969,"_content":"\n- MyISAM 强调的是性能，查询速度快，支持表锁，支持全文索引，并发较小，不支持事务型操作，不支持外键，崩溃后不可自动恢复\n- InnoDB 适合频繁修改以及设计安全性较高的应用，支持行锁，不支持全文索引，并发较大，支持事务型操作，支持外键，奔溃可恢复\n- 对于 `select count(*) from table` 语句，MyISAM 比 InnoDB 快，因为 MyISAM 直接会保存表行数，在查询的时候直接取出，但是InnoDB 会遍历整个表来计算行\n- 对于加了where条件，`select count(*) from table where 条件`，两者都会进行遍历计算行数","source":"_posts/Technology/MySQL/MyISAM和InnoDB的区别.md","raw":"---\ntitle: MyISAM和InnoDB的区别\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 4025057969\n---\n\n- MyISAM 强调的是性能，查询速度快，支持表锁，支持全文索引，并发较小，不支持事务型操作，不支持外键，崩溃后不可自动恢复\n- InnoDB 适合频繁修改以及设计安全性较高的应用，支持行锁，不支持全文索引，并发较大，支持事务型操作，支持外键，奔溃可恢复\n- 对于 `select count(*) from table` 语句，MyISAM 比 InnoDB 快，因为 MyISAM 直接会保存表行数，在查询的时候直接取出，但是InnoDB 会遍历整个表来计算行\n- 对于加了where条件，`select count(*) from table where 条件`，两者都会进行遍历计算行数","slug":"Technology/MySQL/MyISAM和InnoDB的区别","published":1,"date":"2021-04-16T13:45:36.620Z","updated":"2021-04-29T10:24:59.159Z","_id":"ckotdh5wn0034kw8z56ep3evr","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>MyISAM 强调的是性能，查询速度快，支持表锁，支持全文索引，并发较小，不支持事务型操作，不支持外键，崩溃后不可自动恢复</li>\n<li>InnoDB 适合频繁修改以及设计安全性较高的应用，支持行锁，不支持全文索引，并发较大，支持事务型操作，支持外键，奔溃可恢复</li>\n<li>对于 <code>select count(*) from table</code> 语句，MyISAM 比 InnoDB 快，因为 MyISAM 直接会保存表行数，在查询的时候直接取出，但是InnoDB 会遍历整个表来计算行</li>\n<li>对于加了where条件，<code>select count(*) from table where 条件</code>，两者都会进行遍历计算行数</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>MyISAM 强调的是性能，查询速度快，支持表锁，支持全文索引，并发较小，不支持事务型操作，不支持外键，崩溃后不可自动恢复</li>\n<li>InnoDB 适合频繁修改以及设计安全性较高的应用，支持行锁，不支持全文索引，并发较大，支持事务型操作，支持外键，奔溃可恢复</li>\n<li>对于 <code>select count(*) from table</code> 语句，MyISAM 比 InnoDB 快，因为 MyISAM 直接会保存表行数，在查询的时候直接取出，但是InnoDB 会遍历整个表来计算行</li>\n<li>对于加了where条件，<code>select count(*) from table where 条件</code>，两者都会进行遍历计算行数</li>\n</ul>\n"},{"title":"MySQL优化","abbrlink":748313607,"_content":"\n- 对查询进行优化，应尽量避免全表扫描，首先应考虑在 `where` 及 order by 涉及的列上建立索引。  \n\n- 应尽量避免在 `where` 子句中对字段进行 `null` 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n  ```sql\n  select id from t where num is null\n  ```\n\n  可以在 `num` 上设置默认值 `0`，确保表中 `num` 列没有 `null` 值，然后这样查询：  \n\n  ```sql\n  select id from t where num = 0  \n  ```\n\n- 应尽量避免在 `where` 子句中使用 `!=` 或 `<>` 操作符，否则将引擎放弃使用索引而进行全表扫描\n\n- 应尽量避免在 `where` 子句中使用 `or` 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n  ```sql\n  select id from t where num=10 or num = 20  \n  ```\n\n  可以这样查询：\n\n  ```sql\n  select id from t where num=10 union all select id from t where num = 20\n  ```\n\n- `in` 和 `not in` 也要慎用，否则会导致全表扫描，如：\n\n  ```sql\n  select id from t where num in(1,2,3)  \n  ```\n\n  对于连续的数值，能用 `between` 就不要用 `in` 了：\n\n  ```sql\n  select id from t where num between 1 and 3  \n  ```\n\n- 下面的查询也将导致全表扫描： \n\n  ```sql\n  select id from t where name like '%abc%'  \n  ```\n\n- 应尽量避免在 `where` 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：  \n\n  ```sql\n  select id from t where num/2=100  \n  ```\n\n  应改为:  \n\n  ```sql\n  select id from t where num=100*2  \n  ```\n\n- 应尽量避免在 `where` 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：  \n\n  ```sql\n  select id from t where substring(name,1,3) = 'abc' --name以 abc 开头的 id  \n  ```\n\n  应改为:  \n\n  ```sql\n  select id from t where name like 'abc%'  \n  ```\n\n- 不要在 `where` 子句中的 `=` 左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引\n\n- 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致\n\n- 不要写一些没有意义的查询，如需要生成一个空表结构：  \n\n  ```sql\n  select col1,col2 into #t from t where 1=0\n  ```\n\n  这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：  \n\n  ```sql\n  create table #t(...) \n  ```\n\n- 很多时候用 `exists` 代替 `in` 是一个好的选择：  \n\n  ```sql\n  select num from a where num in(select num from b)  \n  ```\n\n  用下面的语句替换： \n\n  ```sql\n  select num from a where exists(select 1 from b where num=a.num)\n  ```\n\n- 并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL 查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在 sex 上建了索引也对查询效率起不了作用\n- 索引并不是越多越好，索引固然可以提高相应的 `select` 的效率，但同时也降低了 `insert` 及 update 的效率，  因为 `insert` 或 `update` 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。  一个表的索引数最好不要超过 `6`  个，若太多则应考虑一些不常使用到的列上建的索引是否有必要\n\n\n- 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。  这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了\n- 尽可能的使用 `varchar` 代替 `char` ，因为首先变长字段存储空间小，可以节省存储空间， 其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些\n- 任何地方都不要使用 `select * from t` ，用具体的字段列表代替 `*`，不要返回用不到的任何字段\n- 避免频繁创建和删除临时表，以减少系统表资源的消耗\n- 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n- 在新建临时表时，如果一次性插入数据量很大，那么可以使用 `select into` 代替 `create table`，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 `create table`，然后 `insert`\n- 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 `truncate table` ，然后 `drop table` ，这样可以避免系统表的较长时间锁定\n- 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过 1 万行，那么就应该考虑改写\n- 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效\n- 尽量避免大事务操作，提高系统并发能力\n- 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理","source":"_posts/Technology/MySQL/MySQL优化.md","raw":"---\ntitle: MySQL优化\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 748313607\n---\n\n- 对查询进行优化，应尽量避免全表扫描，首先应考虑在 `where` 及 order by 涉及的列上建立索引。  \n\n- 应尽量避免在 `where` 子句中对字段进行 `null` 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n  ```sql\n  select id from t where num is null\n  ```\n\n  可以在 `num` 上设置默认值 `0`，确保表中 `num` 列没有 `null` 值，然后这样查询：  \n\n  ```sql\n  select id from t where num = 0  \n  ```\n\n- 应尽量避免在 `where` 子句中使用 `!=` 或 `<>` 操作符，否则将引擎放弃使用索引而进行全表扫描\n\n- 应尽量避免在 `where` 子句中使用 `or` 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\n\n  ```sql\n  select id from t where num=10 or num = 20  \n  ```\n\n  可以这样查询：\n\n  ```sql\n  select id from t where num=10 union all select id from t where num = 20\n  ```\n\n- `in` 和 `not in` 也要慎用，否则会导致全表扫描，如：\n\n  ```sql\n  select id from t where num in(1,2,3)  \n  ```\n\n  对于连续的数值，能用 `between` 就不要用 `in` 了：\n\n  ```sql\n  select id from t where num between 1 and 3  \n  ```\n\n- 下面的查询也将导致全表扫描： \n\n  ```sql\n  select id from t where name like '%abc%'  \n  ```\n\n- 应尽量避免在 `where` 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：  \n\n  ```sql\n  select id from t where num/2=100  \n  ```\n\n  应改为:  \n\n  ```sql\n  select id from t where num=100*2  \n  ```\n\n- 应尽量避免在 `where` 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：  \n\n  ```sql\n  select id from t where substring(name,1,3) = 'abc' --name以 abc 开头的 id  \n  ```\n\n  应改为:  \n\n  ```sql\n  select id from t where name like 'abc%'  \n  ```\n\n- 不要在 `where` 子句中的 `=` 左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引\n\n- 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致\n\n- 不要写一些没有意义的查询，如需要生成一个空表结构：  \n\n  ```sql\n  select col1,col2 into #t from t where 1=0\n  ```\n\n  这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：  \n\n  ```sql\n  create table #t(...) \n  ```\n\n- 很多时候用 `exists` 代替 `in` 是一个好的选择：  \n\n  ```sql\n  select num from a where num in(select num from b)  \n  ```\n\n  用下面的语句替换： \n\n  ```sql\n  select num from a where exists(select 1 from b where num=a.num)\n  ```\n\n- 并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL 查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在 sex 上建了索引也对查询效率起不了作用\n- 索引并不是越多越好，索引固然可以提高相应的 `select` 的效率，但同时也降低了 `insert` 及 update 的效率，  因为 `insert` 或 `update` 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。  一个表的索引数最好不要超过 `6`  个，若太多则应考虑一些不常使用到的列上建的索引是否有必要\n\n\n- 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。  这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了\n- 尽可能的使用 `varchar` 代替 `char` ，因为首先变长字段存储空间小，可以节省存储空间， 其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些\n- 任何地方都不要使用 `select * from t` ，用具体的字段列表代替 `*`，不要返回用不到的任何字段\n- 避免频繁创建和删除临时表，以减少系统表资源的消耗\n- 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n- 在新建临时表时，如果一次性插入数据量很大，那么可以使用 `select into` 代替 `create table`，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 `create table`，然后 `insert`\n- 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 `truncate table` ，然后 `drop table` ，这样可以避免系统表的较长时间锁定\n- 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过 1 万行，那么就应该考虑改写\n- 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效\n- 尽量避免大事务操作，提高系统并发能力\n- 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理","slug":"Technology/MySQL/MySQL优化","published":1,"date":"2021-04-16T13:45:36.614Z","updated":"2021-04-29T10:24:59.162Z","_id":"ckotdh5wo0036kw8z1tme05xz","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 <code>where</code> 及 order by 涉及的列上建立索引。  </p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行 <code>null</code> 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">is</span> <span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>可以在 <code>num</code> 上设置默认值 <code>0</code>，确保表中 <code>num</code> 列没有 <code>null</code> 值，然后这样查询：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"operator\">=</span> <span class=\"number\">0</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 <code>where</code> 子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符，否则将引擎放弃使用索引而进行全表扫描</p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中使用 <code>or</code> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">or</span> num <span class=\"operator\">=</span> <span class=\"number\">20</span>  </span><br></pre></td></tr></table></figure>\n\n<p>可以这样查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">union</span> <span class=\"keyword\">all</span> <span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"operator\">=</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>in</code> 和 <code>not in</code> 也要慎用，否则会导致全表扫描，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)  </span><br></pre></td></tr></table></figure>\n\n<p>对于连续的数值，能用 <code>between</code> 就不要用 <code>in</code> 了：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>下面的查询也将导致全表扫描： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%abc%&#x27;</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">/</span><span class=\"number\">2</span><span class=\"operator\">=</span><span class=\"number\">100</span>  </span><br></pre></td></tr></table></figure>\n\n<p>应改为:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">100</span><span class=\"operator\">*</span><span class=\"number\">2</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"built_in\">substring</span>(name,<span class=\"number\">1</span>,<span class=\"number\">3</span>) <span class=\"operator\">=</span> <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">--name以 abc 开头的 id  </span></span><br></pre></td></tr></table></figure>\n\n<p>应改为:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;abc%&#x27;</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>不要在 <code>where</code> 子句中的 <code>=</code> 左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引</p>\n</li>\n<li><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致</p>\n</li>\n<li><p>不要写一些没有意义的查询，如需要生成一个空表结构：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> col1,col2 <span class=\"keyword\">into</span> #t <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> #t(...) </span><br></pre></td></tr></table></figure></li>\n<li><p>很多时候用 <code>exists</code> 代替 <code>in</code> 是一个好的选择：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> b)  </span><br></pre></td></tr></table></figure>\n\n<p>用下面的语句替换： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure></li>\n<li><p>并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL 查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在 sex 上建了索引也对查询效率起不了作用</p>\n</li>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 <code>select</code> 的效率，但同时也降低了 <code>insert</code> 及 update 的效率，  因为 <code>insert</code> 或 <code>update</code> 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。  一个表的索引数最好不要超过 <code>6</code>  个，若太多则应考虑一些不常使用到的列上建的索引是否有必要</p>\n</li>\n</ul>\n<ul>\n<li>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。  这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了</li>\n<li>尽可能的使用 <code>varchar</code> 代替 <code>char</code> ，因为首先变长字段存储空间小，可以节省存储空间， 其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些</li>\n<li>任何地方都不要使用 <code>select * from t</code> ，用具体的字段列表代替 <code>*</code>，不要返回用不到的任何字段</li>\n<li>避免频繁创建和删除临时表，以减少系统表资源的消耗</li>\n<li>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</li>\n<li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 <code>select into</code> 代替 <code>create table</code>，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 <code>create table</code>，然后 <code>insert</code></li>\n<li>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 <code>truncate table</code> ，然后 <code>drop table</code> ，这样可以避免系统表的较长时间锁定</li>\n<li>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过 1 万行，那么就应该考虑改写</li>\n<li>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效</li>\n<li>尽量避免大事务操作，提高系统并发能力</li>\n<li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 <code>where</code> 及 order by 涉及的列上建立索引。  </p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行 <code>null</code> 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">is</span> <span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>可以在 <code>num</code> 上设置默认值 <code>0</code>，确保表中 <code>num</code> 列没有 <code>null</code> 值，然后这样查询：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"operator\">=</span> <span class=\"number\">0</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 <code>where</code> 子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符，否则将引擎放弃使用索引而进行全表扫描</p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中使用 <code>or</code> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">or</span> num <span class=\"operator\">=</span> <span class=\"number\">20</span>  </span><br></pre></td></tr></table></figure>\n\n<p>可以这样查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">union</span> <span class=\"keyword\">all</span> <span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"operator\">=</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>in</code> 和 <code>not in</code> 也要慎用，否则会导致全表扫描，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)  </span><br></pre></td></tr></table></figure>\n\n<p>对于连续的数值，能用 <code>between</code> 就不要用 <code>in</code> 了：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>下面的查询也将导致全表扫描： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%abc%&#x27;</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">/</span><span class=\"number\">2</span><span class=\"operator\">=</span><span class=\"number\">100</span>  </span><br></pre></td></tr></table></figure>\n\n<p>应改为:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">100</span><span class=\"operator\">*</span><span class=\"number\">2</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"built_in\">substring</span>(name,<span class=\"number\">1</span>,<span class=\"number\">3</span>) <span class=\"operator\">=</span> <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">--name以 abc 开头的 id  </span></span><br></pre></td></tr></table></figure>\n\n<p>应改为:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;abc%&#x27;</span>  </span><br></pre></td></tr></table></figure></li>\n<li><p>不要在 <code>where</code> 子句中的 <code>=</code> 左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引</p>\n</li>\n<li><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致</p>\n</li>\n<li><p>不要写一些没有意义的查询，如需要生成一个空表结构：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> col1,col2 <span class=\"keyword\">into</span> #t <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> #t(...) </span><br></pre></td></tr></table></figure></li>\n<li><p>很多时候用 <code>exists</code> 代替 <code>in</code> 是一个好的选择：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> b)  </span><br></pre></td></tr></table></figure>\n\n<p>用下面的语句替换： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure></li>\n<li><p>并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL 查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在 sex 上建了索引也对查询效率起不了作用</p>\n</li>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 <code>select</code> 的效率，但同时也降低了 <code>insert</code> 及 update 的效率，  因为 <code>insert</code> 或 <code>update</code> 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。  一个表的索引数最好不要超过 <code>6</code>  个，若太多则应考虑一些不常使用到的列上建的索引是否有必要</p>\n</li>\n</ul>\n<ul>\n<li>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。  这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了</li>\n<li>尽可能的使用 <code>varchar</code> 代替 <code>char</code> ，因为首先变长字段存储空间小，可以节省存储空间， 其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些</li>\n<li>任何地方都不要使用 <code>select * from t</code> ，用具体的字段列表代替 <code>*</code>，不要返回用不到的任何字段</li>\n<li>避免频繁创建和删除临时表，以减少系统表资源的消耗</li>\n<li>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</li>\n<li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 <code>select into</code> 代替 <code>create table</code>，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 <code>create table</code>，然后 <code>insert</code></li>\n<li>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 <code>truncate table</code> ，然后 <code>drop table</code> ，这样可以避免系统表的较长时间锁定</li>\n<li>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过 1 万行，那么就应该考虑改写</li>\n<li>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效</li>\n<li>尽量避免大事务操作，提高系统并发能力</li>\n<li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理</li>\n</ul>\n"},{"title":"MySQL基础-小数类型","abbrlink":1724192415,"_content":"\nMySQL 中使用浮点数和定点数来表示小数。\n\n浮点类型有两种，分别是单精度浮点数 `float` 和双精度浮点数 `double ` ；定点类型只有一种，就是 `decimal` 。\n\n| 类型名称            | 说明               | 存储需求   |\n| ------------------- | ------------------ | ---------- |\n| FLOAT               | 单精度浮点数       | 4 个字节   |\n| DOUBLE              | 双精度浮点数       | 8 个字节   |\n| DECIMAL (M, D)，DEC | 压缩的“严格”定点数 | M+2 个字节 |\n\n`decimal` 类型不同于 `float` 和 `double `。`double ` 实际上是以字符串的形式存放的，`decimal` 可能的最大取值范围与 `double ` 相同，但是有效的取值范围由 `M` 和 `D` 决定。如果改变 `M` 而固定 `D`，则取值范围将随 `M` 的变大而变大。\n\n从上表中可以看到，`decimal` 的存储空间并不是固定的，而由精度值 `M` 决定，占用 `M+2` 个字节。\n\n`float` 类型的取值范围如下：\n\n- 有符号的取值范围：`-3.402823466E+38 ～ -1.175494351E-38`。\n- 无符号的取值范围：`0 和 -1.175494351E-38 ～ -3.402823466E+38`。\n\n`double ` 类型的取值范围如下：\n\n- 有符号的取值范围：`-1.7976931348623157E+308 ～ -2.2250738585072014E-308`。\n- 无符号的取值范围：`0 和 -2.2250738585072014E-308 ～ -1.7976931348623157E+308`。\n\n> 提示：不论是定点还是浮点类型，如果用户指定的精度超出精度范围，则会四舍五入进行处理。\n\n`float` 和 `double` 在不指定精度时，默认会按照实际的精度（由计算机硬件和操作系统决定），`decimal` 如果不指定精度，默认为  `（10，0）`。\n\n浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的范围；缺点是会引起精度问题。\n\n> 在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。","source":"_posts/Technology/MySQL/MySQL基础-小数类型.md","raw":"---\ntitle: MySQL基础-小数类型\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 1724192415\n---\n\nMySQL 中使用浮点数和定点数来表示小数。\n\n浮点类型有两种，分别是单精度浮点数 `float` 和双精度浮点数 `double ` ；定点类型只有一种，就是 `decimal` 。\n\n| 类型名称            | 说明               | 存储需求   |\n| ------------------- | ------------------ | ---------- |\n| FLOAT               | 单精度浮点数       | 4 个字节   |\n| DOUBLE              | 双精度浮点数       | 8 个字节   |\n| DECIMAL (M, D)，DEC | 压缩的“严格”定点数 | M+2 个字节 |\n\n`decimal` 类型不同于 `float` 和 `double `。`double ` 实际上是以字符串的形式存放的，`decimal` 可能的最大取值范围与 `double ` 相同，但是有效的取值范围由 `M` 和 `D` 决定。如果改变 `M` 而固定 `D`，则取值范围将随 `M` 的变大而变大。\n\n从上表中可以看到，`decimal` 的存储空间并不是固定的，而由精度值 `M` 决定，占用 `M+2` 个字节。\n\n`float` 类型的取值范围如下：\n\n- 有符号的取值范围：`-3.402823466E+38 ～ -1.175494351E-38`。\n- 无符号的取值范围：`0 和 -1.175494351E-38 ～ -3.402823466E+38`。\n\n`double ` 类型的取值范围如下：\n\n- 有符号的取值范围：`-1.7976931348623157E+308 ～ -2.2250738585072014E-308`。\n- 无符号的取值范围：`0 和 -2.2250738585072014E-308 ～ -1.7976931348623157E+308`。\n\n> 提示：不论是定点还是浮点类型，如果用户指定的精度超出精度范围，则会四舍五入进行处理。\n\n`float` 和 `double` 在不指定精度时，默认会按照实际的精度（由计算机硬件和操作系统决定），`decimal` 如果不指定精度，默认为  `（10，0）`。\n\n浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的范围；缺点是会引起精度问题。\n\n> 在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。","slug":"Technology/MySQL/MySQL基础-小数类型","published":1,"date":"2021-04-16T13:45:36.669Z","updated":"2021-04-29T10:24:59.165Z","_id":"ckotdh5wp0037kw8zabo6g1jt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>MySQL 中使用浮点数和定点数来表示小数。</p>\n<p>浮点类型有两种，分别是单精度浮点数 <code>float</code> 和双精度浮点数 <code>double </code> ；定点类型只有一种，就是 <code>decimal</code> 。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的“严格”定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody></table>\n<p><code>decimal</code> 类型不同于 <code>float</code> 和 <code>double </code>。<code>double </code> 实际上是以字符串的形式存放的，<code>decimal</code> 可能的最大取值范围与 <code>double </code> 相同，但是有效的取值范围由 <code>M</code> 和 <code>D</code> 决定。如果改变 <code>M</code> 而固定 <code>D</code>，则取值范围将随 <code>M</code> 的变大而变大。</p>\n<p>从上表中可以看到，<code>decimal</code> 的存储空间并不是固定的，而由精度值 <code>M</code> 决定，占用 <code>M+2</code> 个字节。</p>\n<p><code>float</code> 类型的取值范围如下：</p>\n<ul>\n<li>有符号的取值范围：<code>-3.402823466E+38 ～ -1.175494351E-38</code>。</li>\n<li>无符号的取值范围：<code>0 和 -1.175494351E-38 ～ -3.402823466E+38</code>。</li>\n</ul>\n<p><code>double </code> 类型的取值范围如下：</p>\n<ul>\n<li>有符号的取值范围：<code>-1.7976931348623157E+308 ～ -2.2250738585072014E-308</code>。</li>\n<li>无符号的取值范围：<code>0 和 -2.2250738585072014E-308 ～ -1.7976931348623157E+308</code>。</li>\n</ul>\n<blockquote>\n<p>提示：不论是定点还是浮点类型，如果用户指定的精度超出精度范围，则会四舍五入进行处理。</p>\n</blockquote>\n<p><code>float</code> 和 <code>double</code> 在不指定精度时，默认会按照实际的精度（由计算机硬件和操作系统决定），<code>decimal</code> 如果不指定精度，默认为  <code>（10，0）</code>。</p>\n<p>浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的范围；缺点是会引起精度问题。</p>\n<blockquote>\n<p>在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>MySQL 中使用浮点数和定点数来表示小数。</p>\n<p>浮点类型有两种，分别是单精度浮点数 <code>float</code> 和双精度浮点数 <code>double </code> ；定点类型只有一种，就是 <code>decimal</code> 。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的“严格”定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody></table>\n<p><code>decimal</code> 类型不同于 <code>float</code> 和 <code>double </code>。<code>double </code> 实际上是以字符串的形式存放的，<code>decimal</code> 可能的最大取值范围与 <code>double </code> 相同，但是有效的取值范围由 <code>M</code> 和 <code>D</code> 决定。如果改变 <code>M</code> 而固定 <code>D</code>，则取值范围将随 <code>M</code> 的变大而变大。</p>\n<p>从上表中可以看到，<code>decimal</code> 的存储空间并不是固定的，而由精度值 <code>M</code> 决定，占用 <code>M+2</code> 个字节。</p>\n<p><code>float</code> 类型的取值范围如下：</p>\n<ul>\n<li>有符号的取值范围：<code>-3.402823466E+38 ～ -1.175494351E-38</code>。</li>\n<li>无符号的取值范围：<code>0 和 -1.175494351E-38 ～ -3.402823466E+38</code>。</li>\n</ul>\n<p><code>double </code> 类型的取值范围如下：</p>\n<ul>\n<li>有符号的取值范围：<code>-1.7976931348623157E+308 ～ -2.2250738585072014E-308</code>。</li>\n<li>无符号的取值范围：<code>0 和 -2.2250738585072014E-308 ～ -1.7976931348623157E+308</code>。</li>\n</ul>\n<blockquote>\n<p>提示：不论是定点还是浮点类型，如果用户指定的精度超出精度范围，则会四舍五入进行处理。</p>\n</blockquote>\n<p><code>float</code> 和 <code>double</code> 在不指定精度时，默认会按照实际的精度（由计算机硬件和操作系统决定），<code>decimal</code> 如果不指定精度，默认为  <code>（10，0）</code>。</p>\n<p>浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的范围；缺点是会引起精度问题。</p>\n<blockquote>\n<p>在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。</p>\n</blockquote>\n"},{"title":"MySQL千万级大数据量查询优化","abbrlink":1213461122,"_content":"\n1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 `where` 及 `order by` 涉及的列上建立索引。\n\n2. 应尽量避免在 `where` 子句中对字段进行 `null` 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：`select id from t where num is null` 可以在 `num` 上设置默认值 0，确保表中 `num` 列没有 `null` 值，然后这样查询：\n\n   ```sql\n   select id from t where num=0\n   ```\n\n3. 应尽量避免在 `where` 子句中使用 `!=` 或 `<>` 操作符，否则引擎将放弃使用索引而进行全表扫描。\n\n4. 应尽量避免在 `where` 子句中使用 `or` 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：`select id from t where num=10 or num=20` 可以这样查询：\n\n   ```sql\n   select id from t where num=10 union all select id from t where num=20\n   ```\n\n5. `in` 和 `not in` 也要慎用，否则会导致全表扫描，如：`select id from t where num in(1,2,3)` 对于连续的数值，能用 `between` 就不要用 `in` 了：\n\n   ```sql\n   select id from t where num between 1 and 3\n   ```\n\n6. 下面的查询也将导致全表扫描：`select id from t where name like ‘%李%’`， 若要提高效率，可以考虑全文检索：\n\n   ```sql\n    select id from t where name = ‘X李X’\n   ```\n\n7. 如果在 `where` 子句中使用参数，也会导致全表扫描。因为 SQL 只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项，如下面语句将进行全表扫描：`select id from t where num=@num` 可以改为强制查询使用索引：`select id from t with(index(索引名)) where num=@num`\n\n8. 应尽量避免在 `where` 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描，如：\n\n   `select id from t where num/2=100` 应改为: `select id from t where num=100*2`\n\n9. 应尽量避免在 `where` 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：`select id from t where substring(name,1,3)=’abc’` ，`name` 以 `abc` 开头的 `id` 应改为:\n\n   ```sql\n   select id from t where name like ‘abc%’\n   ```\n\n10. 不要在 `where` 子句中的 `=` 左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n11. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n12. 很多时候用 `exists` 代替 `in` 是一个好的选择：`select num from a where num in(select num from b)` 用下面的语句替换： \n\n    ```sql\n     select num from a where exists(select 1 from b where num=a.num)\n    ```\n\n13. 并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL 查询可能不会去利用索引，如一表中有字段 `sex`、`male`、`female` 几乎各一半，那么即使在 `sex` 上建了索引也对查询效率起不了作用。\n\n14. 索引并不是越多越好，索引固然可以提高相应的 `select` 的效率，但同时也降低了 `insert` 及 `update` 的效率，因为 `insert` 或 `update` 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n\n15. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n16. 尽可能的使用 `varchar/nvarchar` 代替 `char/nchar` ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n17. 任何地方都不要使用 `select * from table` ，用具体的字段列表代替 `*` ，不要返回用不到的任何字段。\n\n18. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n19. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n\n20. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 `select into` 代替 `create table`，避免造成大量 `log` ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 `create table`，然后 `insert` 。\n\n21. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 `truncate table` ，然后 `drop table` ，这样可以避免系统表的较长时间锁定。\n\n22. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n23. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n24. 与临时表一样，游标并不是不可使 用。对小型数据集使用 `FAST_FORWARD` 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时；在结果集中包括“合计”的例程通常要比使用游标执行的速度快；如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n25. 在所有的存储过程和触发器的开始处设置 `SET NOCOUNT ON` ，在结束时设置 `SET NOCOUNT OFF` ，无需在执行存储过程和触发器的每个语句后向客户端发送`DONE_IN_PROC` 消息。\n\n26. 尽量避免大事务操作，提高系统并发能力。\n\n27. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。","source":"_posts/Technology/MySQL/MySQL千万级大数据量查询优化.md","raw":"---\ntitle: MySQL千万级大数据量查询优化\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 1213461122\n---\n\n1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 `where` 及 `order by` 涉及的列上建立索引。\n\n2. 应尽量避免在 `where` 子句中对字段进行 `null` 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：`select id from t where num is null` 可以在 `num` 上设置默认值 0，确保表中 `num` 列没有 `null` 值，然后这样查询：\n\n   ```sql\n   select id from t where num=0\n   ```\n\n3. 应尽量避免在 `where` 子句中使用 `!=` 或 `<>` 操作符，否则引擎将放弃使用索引而进行全表扫描。\n\n4. 应尽量避免在 `where` 子句中使用 `or` 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：`select id from t where num=10 or num=20` 可以这样查询：\n\n   ```sql\n   select id from t where num=10 union all select id from t where num=20\n   ```\n\n5. `in` 和 `not in` 也要慎用，否则会导致全表扫描，如：`select id from t where num in(1,2,3)` 对于连续的数值，能用 `between` 就不要用 `in` 了：\n\n   ```sql\n   select id from t where num between 1 and 3\n   ```\n\n6. 下面的查询也将导致全表扫描：`select id from t where name like ‘%李%’`， 若要提高效率，可以考虑全文检索：\n\n   ```sql\n    select id from t where name = ‘X李X’\n   ```\n\n7. 如果在 `where` 子句中使用参数，也会导致全表扫描。因为 SQL 只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项，如下面语句将进行全表扫描：`select id from t where num=@num` 可以改为强制查询使用索引：`select id from t with(index(索引名)) where num=@num`\n\n8. 应尽量避免在 `where` 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描，如：\n\n   `select id from t where num/2=100` 应改为: `select id from t where num=100*2`\n\n9. 应尽量避免在 `where` 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：`select id from t where substring(name,1,3)=’abc’` ，`name` 以 `abc` 开头的 `id` 应改为:\n\n   ```sql\n   select id from t where name like ‘abc%’\n   ```\n\n10. 不要在 `where` 子句中的 `=` 左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n11. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n12. 很多时候用 `exists` 代替 `in` 是一个好的选择：`select num from a where num in(select num from b)` 用下面的语句替换： \n\n    ```sql\n     select num from a where exists(select 1 from b where num=a.num)\n    ```\n\n13. 并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL 查询可能不会去利用索引，如一表中有字段 `sex`、`male`、`female` 几乎各一半，那么即使在 `sex` 上建了索引也对查询效率起不了作用。\n\n14. 索引并不是越多越好，索引固然可以提高相应的 `select` 的效率，但同时也降低了 `insert` 及 `update` 的效率，因为 `insert` 或 `update` 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n\n15. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n16. 尽可能的使用 `varchar/nvarchar` 代替 `char/nchar` ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n17. 任何地方都不要使用 `select * from table` ，用具体的字段列表代替 `*` ，不要返回用不到的任何字段。\n\n18. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n19. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n\n20. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 `select into` 代替 `create table`，避免造成大量 `log` ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 `create table`，然后 `insert` 。\n\n21. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 `truncate table` ，然后 `drop table` ，这样可以避免系统表的较长时间锁定。\n\n22. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n23. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n24. 与临时表一样，游标并不是不可使 用。对小型数据集使用 `FAST_FORWARD` 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时；在结果集中包括“合计”的例程通常要比使用游标执行的速度快；如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n25. 在所有的存储过程和触发器的开始处设置 `SET NOCOUNT ON` ，在结束时设置 `SET NOCOUNT OFF` ，无需在执行存储过程和触发器的每个语句后向客户端发送`DONE_IN_PROC` 消息。\n\n26. 尽量避免大事务操作，提高系统并发能力。\n\n27. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。","slug":"Technology/MySQL/MySQL千万级大数据量查询优化","published":1,"date":"2021-04-16T13:45:36.705Z","updated":"2021-04-29T10:24:59.164Z","_id":"ckotdh5wq003bkw8zha6p5n33","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 <code>where</code> 及 <code>order by</code> 涉及的列上建立索引。</p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行 <code>null</code> 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<code>select id from t where num is null</code> 可以在 <code>num</code> 上设置默认值 0，确保表中 <code>num</code> 列没有 <code>null</code> 值，然后这样查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 <code>where</code> 子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符，否则引擎将放弃使用索引而进行全表扫描。</p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中使用 <code>or</code> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<code>select id from t where num=10 or num=20</code> 可以这样查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">union</span> <span class=\"keyword\">all</span> <span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">20</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>in</code> 和 <code>not in</code> 也要慎用，否则会导致全表扫描，如：<code>select id from t where num in(1,2,3)</code> 对于连续的数值，能用 <code>between</code> 就不要用 <code>in</code> 了：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></li>\n<li><p>下面的查询也将导致全表扫描：<code>select id from t where name like ‘%李%’</code>， 若要提高效率，可以考虑全文检索：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"operator\">=</span> ‘X李X’</span><br></pre></td></tr></table></figure></li>\n<li><p>如果在 <code>where</code> 子句中使用参数，也会导致全表扫描。因为 SQL 只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项，如下面语句将进行全表扫描：<code>select id from t where num=@num</code> 可以改为强制查询使用索引：<code>select id from t with(index(索引名)) where num=@num</code></p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<p><code>select id from t where num/2=100</code> 应改为: <code>select id from t where num=100*2</code></p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<code>select id from t where substring(name,1,3)=’abc’</code> ，<code>name</code> 以 <code>abc</code> 开头的 <code>id</code> 应改为:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> ‘abc<span class=\"operator\">%</span>’</span><br></pre></td></tr></table></figure></li>\n<li><p>不要在 <code>where</code> 子句中的 <code>=</code> 左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n</li>\n<li><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n</li>\n<li><p>很多时候用 <code>exists</code> 代替 <code>in</code> 是一个好的选择：<code>select num from a where num in(select num from b)</code> 用下面的语句替换： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure></li>\n<li><p>并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL 查询可能不会去利用索引，如一表中有字段 <code>sex</code>、<code>male</code>、<code>female</code> 几乎各一半，那么即使在 <code>sex</code> 上建了索引也对查询效率起不了作用。</p>\n</li>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 <code>select</code> 的效率，但同时也降低了 <code>insert</code> 及 <code>update</code> 的效率，因为 <code>insert</code> 或 <code>update</code> 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p>\n</li>\n<li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n</li>\n<li><p>尽可能的使用 <code>varchar/nvarchar</code> 代替 <code>char/nchar</code> ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n</li>\n<li><p>任何地方都不要使用 <code>select * from table</code> ，用具体的字段列表代替 <code>*</code> ，不要返回用不到的任何字段。</p>\n</li>\n<li><p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n</li>\n<li><p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n</li>\n<li><p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 <code>select into</code> 代替 <code>create table</code>，避免造成大量 <code>log</code> ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 <code>create table</code>，然后 <code>insert</code> 。</p>\n</li>\n<li><p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 <code>truncate table</code> ，然后 <code>drop table</code> ，这样可以避免系统表的较长时间锁定。</p>\n</li>\n<li><p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n</li>\n<li><p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n</li>\n<li><p>与临时表一样，游标并不是不可使 用。对小型数据集使用 <code>FAST_FORWARD</code> 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时；在结果集中包括“合计”的例程通常要比使用游标执行的速度快；如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n</li>\n<li><p>在所有的存储过程和触发器的开始处设置 <code>SET NOCOUNT ON</code> ，在结束时设置 <code>SET NOCOUNT OFF</code> ，无需在执行存储过程和触发器的每个语句后向客户端发送<code>DONE_IN_PROC</code> 消息。</p>\n</li>\n<li><p>尽量避免大事务操作，提高系统并发能力。</p>\n</li>\n<li><p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 <code>where</code> 及 <code>order by</code> 涉及的列上建立索引。</p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行 <code>null</code> 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<code>select id from t where num is null</code> 可以在 <code>num</code> 上设置默认值 0，确保表中 <code>num</code> 列没有 <code>null</code> 值，然后这样查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 <code>where</code> 子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符，否则引擎将放弃使用索引而进行全表扫描。</p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中使用 <code>or</code> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<code>select id from t where num=10 or num=20</code> 可以这样查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">union</span> <span class=\"keyword\">all</span> <span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">20</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>in</code> 和 <code>not in</code> 也要慎用，否则会导致全表扫描，如：<code>select id from t where num in(1,2,3)</code> 对于连续的数值，能用 <code>between</code> 就不要用 <code>in</code> 了：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></li>\n<li><p>下面的查询也将导致全表扫描：<code>select id from t where name like ‘%李%’</code>， 若要提高效率，可以考虑全文检索：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"operator\">=</span> ‘X李X’</span><br></pre></td></tr></table></figure></li>\n<li><p>如果在 <code>where</code> 子句中使用参数，也会导致全表扫描。因为 SQL 只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项，如下面语句将进行全表扫描：<code>select id from t where num=@num</code> 可以改为强制查询使用索引：<code>select id from t with(index(索引名)) where num=@num</code></p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描，如：</p>\n<p><code>select id from t where num/2=100</code> 应改为: <code>select id from t where num=100*2</code></p>\n</li>\n<li><p>应尽量避免在 <code>where</code> 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<code>select id from t where substring(name,1,3)=’abc’</code> ，<code>name</code> 以 <code>abc</code> 开头的 <code>id</code> 应改为:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> ‘abc<span class=\"operator\">%</span>’</span><br></pre></td></tr></table></figure></li>\n<li><p>不要在 <code>where</code> 子句中的 <code>=</code> 左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n</li>\n<li><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n</li>\n<li><p>很多时候用 <code>exists</code> 代替 <code>in</code> 是一个好的选择：<code>select num from a where num in(select num from b)</code> 用下面的语句替换： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure></li>\n<li><p>并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL 查询可能不会去利用索引，如一表中有字段 <code>sex</code>、<code>male</code>、<code>female</code> 几乎各一半，那么即使在 <code>sex</code> 上建了索引也对查询效率起不了作用。</p>\n</li>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 <code>select</code> 的效率，但同时也降低了 <code>insert</code> 及 <code>update</code> 的效率，因为 <code>insert</code> 或 <code>update</code> 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p>\n</li>\n<li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n</li>\n<li><p>尽可能的使用 <code>varchar/nvarchar</code> 代替 <code>char/nchar</code> ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n</li>\n<li><p>任何地方都不要使用 <code>select * from table</code> ，用具体的字段列表代替 <code>*</code> ，不要返回用不到的任何字段。</p>\n</li>\n<li><p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n</li>\n<li><p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n</li>\n<li><p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 <code>select into</code> 代替 <code>create table</code>，避免造成大量 <code>log</code> ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 <code>create table</code>，然后 <code>insert</code> 。</p>\n</li>\n<li><p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 <code>truncate table</code> ，然后 <code>drop table</code> ，这样可以避免系统表的较长时间锁定。</p>\n</li>\n<li><p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n</li>\n<li><p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n</li>\n<li><p>与临时表一样，游标并不是不可使 用。对小型数据集使用 <code>FAST_FORWARD</code> 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时；在结果集中包括“合计”的例程通常要比使用游标执行的速度快；如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n</li>\n<li><p>在所有的存储过程和触发器的开始处设置 <code>SET NOCOUNT ON</code> ，在结束时设置 <code>SET NOCOUNT OFF</code> ，无需在执行存储过程和触发器的每个语句后向客户端发送<code>DONE_IN_PROC</code> 消息。</p>\n</li>\n<li><p>尽量避免大事务操作，提高系统并发能力。</p>\n</li>\n<li><p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n</li>\n</ol>\n"},{"title":"MySQL基础-整数类型","abbrlink":1988337205,"_content":"\n整数类型又称数值型数据，数值型数据类型主要用来存储数字。\n\nMySQL 主要提供的整数类型有 tinyint、smallint、mediumint、int、bigint，其属性字段可以添加 AUTO_INCREMENT(auto_increment) 自增约束条件。\n\n| 类型名称      | 说明                                                | 存储需求                           |\n| ------------- | --------------------------------------------------- | ---------------------------------- |\n| TINYINT       | 很小的整数（-128〜127）                             | 1个字节（0 〜255）                 |\n| SMALLINT      | 小的整数（-32768〜32767）                           | 2个宇节（0〜65535）                |\n| MEDIUMINT     | 中等大小的整数（-8388608〜8388607）                 | 3个字节（0〜16777215）             |\n| INT (INTEGHR) | 普通大小的整数（-2147483648〜2147483647）           | 4个字节（0〜4294967295）           |\n| BIGINT        | 大整数（-9223372036854775808〜9223372036854775807） | 8个字节（0〜18446744073709551615） |","source":"_posts/Technology/MySQL/MySQL基础-整数类型.md","raw":"---\ntitle: MySQL基础-整数类型\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 1988337205\n---\n\n整数类型又称数值型数据，数值型数据类型主要用来存储数字。\n\nMySQL 主要提供的整数类型有 tinyint、smallint、mediumint、int、bigint，其属性字段可以添加 AUTO_INCREMENT(auto_increment) 自增约束条件。\n\n| 类型名称      | 说明                                                | 存储需求                           |\n| ------------- | --------------------------------------------------- | ---------------------------------- |\n| TINYINT       | 很小的整数（-128〜127）                             | 1个字节（0 〜255）                 |\n| SMALLINT      | 小的整数（-32768〜32767）                           | 2个宇节（0〜65535）                |\n| MEDIUMINT     | 中等大小的整数（-8388608〜8388607）                 | 3个字节（0〜16777215）             |\n| INT (INTEGHR) | 普通大小的整数（-2147483648〜2147483647）           | 4个字节（0〜4294967295）           |\n| BIGINT        | 大整数（-9223372036854775808〜9223372036854775807） | 8个字节（0〜18446744073709551615） |","slug":"Technology/MySQL/MySQL基础-整数类型","published":1,"date":"2021-04-16T13:45:36.677Z","updated":"2021-04-29T10:24:59.171Z","_id":"ckotdh5wr003dkw8z67hqbt0k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>整数类型又称数值型数据，数值型数据类型主要用来存储数字。</p>\n<p>MySQL 主要提供的整数类型有 tinyint、smallint、mediumint、int、bigint，其属性字段可以添加 AUTO_INCREMENT(auto_increment) 自增约束条件。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>很小的整数（-128〜127）</td>\n<td>1个字节（0 〜255）</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>小的整数（-32768〜32767）</td>\n<td>2个宇节（0〜65535）</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>中等大小的整数（-8388608〜8388607）</td>\n<td>3个字节（0〜16777215）</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>普通大小的整数（-2147483648〜2147483647）</td>\n<td>4个字节（0〜4294967295）</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>大整数（-9223372036854775808〜9223372036854775807）</td>\n<td>8个字节（0〜18446744073709551615）</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p>整数类型又称数值型数据，数值型数据类型主要用来存储数字。</p>\n<p>MySQL 主要提供的整数类型有 tinyint、smallint、mediumint、int、bigint，其属性字段可以添加 AUTO_INCREMENT(auto_increment) 自增约束条件。</p>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>很小的整数（-128〜127）</td>\n<td>1个字节（0 〜255）</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>小的整数（-32768〜32767）</td>\n<td>2个宇节（0〜65535）</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>中等大小的整数（-8388608〜8388607）</td>\n<td>3个字节（0〜16777215）</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>普通大小的整数（-2147483648〜2147483647）</td>\n<td>4个字节（0〜4294967295）</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>大整数（-9223372036854775808〜9223372036854775807）</td>\n<td>8个字节（0〜18446744073709551615）</td>\n</tr>\n</tbody></table>\n"},{"title":"MySQL常见问题","abbrlink":445316081,"_content":"\n## （一）死锁\n\n### 问题原因\n\n随着线上流量的变大，突然开始报如下异常，就是发生了死锁问题：\n\n```shell\nDeadlock found when trying to get lock; try restarting transaction ;\n```\n\n### 问题分析\n\n查询事务的隔离级别\n\n利用 `select @@tx_isolation` 命令获取到数据库隔离级别信息。\n\n![](https://cdn.dd-code.site/PicGo/20201110090224.png)\n\n查询数据库的死锁日志，利用 `show engine innodb status` 命令获取到如下死锁信息：\n\n![](https://cdn.dd-code.site/PicGo/20201110090308.png)\n\n![](https://cdn.dd-code.site/PicGo/20201110090320.png)\n\n由上可知，是由于两个事物对这条记录同时持有S锁(共享锁)的情况下，再次尝试获取该条记录的X锁(排它锁)，从而导致互相等待引发死锁\n\n### 获得结论\n\n分析获得产生问题的加锁时如下，然后修改代码以解决该问题。\n\n![](https://cdn.dd-code.site/PicGo/20201110090627.png)\n\n\n\n## （二）慢SQL\n\n### 问题出现\n\n应用的 TPS 下降，并出现 SQL 执行超时异常或者出现了类似如下的告警信息，则常常意味着出现了慢 SQL。\n\n![](https://cdn.dd-code.site/PicGo/20201110090851.png)\n\n### 问题分析\n\n分析执行计划：利用 `explain` 指令获得该 SQL 语句的执行计划，根据该执行计划，可能有两种场景。\n\n- SQL 不走索引或扫描行数过多等，导致执行时长过长\n- SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长\n\n#### 场景一（SQL 不走索引或扫描行数过多等，导致执行时长过长）的解决方案\n\n##### 优化SQL\n\n通过增加索引，调整 SQL 语句的方式优化执行时长，例如以下执行计划：\n\n![](https://cdn.dd-code.site/PicGo/20201110091527.png)\n\n该 SQL 的执行计划的 TYPE 为 ALL，同时根据以下 type 予以，可知无索引的全表查询，可以判断为其检索列增加索引可以解决。\n\n![](https://cdn.dd-code.site/PicGo/20201110091706.png)\n\n#### 场景二（SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案\n\n#### 查询当前事务情况\n\n可以通过查看如下 3 张表做相应的处理：\n\n```sql\n-- 当前运行的所有事务\nSELECT *  FROM information_schema.innodb_trx;\n-- 当前出现的锁\nSELECT * FROM information_schema.INNODB_LOCKS;\n-- 锁等待的对应关系\nSELECT *  FROM information_schema.INNODB_LOCK_WAITS;\n```\n\n###### （1）查看当前的事务有哪些：\n\n![](https://cdn.dd-code.site/PicGo/20201110092302.png)\n\n###### （2）查看事务锁类型索引的详细信息：\n\n![](https://cdn.dd-code.site/PicGo/20201110092351.png)\n\n`look_table` 字段能看到被锁的索引的表名，`lock_model` 可以看到锁类型是 `X` 锁，lock_type 可以看到是行锁 `record` 。\n\n#### 分析\n\n根据事务情况，得到表信息，和相关的事务时序信息：\n\n```sql\nDROP TABLE IF EXISTS `emp`;\nCREATE TABLE `emp` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`salary` int(10) DEFAULT NULL,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `idx_name` (`name`(191)) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4;\n```\n\nA 事务锁住一条记录，不提交，B 事务需要更新此条记录，此时会阻塞，如下图是执行顺序：\n\n![](https://cdn.dd-code.site/PicGo/20201110092720.png)\n\n#### 解决方案\n\n##### （一）修改方案\n\n由前一步的结果，分析事务间加锁时序，例如可以通过 `tx_query` 字段得知被阻塞的事务 SQL，`trx_state` 得知事务状态等，找到对应的代码逻辑，进行优化修改。\n\n##### （二）临时修改方案\n\n`trx_mysql_thread_id` 是对应的事务 `sessionId`，可以通过以下命令杀死上时间执行的命令，从而避免阻塞其他事务执行。\n\n```shell\nkill 105853\n```\n\n\n\n## （三）连接数过多\n\n### 问题出现\n\n常出现 `too many connections ` 异常，数据库连接到达最大连接数。\n\n### 解决方案\n\n解决方案\n\n- 通过 `set global max_connections=XXX` 增大最大连接数\n- 先利用 `show processlist` 获取连接信息，然后利用 kill 杀死过多的连接\n\n常用脚本如下\n\n```sql\n排序数据库连接的数目 \nmysql -h127.0.0.0.1 -uabc_test -pXXXXX -P3306 -A -e 'show processlist'| awk '{print $4}'|sort|uniq -c|sort -rn|head -10\n```\n\n","source":"_posts/Technology/MySQL/MySQL常见问题.md","raw":"---\ntitle: MySQL常见问题\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 445316081\n---\n\n## （一）死锁\n\n### 问题原因\n\n随着线上流量的变大，突然开始报如下异常，就是发生了死锁问题：\n\n```shell\nDeadlock found when trying to get lock; try restarting transaction ;\n```\n\n### 问题分析\n\n查询事务的隔离级别\n\n利用 `select @@tx_isolation` 命令获取到数据库隔离级别信息。\n\n![](https://cdn.dd-code.site/PicGo/20201110090224.png)\n\n查询数据库的死锁日志，利用 `show engine innodb status` 命令获取到如下死锁信息：\n\n![](https://cdn.dd-code.site/PicGo/20201110090308.png)\n\n![](https://cdn.dd-code.site/PicGo/20201110090320.png)\n\n由上可知，是由于两个事物对这条记录同时持有S锁(共享锁)的情况下，再次尝试获取该条记录的X锁(排它锁)，从而导致互相等待引发死锁\n\n### 获得结论\n\n分析获得产生问题的加锁时如下，然后修改代码以解决该问题。\n\n![](https://cdn.dd-code.site/PicGo/20201110090627.png)\n\n\n\n## （二）慢SQL\n\n### 问题出现\n\n应用的 TPS 下降，并出现 SQL 执行超时异常或者出现了类似如下的告警信息，则常常意味着出现了慢 SQL。\n\n![](https://cdn.dd-code.site/PicGo/20201110090851.png)\n\n### 问题分析\n\n分析执行计划：利用 `explain` 指令获得该 SQL 语句的执行计划，根据该执行计划，可能有两种场景。\n\n- SQL 不走索引或扫描行数过多等，导致执行时长过长\n- SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长\n\n#### 场景一（SQL 不走索引或扫描行数过多等，导致执行时长过长）的解决方案\n\n##### 优化SQL\n\n通过增加索引，调整 SQL 语句的方式优化执行时长，例如以下执行计划：\n\n![](https://cdn.dd-code.site/PicGo/20201110091527.png)\n\n该 SQL 的执行计划的 TYPE 为 ALL，同时根据以下 type 予以，可知无索引的全表查询，可以判断为其检索列增加索引可以解决。\n\n![](https://cdn.dd-code.site/PicGo/20201110091706.png)\n\n#### 场景二（SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案\n\n#### 查询当前事务情况\n\n可以通过查看如下 3 张表做相应的处理：\n\n```sql\n-- 当前运行的所有事务\nSELECT *  FROM information_schema.innodb_trx;\n-- 当前出现的锁\nSELECT * FROM information_schema.INNODB_LOCKS;\n-- 锁等待的对应关系\nSELECT *  FROM information_schema.INNODB_LOCK_WAITS;\n```\n\n###### （1）查看当前的事务有哪些：\n\n![](https://cdn.dd-code.site/PicGo/20201110092302.png)\n\n###### （2）查看事务锁类型索引的详细信息：\n\n![](https://cdn.dd-code.site/PicGo/20201110092351.png)\n\n`look_table` 字段能看到被锁的索引的表名，`lock_model` 可以看到锁类型是 `X` 锁，lock_type 可以看到是行锁 `record` 。\n\n#### 分析\n\n根据事务情况，得到表信息，和相关的事务时序信息：\n\n```sql\nDROP TABLE IF EXISTS `emp`;\nCREATE TABLE `emp` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`salary` int(10) DEFAULT NULL,\n`name` varchar(255) DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `idx_name` (`name`(191)) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4;\n```\n\nA 事务锁住一条记录，不提交，B 事务需要更新此条记录，此时会阻塞，如下图是执行顺序：\n\n![](https://cdn.dd-code.site/PicGo/20201110092720.png)\n\n#### 解决方案\n\n##### （一）修改方案\n\n由前一步的结果，分析事务间加锁时序，例如可以通过 `tx_query` 字段得知被阻塞的事务 SQL，`trx_state` 得知事务状态等，找到对应的代码逻辑，进行优化修改。\n\n##### （二）临时修改方案\n\n`trx_mysql_thread_id` 是对应的事务 `sessionId`，可以通过以下命令杀死上时间执行的命令，从而避免阻塞其他事务执行。\n\n```shell\nkill 105853\n```\n\n\n\n## （三）连接数过多\n\n### 问题出现\n\n常出现 `too many connections ` 异常，数据库连接到达最大连接数。\n\n### 解决方案\n\n解决方案\n\n- 通过 `set global max_connections=XXX` 增大最大连接数\n- 先利用 `show processlist` 获取连接信息，然后利用 kill 杀死过多的连接\n\n常用脚本如下\n\n```sql\n排序数据库连接的数目 \nmysql -h127.0.0.0.1 -uabc_test -pXXXXX -P3306 -A -e 'show processlist'| awk '{print $4}'|sort|uniq -c|sort -rn|head -10\n```\n\n","slug":"Technology/MySQL/MySQL常见问题","published":1,"date":"2021-04-16T13:45:36.690Z","updated":"2021-04-29T10:24:59.175Z","_id":"ckotdh5ws003gkw8zbeve42og","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"（一）死锁\"><a href=\"#（一）死锁\" class=\"headerlink\" title=\"（一）死锁\"></a>（一）死锁</h2><h3 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h3><p>随着线上流量的变大，突然开始报如下异常，就是发生了死锁问题：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deadlock found when trying to get lock; try restarting transaction ;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>查询事务的隔离级别</p>\n<p>利用 <code>select @@tx_isolation</code> 命令获取到数据库隔离级别信息。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090224.png\"></p>\n<p>查询数据库的死锁日志，利用 <code>show engine innodb status</code> 命令获取到如下死锁信息：</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090308.png\"></p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090320.png\"></p>\n<p>由上可知，是由于两个事物对这条记录同时持有S锁(共享锁)的情况下，再次尝试获取该条记录的X锁(排它锁)，从而导致互相等待引发死锁</p>\n<h3 id=\"获得结论\"><a href=\"#获得结论\" class=\"headerlink\" title=\"获得结论\"></a>获得结论</h3><p>分析获得产生问题的加锁时如下，然后修改代码以解决该问题。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090627.png\"></p>\n<h2 id=\"（二）慢SQL\"><a href=\"#（二）慢SQL\" class=\"headerlink\" title=\"（二）慢SQL\"></a>（二）慢SQL</h2><h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>应用的 TPS 下降，并出现 SQL 执行超时异常或者出现了类似如下的告警信息，则常常意味着出现了慢 SQL。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090851.png\"></p>\n<h3 id=\"问题分析-1\"><a href=\"#问题分析-1\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>分析执行计划：利用 <code>explain</code> 指令获得该 SQL 语句的执行计划，根据该执行计划，可能有两种场景。</p>\n<ul>\n<li>SQL 不走索引或扫描行数过多等，导致执行时长过长</li>\n<li>SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长</li>\n</ul>\n<h4 id=\"场景一（SQL-不走索引或扫描行数过多等，导致执行时长过长）的解决方案\"><a href=\"#场景一（SQL-不走索引或扫描行数过多等，导致执行时长过长）的解决方案\" class=\"headerlink\" title=\"场景一（SQL 不走索引或扫描行数过多等，导致执行时长过长）的解决方案\"></a>场景一（SQL 不走索引或扫描行数过多等，导致执行时长过长）的解决方案</h4><h5 id=\"优化SQL\"><a href=\"#优化SQL\" class=\"headerlink\" title=\"优化SQL\"></a>优化SQL</h5><p>通过增加索引，调整 SQL 语句的方式优化执行时长，例如以下执行计划：</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110091527.png\"></p>\n<p>该 SQL 的执行计划的 TYPE 为 ALL，同时根据以下 type 予以，可知无索引的全表查询，可以判断为其检索列增加索引可以解决。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110091706.png\"></p>\n<h4 id=\"场景二（SQL-没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案\"><a href=\"#场景二（SQL-没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案\" class=\"headerlink\" title=\"场景二（SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案\"></a>场景二（SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案</h4><h4 id=\"查询当前事务情况\"><a href=\"#查询当前事务情况\" class=\"headerlink\" title=\"查询当前事务情况\"></a>查询当前事务情况</h4><p>可以通过查看如下 3 张表做相应的处理：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 当前运行的所有事务</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span>  <span class=\"keyword\">FROM</span> information_schema.innodb_trx;</span><br><span class=\"line\"><span class=\"comment\">-- 当前出现的锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> information_schema.INNODB_LOCKS;</span><br><span class=\"line\"><span class=\"comment\">-- 锁等待的对应关系</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span>  <span class=\"keyword\">FROM</span> information_schema.INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（1）查看当前的事务有哪些：\"><a href=\"#（1）查看当前的事务有哪些：\" class=\"headerlink\" title=\"（1）查看当前的事务有哪些：\"></a>（1）查看当前的事务有哪些：</h6><p><img src=\"https://cdn.dd-code.site/PicGo/20201110092302.png\"></p>\n<h6 id=\"（2）查看事务锁类型索引的详细信息：\"><a href=\"#（2）查看事务锁类型索引的详细信息：\" class=\"headerlink\" title=\"（2）查看事务锁类型索引的详细信息：\"></a>（2）查看事务锁类型索引的详细信息：</h6><p><img src=\"https://cdn.dd-code.site/PicGo/20201110092351.png\"></p>\n<p><code>look_table</code> 字段能看到被锁的索引的表名，<code>lock_model</code> 可以看到锁类型是 <code>X</code> 锁，lock_type 可以看到是行锁 <code>record</code> 。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>根据事务情况，得到表信息，和相关的事务时序信息：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `emp`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `emp` (</span><br><span class=\"line\">`id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">`salary` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">`name` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`id`),</span><br><span class=\"line\">KEY `idx_name` (`name`(<span class=\"number\">191</span>)) <span class=\"keyword\">USING</span> BTREE</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">6</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>\n\n<p>A 事务锁住一条记录，不提交，B 事务需要更新此条记录，此时会阻塞，如下图是执行顺序：</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110092720.png\"></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><h5 id=\"（一）修改方案\"><a href=\"#（一）修改方案\" class=\"headerlink\" title=\"（一）修改方案\"></a>（一）修改方案</h5><p>由前一步的结果，分析事务间加锁时序，例如可以通过 <code>tx_query</code> 字段得知被阻塞的事务 SQL，<code>trx_state</code> 得知事务状态等，找到对应的代码逻辑，进行优化修改。</p>\n<h5 id=\"（二）临时修改方案\"><a href=\"#（二）临时修改方案\" class=\"headerlink\" title=\"（二）临时修改方案\"></a>（二）临时修改方案</h5><p><code>trx_mysql_thread_id</code> 是对应的事务 <code>sessionId</code>，可以通过以下命令杀死上时间执行的命令，从而避免阻塞其他事务执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill 105853</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"（三）连接数过多\"><a href=\"#（三）连接数过多\" class=\"headerlink\" title=\"（三）连接数过多\"></a>（三）连接数过多</h2><h3 id=\"问题出现-1\"><a href=\"#问题出现-1\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>常出现 <code>too many connections </code> 异常，数据库连接到达最大连接数。</p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决方案</p>\n<ul>\n<li>通过 <code>set global max_connections=XXX</code> 增大最大连接数</li>\n<li>先利用 <code>show processlist</code> 获取连接信息，然后利用 kill 杀死过多的连接</li>\n</ul>\n<p>常用脚本如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">排序数据库连接的数目 </span><br><span class=\"line\">mysql <span class=\"operator\">-</span>h127<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"operator\">-</span>uabc_test <span class=\"operator\">-</span>pXXXXX <span class=\"operator\">-</span>P3306 <span class=\"operator\">-</span>A <span class=\"operator\">-</span>e <span class=\"string\">&#x27;show processlist&#x27;</span><span class=\"operator\">|</span> awk <span class=\"string\">&#x27;&#123;print $4&#125;&#x27;</span><span class=\"operator\">|</span>sort<span class=\"operator\">|</span>uniq <span class=\"operator\">-</span>c<span class=\"operator\">|</span>sort <span class=\"operator\">-</span>rn<span class=\"operator\">|</span>head <span class=\"number\">-10</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"（一）死锁\"><a href=\"#（一）死锁\" class=\"headerlink\" title=\"（一）死锁\"></a>（一）死锁</h2><h3 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h3><p>随着线上流量的变大，突然开始报如下异常，就是发生了死锁问题：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deadlock found when trying to get lock; try restarting transaction ;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>查询事务的隔离级别</p>\n<p>利用 <code>select @@tx_isolation</code> 命令获取到数据库隔离级别信息。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090224.png\"></p>\n<p>查询数据库的死锁日志，利用 <code>show engine innodb status</code> 命令获取到如下死锁信息：</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090308.png\"></p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090320.png\"></p>\n<p>由上可知，是由于两个事物对这条记录同时持有S锁(共享锁)的情况下，再次尝试获取该条记录的X锁(排它锁)，从而导致互相等待引发死锁</p>\n<h3 id=\"获得结论\"><a href=\"#获得结论\" class=\"headerlink\" title=\"获得结论\"></a>获得结论</h3><p>分析获得产生问题的加锁时如下，然后修改代码以解决该问题。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090627.png\"></p>\n<h2 id=\"（二）慢SQL\"><a href=\"#（二）慢SQL\" class=\"headerlink\" title=\"（二）慢SQL\"></a>（二）慢SQL</h2><h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>应用的 TPS 下降，并出现 SQL 执行超时异常或者出现了类似如下的告警信息，则常常意味着出现了慢 SQL。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110090851.png\"></p>\n<h3 id=\"问题分析-1\"><a href=\"#问题分析-1\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>分析执行计划：利用 <code>explain</code> 指令获得该 SQL 语句的执行计划，根据该执行计划，可能有两种场景。</p>\n<ul>\n<li>SQL 不走索引或扫描行数过多等，导致执行时长过长</li>\n<li>SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长</li>\n</ul>\n<h4 id=\"场景一（SQL-不走索引或扫描行数过多等，导致执行时长过长）的解决方案\"><a href=\"#场景一（SQL-不走索引或扫描行数过多等，导致执行时长过长）的解决方案\" class=\"headerlink\" title=\"场景一（SQL 不走索引或扫描行数过多等，导致执行时长过长）的解决方案\"></a>场景一（SQL 不走索引或扫描行数过多等，导致执行时长过长）的解决方案</h4><h5 id=\"优化SQL\"><a href=\"#优化SQL\" class=\"headerlink\" title=\"优化SQL\"></a>优化SQL</h5><p>通过增加索引，调整 SQL 语句的方式优化执行时长，例如以下执行计划：</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110091527.png\"></p>\n<p>该 SQL 的执行计划的 TYPE 为 ALL，同时根据以下 type 予以，可知无索引的全表查询，可以判断为其检索列增加索引可以解决。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110091706.png\"></p>\n<h4 id=\"场景二（SQL-没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案\"><a href=\"#场景二（SQL-没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案\" class=\"headerlink\" title=\"场景二（SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案\"></a>场景二（SQL 没问题，只是因为事务并发导致等待锁，导致执行时长过长）的解决方案</h4><h4 id=\"查询当前事务情况\"><a href=\"#查询当前事务情况\" class=\"headerlink\" title=\"查询当前事务情况\"></a>查询当前事务情况</h4><p>可以通过查看如下 3 张表做相应的处理：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 当前运行的所有事务</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span>  <span class=\"keyword\">FROM</span> information_schema.innodb_trx;</span><br><span class=\"line\"><span class=\"comment\">-- 当前出现的锁</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> information_schema.INNODB_LOCKS;</span><br><span class=\"line\"><span class=\"comment\">-- 锁等待的对应关系</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span>  <span class=\"keyword\">FROM</span> information_schema.INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（1）查看当前的事务有哪些：\"><a href=\"#（1）查看当前的事务有哪些：\" class=\"headerlink\" title=\"（1）查看当前的事务有哪些：\"></a>（1）查看当前的事务有哪些：</h6><p><img src=\"https://cdn.dd-code.site/PicGo/20201110092302.png\"></p>\n<h6 id=\"（2）查看事务锁类型索引的详细信息：\"><a href=\"#（2）查看事务锁类型索引的详细信息：\" class=\"headerlink\" title=\"（2）查看事务锁类型索引的详细信息：\"></a>（2）查看事务锁类型索引的详细信息：</h6><p><img src=\"https://cdn.dd-code.site/PicGo/20201110092351.png\"></p>\n<p><code>look_table</code> 字段能看到被锁的索引的表名，<code>lock_model</code> 可以看到锁类型是 <code>X</code> 锁，lock_type 可以看到是行锁 <code>record</code> 。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>根据事务情况，得到表信息，和相关的事务时序信息：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `emp`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `emp` (</span><br><span class=\"line\">`id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">`salary` <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">`name` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`id`),</span><br><span class=\"line\">KEY `idx_name` (`name`(<span class=\"number\">191</span>)) <span class=\"keyword\">USING</span> BTREE</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">6</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>\n\n<p>A 事务锁住一条记录，不提交，B 事务需要更新此条记录，此时会阻塞，如下图是执行顺序：</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110092720.png\"></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><h5 id=\"（一）修改方案\"><a href=\"#（一）修改方案\" class=\"headerlink\" title=\"（一）修改方案\"></a>（一）修改方案</h5><p>由前一步的结果，分析事务间加锁时序，例如可以通过 <code>tx_query</code> 字段得知被阻塞的事务 SQL，<code>trx_state</code> 得知事务状态等，找到对应的代码逻辑，进行优化修改。</p>\n<h5 id=\"（二）临时修改方案\"><a href=\"#（二）临时修改方案\" class=\"headerlink\" title=\"（二）临时修改方案\"></a>（二）临时修改方案</h5><p><code>trx_mysql_thread_id</code> 是对应的事务 <code>sessionId</code>，可以通过以下命令杀死上时间执行的命令，从而避免阻塞其他事务执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill 105853</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"（三）连接数过多\"><a href=\"#（三）连接数过多\" class=\"headerlink\" title=\"（三）连接数过多\"></a>（三）连接数过多</h2><h3 id=\"问题出现-1\"><a href=\"#问题出现-1\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>常出现 <code>too many connections </code> 异常，数据库连接到达最大连接数。</p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决方案</p>\n<ul>\n<li>通过 <code>set global max_connections=XXX</code> 增大最大连接数</li>\n<li>先利用 <code>show processlist</code> 获取连接信息，然后利用 kill 杀死过多的连接</li>\n</ul>\n<p>常用脚本如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">排序数据库连接的数目 </span><br><span class=\"line\">mysql <span class=\"operator\">-</span>h127<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"operator\">-</span>uabc_test <span class=\"operator\">-</span>pXXXXX <span class=\"operator\">-</span>P3306 <span class=\"operator\">-</span>A <span class=\"operator\">-</span>e <span class=\"string\">&#x27;show processlist&#x27;</span><span class=\"operator\">|</span> awk <span class=\"string\">&#x27;&#123;print $4&#125;&#x27;</span><span class=\"operator\">|</span>sort<span class=\"operator\">|</span>uniq <span class=\"operator\">-</span>c<span class=\"operator\">|</span>sort <span class=\"operator\">-</span>rn<span class=\"operator\">|</span>head <span class=\"number\">-10</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL查询重复的数据","abbrlink":961775144,"_content":"\n查询字段 fund_id 重复的数据\n\n```mysql\nSELECT * FROM fund a WHERE (a.fund_id) IN (\nSELECT fund_id FROM fund GROUP BY fund_id HAVING count(*)> 1);\n```\n\n\n","source":"_posts/Technology/MySQL/MySQL查询重复的数据.md","raw":"---\ntitle: MySQL查询重复的数据\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 961775144\n---\n\n查询字段 fund_id 重复的数据\n\n```mysql\nSELECT * FROM fund a WHERE (a.fund_id) IN (\nSELECT fund_id FROM fund GROUP BY fund_id HAVING count(*)> 1);\n```\n\n\n","slug":"Technology/MySQL/MySQL查询重复的数据","published":1,"date":"2021-04-16T13:45:36.661Z","updated":"2021-04-29T10:24:59.176Z","_id":"ckotdh5wt003hkw8z9adw5oi2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查询字段 fund_id 重复的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM fund a WHERE (a.fund_id) IN (</span><br><span class=\"line\">SELECT fund_id FROM fund GROUP BY fund_id HAVING count(*)&gt; 1);</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>查询字段 fund_id 重复的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM fund a WHERE (a.fund_id) IN (</span><br><span class=\"line\">SELECT fund_id FROM fund GROUP BY fund_id HAVING count(*)&gt; 1);</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"MySQL索引和存储引擎","abbrlink":70487411,"_content":"\n## 索引\n\n### MySQL 不同的存储引擎\n\n![](https://cdn.dd-code.site/PicGo/20201110143846.png)\n\n### InnoDB B+Tree 索引实现\n\n主键索引（聚集索引）：\n\n- 叶子节点 `data` 域保存了完整的数据的地址\n- 主键和数据完全存在一棵树上\n- Root 节点常驻内存\n- 每个非叶子节点一个 `innodb_page_size` 大小，加速磁盘 `IO`\n- 磁盘的 `IO` 要比内存慢几百倍，而磁盘慢的原因在于机械设备寻找磁盘慢，因此采用磁盘预读，每次读取一个磁盘页（计算机管理存储器的逻辑快-通常为4k）的整倍数\n- 如果没有主键，MySQL 默认生成隐含字段作为主键，这个字段长度为 6 个字节，类型为长整形\n- 辅助索引结构和主索引相同，但叶子节点 `data` 域保存的是主键指针\n- InnnoDB 以表空间 Tablespace（idb文件）结构进行组织，每个 Tbalespace 包含多个 Segment 段\n- 每个段（分为2种段：叶子节点 Segment & 非叶子节点 Segment），一个 Segment 段包含多个 Extent\n- 一个 Extent 占用 1M 空间包含 64 个 Page（每个Page 16k），InnoDB 的 B-Tree 一个逻辑节点就分配一个物理 Page，一个节点一次 IO 操作\n-  一个 Page 里包含很多有序数据 Row 行数据，Row 行数据中包含 Filed 属性数据等信息\n\nInnoDB 存储引擎中页的大小为 16KB，一般表的主键类型为 INT（占用4个字节）或 BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的节点）中大概存储 16KB/(8B+8B)=1k个键值（因为是估值，为方便计算，这里的K的取值为[10]^3）.\n\n也就是说一个深度为 3 的 `B+Tree` 索引可以维护 `10^3 * 10^3 * 10^3=10` 亿条记录。\n\n![](https://cdn.dd-code.site/PicGo/20201110150352.png)\n\n每个索引的左指针都是比自己小的 索引/节点，右指针是大于自己的 索引/节点。","source":"_posts/Technology/MySQL/MySQL索引和存储引擎.md","raw":"---\ntitle: MySQL索引和存储引擎\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 70487411\n---\n\n## 索引\n\n### MySQL 不同的存储引擎\n\n![](https://cdn.dd-code.site/PicGo/20201110143846.png)\n\n### InnoDB B+Tree 索引实现\n\n主键索引（聚集索引）：\n\n- 叶子节点 `data` 域保存了完整的数据的地址\n- 主键和数据完全存在一棵树上\n- Root 节点常驻内存\n- 每个非叶子节点一个 `innodb_page_size` 大小，加速磁盘 `IO`\n- 磁盘的 `IO` 要比内存慢几百倍，而磁盘慢的原因在于机械设备寻找磁盘慢，因此采用磁盘预读，每次读取一个磁盘页（计算机管理存储器的逻辑快-通常为4k）的整倍数\n- 如果没有主键，MySQL 默认生成隐含字段作为主键，这个字段长度为 6 个字节，类型为长整形\n- 辅助索引结构和主索引相同，但叶子节点 `data` 域保存的是主键指针\n- InnnoDB 以表空间 Tablespace（idb文件）结构进行组织，每个 Tbalespace 包含多个 Segment 段\n- 每个段（分为2种段：叶子节点 Segment & 非叶子节点 Segment），一个 Segment 段包含多个 Extent\n- 一个 Extent 占用 1M 空间包含 64 个 Page（每个Page 16k），InnoDB 的 B-Tree 一个逻辑节点就分配一个物理 Page，一个节点一次 IO 操作\n-  一个 Page 里包含很多有序数据 Row 行数据，Row 行数据中包含 Filed 属性数据等信息\n\nInnoDB 存储引擎中页的大小为 16KB，一般表的主键类型为 INT（占用4个字节）或 BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的节点）中大概存储 16KB/(8B+8B)=1k个键值（因为是估值，为方便计算，这里的K的取值为[10]^3）.\n\n也就是说一个深度为 3 的 `B+Tree` 索引可以维护 `10^3 * 10^3 * 10^3=10` 亿条记录。\n\n![](https://cdn.dd-code.site/PicGo/20201110150352.png)\n\n每个索引的左指针都是比自己小的 索引/节点，右指针是大于自己的 索引/节点。","slug":"Technology/MySQL/MySQL索引和存储引擎","published":1,"date":"2021-04-16T13:45:36.712Z","updated":"2021-04-29T10:24:59.184Z","_id":"ckotdh5wu003jkw8z9sgt9tvw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"MySQL-不同的存储引擎\"><a href=\"#MySQL-不同的存储引擎\" class=\"headerlink\" title=\"MySQL 不同的存储引擎\"></a>MySQL 不同的存储引擎</h3><p><img src=\"https://cdn.dd-code.site/PicGo/20201110143846.png\"></p>\n<h3 id=\"InnoDB-B-Tree-索引实现\"><a href=\"#InnoDB-B-Tree-索引实现\" class=\"headerlink\" title=\"InnoDB B+Tree 索引实现\"></a>InnoDB B+Tree 索引实现</h3><p>主键索引（聚集索引）：</p>\n<ul>\n<li>叶子节点 <code>data</code> 域保存了完整的数据的地址</li>\n<li>主键和数据完全存在一棵树上</li>\n<li>Root 节点常驻内存</li>\n<li>每个非叶子节点一个 <code>innodb_page_size</code> 大小，加速磁盘 <code>IO</code></li>\n<li>磁盘的 <code>IO</code> 要比内存慢几百倍，而磁盘慢的原因在于机械设备寻找磁盘慢，因此采用磁盘预读，每次读取一个磁盘页（计算机管理存储器的逻辑快-通常为4k）的整倍数</li>\n<li>如果没有主键，MySQL 默认生成隐含字段作为主键，这个字段长度为 6 个字节，类型为长整形</li>\n<li>辅助索引结构和主索引相同，但叶子节点 <code>data</code> 域保存的是主键指针</li>\n<li>InnnoDB 以表空间 Tablespace（idb文件）结构进行组织，每个 Tbalespace 包含多个 Segment 段</li>\n<li>每个段（分为2种段：叶子节点 Segment &amp; 非叶子节点 Segment），一个 Segment 段包含多个 Extent</li>\n<li>一个 Extent 占用 1M 空间包含 64 个 Page（每个Page 16k），InnoDB 的 B-Tree 一个逻辑节点就分配一个物理 Page，一个节点一次 IO 操作</li>\n<li> 一个 Page 里包含很多有序数据 Row 行数据，Row 行数据中包含 Filed 属性数据等信息</li>\n</ul>\n<p>InnoDB 存储引擎中页的大小为 16KB，一般表的主键类型为 INT（占用4个字节）或 BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的节点）中大概存储 16KB/(8B+8B)=1k个键值（因为是估值，为方便计算，这里的K的取值为[10]^3）.</p>\n<p>也就是说一个深度为 3 的 <code>B+Tree</code> 索引可以维护 <code>10^3 * 10^3 * 10^3=10</code> 亿条记录。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110150352.png\"></p>\n<p>每个索引的左指针都是比自己小的 索引/节点，右指针是大于自己的 索引/节点。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"MySQL-不同的存储引擎\"><a href=\"#MySQL-不同的存储引擎\" class=\"headerlink\" title=\"MySQL 不同的存储引擎\"></a>MySQL 不同的存储引擎</h3><p><img src=\"https://cdn.dd-code.site/PicGo/20201110143846.png\"></p>\n<h3 id=\"InnoDB-B-Tree-索引实现\"><a href=\"#InnoDB-B-Tree-索引实现\" class=\"headerlink\" title=\"InnoDB B+Tree 索引实现\"></a>InnoDB B+Tree 索引实现</h3><p>主键索引（聚集索引）：</p>\n<ul>\n<li>叶子节点 <code>data</code> 域保存了完整的数据的地址</li>\n<li>主键和数据完全存在一棵树上</li>\n<li>Root 节点常驻内存</li>\n<li>每个非叶子节点一个 <code>innodb_page_size</code> 大小，加速磁盘 <code>IO</code></li>\n<li>磁盘的 <code>IO</code> 要比内存慢几百倍，而磁盘慢的原因在于机械设备寻找磁盘慢，因此采用磁盘预读，每次读取一个磁盘页（计算机管理存储器的逻辑快-通常为4k）的整倍数</li>\n<li>如果没有主键，MySQL 默认生成隐含字段作为主键，这个字段长度为 6 个字节，类型为长整形</li>\n<li>辅助索引结构和主索引相同，但叶子节点 <code>data</code> 域保存的是主键指针</li>\n<li>InnnoDB 以表空间 Tablespace（idb文件）结构进行组织，每个 Tbalespace 包含多个 Segment 段</li>\n<li>每个段（分为2种段：叶子节点 Segment &amp; 非叶子节点 Segment），一个 Segment 段包含多个 Extent</li>\n<li>一个 Extent 占用 1M 空间包含 64 个 Page（每个Page 16k），InnoDB 的 B-Tree 一个逻辑节点就分配一个物理 Page，一个节点一次 IO 操作</li>\n<li> 一个 Page 里包含很多有序数据 Row 行数据，Row 行数据中包含 Filed 属性数据等信息</li>\n</ul>\n<p>InnoDB 存储引擎中页的大小为 16KB，一般表的主键类型为 INT（占用4个字节）或 BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的节点）中大概存储 16KB/(8B+8B)=1k个键值（因为是估值，为方便计算，这里的K的取值为[10]^3）.</p>\n<p>也就是说一个深度为 3 的 <code>B+Tree</code> 索引可以维护 <code>10^3 * 10^3 * 10^3=10</code> 亿条记录。</p>\n<p><img src=\"https://cdn.dd-code.site/PicGo/20201110150352.png\"></p>\n<p>每个索引的左指针都是比自己小的 索引/节点，右指针是大于自己的 索引/节点。</p>\n"},{"title":"MySQL索引失效情况","abbrlink":548465112,"_content":"\n首先，复习一下索引的创建：\n\n普通的索引的创建\n\n```sql\nCREATE INDEX (自定义)索引名 ON 数据表(字段)\n```\n\n复合索引的创建\n\n```sql\nCREATE INDEX (自定义)索引名 ON 数据表(字段，字段，。。。)\n```\n\n删除索引\n\n```sql\nDROP INDEX 索引名\n```\n\n以下通过 explain 显示出 mysql 执行的字段内容：\n\n- id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.\n- select_type: SELECT 查询的类型.\n- table: 查询的是哪个表\n- partitions: 匹配的分区\n- type: join 类型\n- possible_keys: 此次查询中可能选用的索引\n- key: 此次查询中确切使用到的索引\n- ref: 哪个字段或常数与 key 一起被使用\n- rows: 显示此查询一共扫描了多少行. 这个是一个估计值.\n- filtered: 表示此查询条件所过滤的数据的百分比\n- extra: 额外的信息\n\n \n\n索引查询失效的几个情况：\n\n1、like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效。\n\n2、or语句前后没有同时使用索引。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效\n\n3、组合索引，不是使用第一列索引，索引失效\n\n4、数据类型出现隐式转化。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。\n\n5、在索引列上使用 IS NULL 或 IS NOT NULL操作。索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可。\n\n6、在索引字段上使用not，<>，!=。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： key<>0 改为 key>0 or key<0。\n\n7、对索引字段进行计算操作、字段上使用函数。（索引为 emp(ename,empno,sal)）\n\n8、当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效。\n\n\n\n索引失效分析工具：\n\n可以使用 explain 命令加在要分析的 sql 语句前面，在执行结果中查看 key 这一列的值，如果为 NULL，说明没有使用索引。\n\nexplain 命令的详细用法，可以查看这篇文章：https://segmentfault.com/a/1190000008131735","source":"_posts/Technology/MySQL/MySQL索引失效情况.md","raw":"---\ntitle: MySQL索引失效情况\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 548465112\n---\n\n首先，复习一下索引的创建：\n\n普通的索引的创建\n\n```sql\nCREATE INDEX (自定义)索引名 ON 数据表(字段)\n```\n\n复合索引的创建\n\n```sql\nCREATE INDEX (自定义)索引名 ON 数据表(字段，字段，。。。)\n```\n\n删除索引\n\n```sql\nDROP INDEX 索引名\n```\n\n以下通过 explain 显示出 mysql 执行的字段内容：\n\n- id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.\n- select_type: SELECT 查询的类型.\n- table: 查询的是哪个表\n- partitions: 匹配的分区\n- type: join 类型\n- possible_keys: 此次查询中可能选用的索引\n- key: 此次查询中确切使用到的索引\n- ref: 哪个字段或常数与 key 一起被使用\n- rows: 显示此查询一共扫描了多少行. 这个是一个估计值.\n- filtered: 表示此查询条件所过滤的数据的百分比\n- extra: 额外的信息\n\n \n\n索引查询失效的几个情况：\n\n1、like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效。\n\n2、or语句前后没有同时使用索引。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效\n\n3、组合索引，不是使用第一列索引，索引失效\n\n4、数据类型出现隐式转化。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。\n\n5、在索引列上使用 IS NULL 或 IS NOT NULL操作。索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可。\n\n6、在索引字段上使用not，<>，!=。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： key<>0 改为 key>0 or key<0。\n\n7、对索引字段进行计算操作、字段上使用函数。（索引为 emp(ename,empno,sal)）\n\n8、当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效。\n\n\n\n索引失效分析工具：\n\n可以使用 explain 命令加在要分析的 sql 语句前面，在执行结果中查看 key 这一列的值，如果为 NULL，说明没有使用索引。\n\nexplain 命令的详细用法，可以查看这篇文章：https://segmentfault.com/a/1190000008131735","slug":"Technology/MySQL/MySQL索引失效情况","published":1,"date":"2021-04-16T13:45:54.014Z","updated":"2021-04-29T10:24:59.254Z","_id":"ckotdh5wv003kkw8zeebg4rwy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>首先，复习一下索引的创建：</p>\n<p>普通的索引的创建</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX (自定义)索引名 <span class=\"keyword\">ON</span> 数据表(字段)</span><br></pre></td></tr></table></figure>\n\n<p>复合索引的创建</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX (自定义)索引名 <span class=\"keyword\">ON</span> 数据表(字段，字段，。。。)</span><br></pre></td></tr></table></figure>\n\n<p>删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX 索引名</span><br></pre></td></tr></table></figure>\n\n<p>以下通过 explain 显示出 mysql 执行的字段内容：</p>\n<ul>\n<li>id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.</li>\n<li>select_type: SELECT 查询的类型.</li>\n<li>table: 查询的是哪个表</li>\n<li>partitions: 匹配的分区</li>\n<li>type: join 类型</li>\n<li>possible_keys: 此次查询中可能选用的索引</li>\n<li>key: 此次查询中确切使用到的索引</li>\n<li>ref: 哪个字段或常数与 key 一起被使用</li>\n<li>rows: 显示此查询一共扫描了多少行. 这个是一个估计值.</li>\n<li>filtered: 表示此查询条件所过滤的数据的百分比</li>\n<li>extra: 额外的信息</li>\n</ul>\n<p>索引查询失效的几个情况：</p>\n<p>1、like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效。</p>\n<p>2、or语句前后没有同时使用索引。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效</p>\n<p>3、组合索引，不是使用第一列索引，索引失效</p>\n<p>4、数据类型出现隐式转化。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。</p>\n<p>5、在索引列上使用 IS NULL 或 IS NOT NULL操作。索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可。</p>\n<p>6、在索引字段上使用not，&lt;&gt;，!=。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： key&lt;&gt;0 改为 key&gt;0 or key&lt;0。</p>\n<p>7、对索引字段进行计算操作、字段上使用函数。（索引为 emp(ename,empno,sal)）</p>\n<p>8、当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效。</p>\n<p>索引失效分析工具：</p>\n<p>可以使用 explain 命令加在要分析的 sql 语句前面，在执行结果中查看 key 这一列的值，如果为 NULL，说明没有使用索引。</p>\n<p>explain 命令的详细用法，可以查看这篇文章：<a href=\"https://segmentfault.com/a/1190000008131735\">https://segmentfault.com/a/1190000008131735</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，复习一下索引的创建：</p>\n<p>普通的索引的创建</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX (自定义)索引名 <span class=\"keyword\">ON</span> 数据表(字段)</span><br></pre></td></tr></table></figure>\n\n<p>复合索引的创建</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX (自定义)索引名 <span class=\"keyword\">ON</span> 数据表(字段，字段，。。。)</span><br></pre></td></tr></table></figure>\n\n<p>删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX 索引名</span><br></pre></td></tr></table></figure>\n\n<p>以下通过 explain 显示出 mysql 执行的字段内容：</p>\n<ul>\n<li>id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.</li>\n<li>select_type: SELECT 查询的类型.</li>\n<li>table: 查询的是哪个表</li>\n<li>partitions: 匹配的分区</li>\n<li>type: join 类型</li>\n<li>possible_keys: 此次查询中可能选用的索引</li>\n<li>key: 此次查询中确切使用到的索引</li>\n<li>ref: 哪个字段或常数与 key 一起被使用</li>\n<li>rows: 显示此查询一共扫描了多少行. 这个是一个估计值.</li>\n<li>filtered: 表示此查询条件所过滤的数据的百分比</li>\n<li>extra: 额外的信息</li>\n</ul>\n<p>索引查询失效的几个情况：</p>\n<p>1、like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效。</p>\n<p>2、or语句前后没有同时使用索引。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效</p>\n<p>3、组合索引，不是使用第一列索引，索引失效</p>\n<p>4、数据类型出现隐式转化。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。</p>\n<p>5、在索引列上使用 IS NULL 或 IS NOT NULL操作。索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可。</p>\n<p>6、在索引字段上使用not，&lt;&gt;，!=。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： key&lt;&gt;0 改为 key&gt;0 or key&lt;0。</p>\n<p>7、对索引字段进行计算操作、字段上使用函数。（索引为 emp(ename,empno,sal)）</p>\n<p>8、当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效。</p>\n<p>索引失效分析工具：</p>\n<p>可以使用 explain 命令加在要分析的 sql 语句前面，在执行结果中查看 key 这一列的值，如果为 NULL，说明没有使用索引。</p>\n<p>explain 命令的详细用法，可以查看这篇文章：<a href=\"https://segmentfault.com/a/1190000008131735\">https://segmentfault.com/a/1190000008131735</a></p>\n"},{"title":"MySQL索引类型","abbrlink":1647528259,"_content":"\n## 1：普通索引\n\n这是最基本的索引，它没有任何限制，比如某个字段创建的索引就是一个普通索引，MyISAM 默认的 BTREE 类型的索引，也是我们大多数情况下用到的索引。\n\n直接创建索引\n\n```sql\nCREATE INDEX index_name ON TABLE(column(lehgth))\n```\n\n修改表结构的方式添加索引\n\n```sql\nALTER TABLE table_name ADD INDEX index_name ON (column(length))\n```\n\n创建表的时候同时创建索引\n\n```sql\nCREATE TABLE 'TABLE' (\n  'id' int(11) NOT NULL AUTO_INCREMENT,\n  'title' char(255) CHARACTER SET UTF8 COLLATE utf8_general_ci NOT NULL,\n  'content' text CHARACTER SET UTF8 COLLATE utf8_general_ci NOT NULL,\n  'time' int(10) NULL DEFAULT NULL,\nPRIMARY KEYo('id'),\nINDEX index_name(title(length))\n)\n```\n\n删除索引\n\n```sql\nDROP INDEX INDEX_NAME ON table\n```\n\n\n\n## 2：唯一索引\n\n与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值得组合必须唯一，创建方法和普通索类似。\n\n创建唯一索引\n\n```sql\nCREATE UNIQUE INDEX index_name ON TABLE(columm(length))\n```\n\n修改表结构\n\n```sql\nALTER TABLE table_name ADD UNIQUE index_name ON (column(length))\n```\n\n创建表的时候直接指定\n\n```sql\nCREATE TABLE 'TABLE'(\n  'id' int(11) NOT NULL AUTO_INCREMENT,\n  'title' char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\n  'content' text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,\n  'time' int(10) NULL DEFAULT NULL,\nPRIMARY KEY('id'),\nUNIQUE index_name (titlt(length))\n)\n```\n\n\n\n\n\n## 3：全文索引\n\n对于较大的数据集，将你的资料输入一个没有 `FULLTEXT` 索引的表中，然后创建索引，其速度比把资料输入现有 `FULLTEXT`索引的速度更为快。不过对于大容量的数据表，生成全文索引是一个消耗时间非常消耗硬盘空间的做法。\n\n创建表的时候添加全文索引\n\n```sql\nCREATE TABLE 'TABLE'(\n  'id' int(11) NOT NULL AUTO_INCREMENT,\n  'title' char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\n  'content' text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,\n  'time' int(10) NULL DEFAULT NULL,\n  PRIMARY KEY ('id'),\n  FULLTEXT (content)\n)\n```\n\n修改表结构添加全文索引\n\n```sql\nALTER TABLE article ADD FULLTEXT index_content(content)\n```\n\n直接创建索引\n\n```sql\nCREATE FULLTEXT INDEX index_content ON article(content)\n```\n\n\n\n## 4：单列索引、多列索引\n\n多个单列索引与单个单列索引的查询效果不同，因为执行查询时，MySQL 只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。\n\n## \n\n## 5：组合索引（最左前缀）\n\n平时用的 SQL 查询语句一般都有比较多的限制条件，所以为了进一步榨取 MySQL 的效率，就要考虑简历组合索引。\n\n比如：针对 title 和 time 建立一个组合索引\n\n```sql\nALTER TABLE article ADD INDEX index_title_time(title(50),time(10))\n```\n\n建立这样的组合索引，其实相当于分别建立了下面两组组合索引：\n\n```sql\n-title,time\n-title\n```\n\n为什么没有 `time` 这样的组合索引呢？这是因为 MySQL 组合索引“最左前缀”的结果。简单理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引，如下面几个 SQL 所示：\n\n```sql\n-- 使用上面的索引\nSELECT * FROM article WHERE title='测试' AND time=123456789;\nSELECT * FROM article WHERE title='测试';\n-- 不适用上面的索引\nSELECT * FROM article WHERE time=123456789;\n```\n\n\n\n## MySQL 索引的优化\n\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有其它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 `INSERT`、`UPDATE`、`DELETE`。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件。建立索引文件会占用磁盘空间的索引文件。一般情况下这个问题不太严重，但如果你在一个大表中创建了多种组合索引，索引文件会膨胀的很快。索引只是提高效率的一个因素，如果你的 MySQL 有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。\n\n### 1：何时使用聚集索引或非聚集索引？\n\n| 动作描述           | 使用聚集索引 | 使用非聚集索引 |\n| ------------------ | ------------ | -------------- |\n| 列经常被分组排序   | 使用         | 使用           |\n| 返回某范围内的数据 | 使用         | 不使用         |\n| 一个或极少不同值   | 不使用       | 不使用         |\n| 小数目的不同值     | 使用         | 不使用         |\n| 大数目的不同值     | 不使用       | 使用           |\n| 频繁更新的列       | 不使用       | 使用           |\n| 外键列             | 使用         | 使用           |\n| 主键列             | 使用         | 使用           |\n| 频繁修改索引列     | 不使用       | 使用           |\n\n还需再研究下....\n\n\n\n### 2：索引不会包含有 null 值得列\n\n只要列中包含有 null 值都将不会被包含在索引中，复合索引中只要有一列含有 null 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 NULL。\n\n### 3：使用短索引\n\n对串列进行索引，如果可能应该指定一个前缀长度。例如：\n\n如果有一个 CHAR(255) 的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且还可以节省磁盘空间和 I/O 操作。\n\n### 4：索引列排序\n\nMySQL 查询只使用一个索引，因此如果 `where` 子句中已经使用了索引的话，那么 `order by` 中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这里写列创建符合索引。\n\n### 5：like 语句操作\n\n一般情况下不鼓励使用 `like` 操作，如果非使用不可，如何使用也是一个问题，比如：\n\n`like \"%aaa%\"` 不会使用索引而 `like \"aaa%\"` 可以使用索引。\n\n### 6：不要在列上使用运算\n\n例如：\n\n```sql\nSELECT * FROM users WHERE YEAR(adddate) < 2007\n```\n\n这个将在每个行上进行运算，导致索引失效而进行全表扫描，因此我们可以改成\n\n```sql\nSELECT * FROM users where adddate < '2007-01-01'\n```\n\n> 欣赏：[一个单引号引发的MYSQL性能损失](https://www.zendstudio.net/archives/single-quotes-or-no-single-quotes-in-sql-query/)\n\n### 总结：\n\nMySQL 只对以下操作符才使用索引：\n\n`<`、`<=`、`=`、>、`>=`、between、`in`，以及某些时候的 `like`（不以通配符 `%` 或 `_` 开头的情形），而理论上每张表里面最多可创建 16 个索引，不过除非数据是真的多，否则过多使用索引也不行。","source":"_posts/Technology/MySQL/MySQL索引类型.md","raw":"---\ntitle: MySQL索引类型\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 1647528259\n---\n\n## 1：普通索引\n\n这是最基本的索引，它没有任何限制，比如某个字段创建的索引就是一个普通索引，MyISAM 默认的 BTREE 类型的索引，也是我们大多数情况下用到的索引。\n\n直接创建索引\n\n```sql\nCREATE INDEX index_name ON TABLE(column(lehgth))\n```\n\n修改表结构的方式添加索引\n\n```sql\nALTER TABLE table_name ADD INDEX index_name ON (column(length))\n```\n\n创建表的时候同时创建索引\n\n```sql\nCREATE TABLE 'TABLE' (\n  'id' int(11) NOT NULL AUTO_INCREMENT,\n  'title' char(255) CHARACTER SET UTF8 COLLATE utf8_general_ci NOT NULL,\n  'content' text CHARACTER SET UTF8 COLLATE utf8_general_ci NOT NULL,\n  'time' int(10) NULL DEFAULT NULL,\nPRIMARY KEYo('id'),\nINDEX index_name(title(length))\n)\n```\n\n删除索引\n\n```sql\nDROP INDEX INDEX_NAME ON table\n```\n\n\n\n## 2：唯一索引\n\n与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值得组合必须唯一，创建方法和普通索类似。\n\n创建唯一索引\n\n```sql\nCREATE UNIQUE INDEX index_name ON TABLE(columm(length))\n```\n\n修改表结构\n\n```sql\nALTER TABLE table_name ADD UNIQUE index_name ON (column(length))\n```\n\n创建表的时候直接指定\n\n```sql\nCREATE TABLE 'TABLE'(\n  'id' int(11) NOT NULL AUTO_INCREMENT,\n  'title' char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\n  'content' text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,\n  'time' int(10) NULL DEFAULT NULL,\nPRIMARY KEY('id'),\nUNIQUE index_name (titlt(length))\n)\n```\n\n\n\n\n\n## 3：全文索引\n\n对于较大的数据集，将你的资料输入一个没有 `FULLTEXT` 索引的表中，然后创建索引，其速度比把资料输入现有 `FULLTEXT`索引的速度更为快。不过对于大容量的数据表，生成全文索引是一个消耗时间非常消耗硬盘空间的做法。\n\n创建表的时候添加全文索引\n\n```sql\nCREATE TABLE 'TABLE'(\n  'id' int(11) NOT NULL AUTO_INCREMENT,\n  'title' char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\n  'content' text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,\n  'time' int(10) NULL DEFAULT NULL,\n  PRIMARY KEY ('id'),\n  FULLTEXT (content)\n)\n```\n\n修改表结构添加全文索引\n\n```sql\nALTER TABLE article ADD FULLTEXT index_content(content)\n```\n\n直接创建索引\n\n```sql\nCREATE FULLTEXT INDEX index_content ON article(content)\n```\n\n\n\n## 4：单列索引、多列索引\n\n多个单列索引与单个单列索引的查询效果不同，因为执行查询时，MySQL 只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。\n\n## \n\n## 5：组合索引（最左前缀）\n\n平时用的 SQL 查询语句一般都有比较多的限制条件，所以为了进一步榨取 MySQL 的效率，就要考虑简历组合索引。\n\n比如：针对 title 和 time 建立一个组合索引\n\n```sql\nALTER TABLE article ADD INDEX index_title_time(title(50),time(10))\n```\n\n建立这样的组合索引，其实相当于分别建立了下面两组组合索引：\n\n```sql\n-title,time\n-title\n```\n\n为什么没有 `time` 这样的组合索引呢？这是因为 MySQL 组合索引“最左前缀”的结果。简单理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引，如下面几个 SQL 所示：\n\n```sql\n-- 使用上面的索引\nSELECT * FROM article WHERE title='测试' AND time=123456789;\nSELECT * FROM article WHERE title='测试';\n-- 不适用上面的索引\nSELECT * FROM article WHERE time=123456789;\n```\n\n\n\n## MySQL 索引的优化\n\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有其它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 `INSERT`、`UPDATE`、`DELETE`。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件。建立索引文件会占用磁盘空间的索引文件。一般情况下这个问题不太严重，但如果你在一个大表中创建了多种组合索引，索引文件会膨胀的很快。索引只是提高效率的一个因素，如果你的 MySQL 有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。\n\n### 1：何时使用聚集索引或非聚集索引？\n\n| 动作描述           | 使用聚集索引 | 使用非聚集索引 |\n| ------------------ | ------------ | -------------- |\n| 列经常被分组排序   | 使用         | 使用           |\n| 返回某范围内的数据 | 使用         | 不使用         |\n| 一个或极少不同值   | 不使用       | 不使用         |\n| 小数目的不同值     | 使用         | 不使用         |\n| 大数目的不同值     | 不使用       | 使用           |\n| 频繁更新的列       | 不使用       | 使用           |\n| 外键列             | 使用         | 使用           |\n| 主键列             | 使用         | 使用           |\n| 频繁修改索引列     | 不使用       | 使用           |\n\n还需再研究下....\n\n\n\n### 2：索引不会包含有 null 值得列\n\n只要列中包含有 null 值都将不会被包含在索引中，复合索引中只要有一列含有 null 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 NULL。\n\n### 3：使用短索引\n\n对串列进行索引，如果可能应该指定一个前缀长度。例如：\n\n如果有一个 CHAR(255) 的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且还可以节省磁盘空间和 I/O 操作。\n\n### 4：索引列排序\n\nMySQL 查询只使用一个索引，因此如果 `where` 子句中已经使用了索引的话，那么 `order by` 中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这里写列创建符合索引。\n\n### 5：like 语句操作\n\n一般情况下不鼓励使用 `like` 操作，如果非使用不可，如何使用也是一个问题，比如：\n\n`like \"%aaa%\"` 不会使用索引而 `like \"aaa%\"` 可以使用索引。\n\n### 6：不要在列上使用运算\n\n例如：\n\n```sql\nSELECT * FROM users WHERE YEAR(adddate) < 2007\n```\n\n这个将在每个行上进行运算，导致索引失效而进行全表扫描，因此我们可以改成\n\n```sql\nSELECT * FROM users where adddate < '2007-01-01'\n```\n\n> 欣赏：[一个单引号引发的MYSQL性能损失](https://www.zendstudio.net/archives/single-quotes-or-no-single-quotes-in-sql-query/)\n\n### 总结：\n\nMySQL 只对以下操作符才使用索引：\n\n`<`、`<=`、`=`、>、`>=`、between、`in`，以及某些时候的 `like`（不以通配符 `%` 或 `_` 开头的情形），而理论上每张表里面最多可创建 16 个索引，不过除非数据是真的多，否则过多使用索引也不行。","slug":"Technology/MySQL/MySQL索引类型","published":1,"date":"2021-04-16T13:45:53.994Z","updated":"2021-04-29T10:24:59.255Z","_id":"ckotdh5ww003nkw8z73o58k2u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1：普通索引\"><a href=\"#1：普通索引\" class=\"headerlink\" title=\"1：普通索引\"></a>1：普通索引</h2><p>这是最基本的索引，它没有任何限制，比如某个字段创建的索引就是一个普通索引，MyISAM 默认的 BTREE 类型的索引，也是我们大多数情况下用到的索引。</p>\n<p>直接创建索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX index_name <span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span>(<span class=\"keyword\">column</span>(lehgth))</span><br></pre></td></tr></table></figure>\n\n<p>修改表结构的方式添加索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> INDEX index_name <span class=\"keyword\">ON</span> (<span class=\"keyword\">column</span>(length))</span><br></pre></td></tr></table></figure>\n\n<p>创建表的时候同时创建索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;TABLE&#x27;</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;id&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">&#x27;title&#x27;</span> <span class=\"type\">char</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> UTF8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;content&#x27;</span> text <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> UTF8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;time&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEYo(<span class=\"string\">&#x27;id&#x27;</span>),</span><br><span class=\"line\">INDEX index_name(title(length))</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX INDEX_NAME <span class=\"keyword\">ON</span> <span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2：唯一索引\"><a href=\"#2：唯一索引\" class=\"headerlink\" title=\"2：唯一索引\"></a>2：唯一索引</h2><p>与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值得组合必须唯一，创建方法和普通索类似。</p>\n<p>创建唯一索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX index_name <span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span>(columm(length))</span><br></pre></td></tr></table></figure>\n\n<p>修改表结构</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> index_name <span class=\"keyword\">ON</span> (<span class=\"keyword\">column</span>(length))</span><br></pre></td></tr></table></figure>\n\n<p>创建表的时候直接指定</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;TABLE&#x27;</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;id&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">&#x27;title&#x27;</span> <span class=\"type\">char</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;content&#x27;</span> text <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;time&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY(<span class=\"string\">&#x27;id&#x27;</span>),</span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span> index_name (titlt(length))</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"3：全文索引\"><a href=\"#3：全文索引\" class=\"headerlink\" title=\"3：全文索引\"></a>3：全文索引</h2><p>对于较大的数据集，将你的资料输入一个没有 <code>FULLTEXT</code> 索引的表中，然后创建索引，其速度比把资料输入现有 <code>FULLTEXT</code>索引的速度更为快。不过对于大容量的数据表，生成全文索引是一个消耗时间非常消耗硬盘空间的做法。</p>\n<p>创建表的时候添加全文索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;TABLE&#x27;</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;id&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">&#x27;title&#x27;</span> <span class=\"type\">char</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;content&#x27;</span> text <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;time&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (<span class=\"string\">&#x27;id&#x27;</span>),</span><br><span class=\"line\">  FULLTEXT (content)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>修改表结构添加全文索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> article <span class=\"keyword\">ADD</span> FULLTEXT index_content(content)</span><br></pre></td></tr></table></figure>\n\n<p>直接创建索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> FULLTEXT INDEX index_content <span class=\"keyword\">ON</span> article(content)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4：单列索引、多列索引\"><a href=\"#4：单列索引、多列索引\" class=\"headerlink\" title=\"4：单列索引、多列索引\"></a>4：单列索引、多列索引</h2><p>多个单列索引与单个单列索引的查询效果不同，因为执行查询时，MySQL 只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"5：组合索引（最左前缀）\"><a href=\"#5：组合索引（最左前缀）\" class=\"headerlink\" title=\"5：组合索引（最左前缀）\"></a>5：组合索引（最左前缀）</h2><p>平时用的 SQL 查询语句一般都有比较多的限制条件，所以为了进一步榨取 MySQL 的效率，就要考虑简历组合索引。</p>\n<p>比如：针对 title 和 time 建立一个组合索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> article <span class=\"keyword\">ADD</span> INDEX index_title_time(title(<span class=\"number\">50</span>),<span class=\"type\">time</span>(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<p>建立这样的组合索引，其实相当于分别建立了下面两组组合索引：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">-</span>title,<span class=\"type\">time</span></span><br><span class=\"line\"><span class=\"operator\">-</span>title</span><br></pre></td></tr></table></figure>\n\n<p>为什么没有 <code>time</code> 这样的组合索引呢？这是因为 MySQL 组合索引“最左前缀”的结果。简单理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引，如下面几个 SQL 所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 使用上面的索引</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> article <span class=\"keyword\">WHERE</span> title<span class=\"operator\">=</span><span class=\"string\">&#x27;测试&#x27;</span> <span class=\"keyword\">AND</span> <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">123456789</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> article <span class=\"keyword\">WHERE</span> title<span class=\"operator\">=</span><span class=\"string\">&#x27;测试&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 不适用上面的索引</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> article <span class=\"keyword\">WHERE</span> <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">123456789</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"MySQL-索引的优化\"><a href=\"#MySQL-索引的优化\" class=\"headerlink\" title=\"MySQL 索引的优化\"></a>MySQL 索引的优化</h2><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有其它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件。建立索引文件会占用磁盘空间的索引文件。一般情况下这个问题不太严重，但如果你在一个大表中创建了多种组合索引，索引文件会膨胀的很快。索引只是提高效率的一个因素，如果你的 MySQL 有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</p>\n<h3 id=\"1：何时使用聚集索引或非聚集索引？\"><a href=\"#1：何时使用聚集索引或非聚集索引？\" class=\"headerlink\" title=\"1：何时使用聚集索引或非聚集索引？\"></a>1：何时使用聚集索引或非聚集索引？</h3><table>\n<thead>\n<tr>\n<th>动作描述</th>\n<th>使用聚集索引</th>\n<th>使用非聚集索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>列经常被分组排序</td>\n<td>使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>返回某范围内的数据</td>\n<td>使用</td>\n<td>不使用</td>\n</tr>\n<tr>\n<td>一个或极少不同值</td>\n<td>不使用</td>\n<td>不使用</td>\n</tr>\n<tr>\n<td>小数目的不同值</td>\n<td>使用</td>\n<td>不使用</td>\n</tr>\n<tr>\n<td>大数目的不同值</td>\n<td>不使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>频繁更新的列</td>\n<td>不使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>外键列</td>\n<td>使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>主键列</td>\n<td>使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>频繁修改索引列</td>\n<td>不使用</td>\n<td>使用</td>\n</tr>\n</tbody></table>\n<p>还需再研究下….</p>\n<h3 id=\"2：索引不会包含有-null-值得列\"><a href=\"#2：索引不会包含有-null-值得列\" class=\"headerlink\" title=\"2：索引不会包含有 null 值得列\"></a>2：索引不会包含有 null 值得列</h3><p>只要列中包含有 null 值都将不会被包含在索引中，复合索引中只要有一列含有 null 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 NULL。</p>\n<h3 id=\"3：使用短索引\"><a href=\"#3：使用短索引\" class=\"headerlink\" title=\"3：使用短索引\"></a>3：使用短索引</h3><p>对串列进行索引，如果可能应该指定一个前缀长度。例如：</p>\n<p>如果有一个 CHAR(255) 的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且还可以节省磁盘空间和 I/O 操作。</p>\n<h3 id=\"4：索引列排序\"><a href=\"#4：索引列排序\" class=\"headerlink\" title=\"4：索引列排序\"></a>4：索引列排序</h3><p>MySQL 查询只使用一个索引，因此如果 <code>where</code> 子句中已经使用了索引的话，那么 <code>order by</code> 中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这里写列创建符合索引。</p>\n<h3 id=\"5：like-语句操作\"><a href=\"#5：like-语句操作\" class=\"headerlink\" title=\"5：like 语句操作\"></a>5：like 语句操作</h3><p>一般情况下不鼓励使用 <code>like</code> 操作，如果非使用不可，如何使用也是一个问题，比如：</p>\n<p><code>like &quot;%aaa%&quot;</code> 不会使用索引而 <code>like &quot;aaa%&quot;</code> 可以使用索引。</p>\n<h3 id=\"6：不要在列上使用运算\"><a href=\"#6：不要在列上使用运算\" class=\"headerlink\" title=\"6：不要在列上使用运算\"></a>6：不要在列上使用运算</h3><p>例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> <span class=\"keyword\">YEAR</span>(adddate) <span class=\"operator\">&lt;</span> <span class=\"number\">2007</span></span><br></pre></td></tr></table></figure>\n\n<p>这个将在每个行上进行运算，导致索引失效而进行全表扫描，因此我们可以改成</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">where</span> adddate <span class=\"operator\">&lt;</span> <span class=\"string\">&#x27;2007-01-01&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>欣赏：<a href=\"https://www.zendstudio.net/archives/single-quotes-or-no-single-quotes-in-sql-query/\">一个单引号引发的MYSQL性能损失</a></p>\n</blockquote>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>MySQL 只对以下操作符才使用索引：</p>\n<p><code>&lt;</code>、<code>&lt;=</code>、<code>=</code>、&gt;、<code>&gt;=</code>、between、<code>in</code>，以及某些时候的 <code>like</code>（不以通配符 <code>%</code> 或 <code>_</code> 开头的情形），而理论上每张表里面最多可创建 16 个索引，不过除非数据是真的多，否则过多使用索引也不行。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1：普通索引\"><a href=\"#1：普通索引\" class=\"headerlink\" title=\"1：普通索引\"></a>1：普通索引</h2><p>这是最基本的索引，它没有任何限制，比如某个字段创建的索引就是一个普通索引，MyISAM 默认的 BTREE 类型的索引，也是我们大多数情况下用到的索引。</p>\n<p>直接创建索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX index_name <span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span>(<span class=\"keyword\">column</span>(lehgth))</span><br></pre></td></tr></table></figure>\n\n<p>修改表结构的方式添加索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> INDEX index_name <span class=\"keyword\">ON</span> (<span class=\"keyword\">column</span>(length))</span><br></pre></td></tr></table></figure>\n\n<p>创建表的时候同时创建索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;TABLE&#x27;</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;id&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">&#x27;title&#x27;</span> <span class=\"type\">char</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> UTF8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;content&#x27;</span> text <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> UTF8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;time&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEYo(<span class=\"string\">&#x27;id&#x27;</span>),</span><br><span class=\"line\">INDEX index_name(title(length))</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX INDEX_NAME <span class=\"keyword\">ON</span> <span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2：唯一索引\"><a href=\"#2：唯一索引\" class=\"headerlink\" title=\"2：唯一索引\"></a>2：唯一索引</h2><p>与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值得组合必须唯一，创建方法和普通索类似。</p>\n<p>创建唯一索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX index_name <span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span>(columm(length))</span><br></pre></td></tr></table></figure>\n\n<p>修改表结构</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> index_name <span class=\"keyword\">ON</span> (<span class=\"keyword\">column</span>(length))</span><br></pre></td></tr></table></figure>\n\n<p>创建表的时候直接指定</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;TABLE&#x27;</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;id&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">&#x27;title&#x27;</span> <span class=\"type\">char</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;content&#x27;</span> text <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;time&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY(<span class=\"string\">&#x27;id&#x27;</span>),</span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span> index_name (titlt(length))</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"3：全文索引\"><a href=\"#3：全文索引\" class=\"headerlink\" title=\"3：全文索引\"></a>3：全文索引</h2><p>对于较大的数据集，将你的资料输入一个没有 <code>FULLTEXT</code> 索引的表中，然后创建索引，其速度比把资料输入现有 <code>FULLTEXT</code>索引的速度更为快。不过对于大容量的数据表，生成全文索引是一个消耗时间非常消耗硬盘空间的做法。</p>\n<p>创建表的时候添加全文索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;TABLE&#x27;</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;id&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">&#x27;title&#x27;</span> <span class=\"type\">char</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;content&#x27;</span> text <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;time&#x27;</span> <span class=\"type\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (<span class=\"string\">&#x27;id&#x27;</span>),</span><br><span class=\"line\">  FULLTEXT (content)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>修改表结构添加全文索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> article <span class=\"keyword\">ADD</span> FULLTEXT index_content(content)</span><br></pre></td></tr></table></figure>\n\n<p>直接创建索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> FULLTEXT INDEX index_content <span class=\"keyword\">ON</span> article(content)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4：单列索引、多列索引\"><a href=\"#4：单列索引、多列索引\" class=\"headerlink\" title=\"4：单列索引、多列索引\"></a>4：单列索引、多列索引</h2><p>多个单列索引与单个单列索引的查询效果不同，因为执行查询时，MySQL 只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"5：组合索引（最左前缀）\"><a href=\"#5：组合索引（最左前缀）\" class=\"headerlink\" title=\"5：组合索引（最左前缀）\"></a>5：组合索引（最左前缀）</h2><p>平时用的 SQL 查询语句一般都有比较多的限制条件，所以为了进一步榨取 MySQL 的效率，就要考虑简历组合索引。</p>\n<p>比如：针对 title 和 time 建立一个组合索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> article <span class=\"keyword\">ADD</span> INDEX index_title_time(title(<span class=\"number\">50</span>),<span class=\"type\">time</span>(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<p>建立这样的组合索引，其实相当于分别建立了下面两组组合索引：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">-</span>title,<span class=\"type\">time</span></span><br><span class=\"line\"><span class=\"operator\">-</span>title</span><br></pre></td></tr></table></figure>\n\n<p>为什么没有 <code>time</code> 这样的组合索引呢？这是因为 MySQL 组合索引“最左前缀”的结果。简单理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引，如下面几个 SQL 所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 使用上面的索引</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> article <span class=\"keyword\">WHERE</span> title<span class=\"operator\">=</span><span class=\"string\">&#x27;测试&#x27;</span> <span class=\"keyword\">AND</span> <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">123456789</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> article <span class=\"keyword\">WHERE</span> title<span class=\"operator\">=</span><span class=\"string\">&#x27;测试&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 不适用上面的索引</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> article <span class=\"keyword\">WHERE</span> <span class=\"type\">time</span><span class=\"operator\">=</span><span class=\"number\">123456789</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"MySQL-索引的优化\"><a href=\"#MySQL-索引的优化\" class=\"headerlink\" title=\"MySQL 索引的优化\"></a>MySQL 索引的优化</h2><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有其它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件。建立索引文件会占用磁盘空间的索引文件。一般情况下这个问题不太严重，但如果你在一个大表中创建了多种组合索引，索引文件会膨胀的很快。索引只是提高效率的一个因素，如果你的 MySQL 有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</p>\n<h3 id=\"1：何时使用聚集索引或非聚集索引？\"><a href=\"#1：何时使用聚集索引或非聚集索引？\" class=\"headerlink\" title=\"1：何时使用聚集索引或非聚集索引？\"></a>1：何时使用聚集索引或非聚集索引？</h3><table>\n<thead>\n<tr>\n<th>动作描述</th>\n<th>使用聚集索引</th>\n<th>使用非聚集索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>列经常被分组排序</td>\n<td>使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>返回某范围内的数据</td>\n<td>使用</td>\n<td>不使用</td>\n</tr>\n<tr>\n<td>一个或极少不同值</td>\n<td>不使用</td>\n<td>不使用</td>\n</tr>\n<tr>\n<td>小数目的不同值</td>\n<td>使用</td>\n<td>不使用</td>\n</tr>\n<tr>\n<td>大数目的不同值</td>\n<td>不使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>频繁更新的列</td>\n<td>不使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>外键列</td>\n<td>使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>主键列</td>\n<td>使用</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>频繁修改索引列</td>\n<td>不使用</td>\n<td>使用</td>\n</tr>\n</tbody></table>\n<p>还需再研究下….</p>\n<h3 id=\"2：索引不会包含有-null-值得列\"><a href=\"#2：索引不会包含有-null-值得列\" class=\"headerlink\" title=\"2：索引不会包含有 null 值得列\"></a>2：索引不会包含有 null 值得列</h3><p>只要列中包含有 null 值都将不会被包含在索引中，复合索引中只要有一列含有 null 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 NULL。</p>\n<h3 id=\"3：使用短索引\"><a href=\"#3：使用短索引\" class=\"headerlink\" title=\"3：使用短索引\"></a>3：使用短索引</h3><p>对串列进行索引，如果可能应该指定一个前缀长度。例如：</p>\n<p>如果有一个 CHAR(255) 的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且还可以节省磁盘空间和 I/O 操作。</p>\n<h3 id=\"4：索引列排序\"><a href=\"#4：索引列排序\" class=\"headerlink\" title=\"4：索引列排序\"></a>4：索引列排序</h3><p>MySQL 查询只使用一个索引，因此如果 <code>where</code> 子句中已经使用了索引的话，那么 <code>order by</code> 中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这里写列创建符合索引。</p>\n<h3 id=\"5：like-语句操作\"><a href=\"#5：like-语句操作\" class=\"headerlink\" title=\"5：like 语句操作\"></a>5：like 语句操作</h3><p>一般情况下不鼓励使用 <code>like</code> 操作，如果非使用不可，如何使用也是一个问题，比如：</p>\n<p><code>like &quot;%aaa%&quot;</code> 不会使用索引而 <code>like &quot;aaa%&quot;</code> 可以使用索引。</p>\n<h3 id=\"6：不要在列上使用运算\"><a href=\"#6：不要在列上使用运算\" class=\"headerlink\" title=\"6：不要在列上使用运算\"></a>6：不要在列上使用运算</h3><p>例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> <span class=\"keyword\">YEAR</span>(adddate) <span class=\"operator\">&lt;</span> <span class=\"number\">2007</span></span><br></pre></td></tr></table></figure>\n\n<p>这个将在每个行上进行运算，导致索引失效而进行全表扫描，因此我们可以改成</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">where</span> adddate <span class=\"operator\">&lt;</span> <span class=\"string\">&#x27;2007-01-01&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>欣赏：<a href=\"https://www.zendstudio.net/archives/single-quotes-or-no-single-quotes-in-sql-query/\">一个单引号引发的MYSQL性能损失</a></p>\n</blockquote>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>MySQL 只对以下操作符才使用索引：</p>\n<p><code>&lt;</code>、<code>&lt;=</code>、<code>=</code>、&gt;、<code>&gt;=</code>、between、<code>in</code>，以及某些时候的 <code>like</code>（不以通配符 <code>%</code> 或 <code>_</code> 开头的情形），而理论上每张表里面最多可创建 16 个索引，不过除非数据是真的多，否则过多使用索引也不行。</p>\n"},{"title":"事务的四个特性","abbrlink":1868093003,"_content":"\n## 简介\n\n数据库事务 (Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。\n\n## **事务隔离**\n\n同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如 A 正在从一张银行卡中取钱，在 A 取钱的过程结束前，B 不能向这张卡转账。\n\n## **数据库事务的四个特性（四种隔离状态）**\n\n事务具有4个基本特征，分别是：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Duration），简称ACID。\n\n- 原子性：事务由一个或多个行为捆绑在一起，好像是一个独立的工作单元。原子性保证事务内的操作要么都发生，要么都不发生。假如所有的操作都成功了，那么事务是成功的；假如任何一个操作失败，那么事务就会进行回滚\n\n- 一致性：一旦一个事务结束了，不管是成功还是失败，系统所处的状态和业务规则是一致的。也就是说，数据应当不会被破坏\n\n- 隔离性：事务应当允许多个用户操作同一个数据，一个用户的操作不应该和其他用户的操作相混淆。因此事务是相互隔离的，防止并行读写同一个数据的情况发生。注意：隔离性通常意味着要锁定数据库的表或行\n\n  **不同的隔离级别** ：\n\n  - Read Uncommitted（读取未提交[添加中文释义]内容）：最低的隔离级别，什么都不需要做，一个事务可以读到另一个事务未提交的结果。所有的并发事务问题都会发生\n  - Read Committed（读取提交内容）：只有在事务提交后，其更新结果才会被其他事务看见。可以解决脏读问题\n  - Repeated Read（可重复读）：在一个事务中，对于同一份数据的读取结果总是相同的，无论是否有其他事务对这份数据进行操作，以及这个事务是否提交。可以解决脏读、不可重复读\n  - Serialization（可串行化）：事务串行化执行，隔离级别最高，牺牲了系统的并发性。可以解决并发事务的所有问题\n\n- 持久性：一旦事务完成，事务的结果应当持久化。这样不管什么样的系统崩溃，都不会造成数据异常。","source":"_posts/Technology/MySQL/事务的四个特性.md","raw":"---\ntitle: 事务的四个特性\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 1868093003\n---\n\n## 简介\n\n数据库事务 (Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。\n\n## **事务隔离**\n\n同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如 A 正在从一张银行卡中取钱，在 A 取钱的过程结束前，B 不能向这张卡转账。\n\n## **数据库事务的四个特性（四种隔离状态）**\n\n事务具有4个基本特征，分别是：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Duration），简称ACID。\n\n- 原子性：事务由一个或多个行为捆绑在一起，好像是一个独立的工作单元。原子性保证事务内的操作要么都发生，要么都不发生。假如所有的操作都成功了，那么事务是成功的；假如任何一个操作失败，那么事务就会进行回滚\n\n- 一致性：一旦一个事务结束了，不管是成功还是失败，系统所处的状态和业务规则是一致的。也就是说，数据应当不会被破坏\n\n- 隔离性：事务应当允许多个用户操作同一个数据，一个用户的操作不应该和其他用户的操作相混淆。因此事务是相互隔离的，防止并行读写同一个数据的情况发生。注意：隔离性通常意味着要锁定数据库的表或行\n\n  **不同的隔离级别** ：\n\n  - Read Uncommitted（读取未提交[添加中文释义]内容）：最低的隔离级别，什么都不需要做，一个事务可以读到另一个事务未提交的结果。所有的并发事务问题都会发生\n  - Read Committed（读取提交内容）：只有在事务提交后，其更新结果才会被其他事务看见。可以解决脏读问题\n  - Repeated Read（可重复读）：在一个事务中，对于同一份数据的读取结果总是相同的，无论是否有其他事务对这份数据进行操作，以及这个事务是否提交。可以解决脏读、不可重复读\n  - Serialization（可串行化）：事务串行化执行，隔离级别最高，牺牲了系统的并发性。可以解决并发事务的所有问题\n\n- 持久性：一旦事务完成，事务的结果应当持久化。这样不管什么样的系统崩溃，都不会造成数据异常。","slug":"Technology/MySQL/事务的四个特性","published":1,"date":"2021-04-16T13:45:54.007Z","updated":"2021-04-29T10:24:59.260Z","_id":"ckotdh5wx003pkw8z2bvvaohd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>数据库事务 (Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。</p>\n<h2 id=\"事务隔离\"><a href=\"#事务隔离\" class=\"headerlink\" title=\"事务隔离\"></a><strong>事务隔离</strong></h2><p>同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如 A 正在从一张银行卡中取钱，在 A 取钱的过程结束前，B 不能向这张卡转账。</p>\n<h2 id=\"数据库事务的四个特性（四种隔离状态）\"><a href=\"#数据库事务的四个特性（四种隔离状态）\" class=\"headerlink\" title=\"数据库事务的四个特性（四种隔离状态）\"></a><strong>数据库事务的四个特性（四种隔离状态）</strong></h2><p>事务具有4个基本特征，分别是：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Duration），简称ACID。</p>\n<ul>\n<li><p>原子性：事务由一个或多个行为捆绑在一起，好像是一个独立的工作单元。原子性保证事务内的操作要么都发生，要么都不发生。假如所有的操作都成功了，那么事务是成功的；假如任何一个操作失败，那么事务就会进行回滚</p>\n</li>\n<li><p>一致性：一旦一个事务结束了，不管是成功还是失败，系统所处的状态和业务规则是一致的。也就是说，数据应当不会被破坏</p>\n</li>\n<li><p>隔离性：事务应当允许多个用户操作同一个数据，一个用户的操作不应该和其他用户的操作相混淆。因此事务是相互隔离的，防止并行读写同一个数据的情况发生。注意：隔离性通常意味着要锁定数据库的表或行</p>\n<p><strong>不同的隔离级别</strong> ：</p>\n<ul>\n<li>Read Uncommitted（读取未提交[添加中文释义]内容）：最低的隔离级别，什么都不需要做，一个事务可以读到另一个事务未提交的结果。所有的并发事务问题都会发生</li>\n<li>Read Committed（读取提交内容）：只有在事务提交后，其更新结果才会被其他事务看见。可以解决脏读问题</li>\n<li>Repeated Read（可重复读）：在一个事务中，对于同一份数据的读取结果总是相同的，无论是否有其他事务对这份数据进行操作，以及这个事务是否提交。可以解决脏读、不可重复读</li>\n<li>Serialization（可串行化）：事务串行化执行，隔离级别最高，牺牲了系统的并发性。可以解决并发事务的所有问题</li>\n</ul>\n</li>\n<li><p>持久性：一旦事务完成，事务的结果应当持久化。这样不管什么样的系统崩溃，都不会造成数据异常。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>数据库事务 (Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。</p>\n<h2 id=\"事务隔离\"><a href=\"#事务隔离\" class=\"headerlink\" title=\"事务隔离\"></a><strong>事务隔离</strong></h2><p>同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如 A 正在从一张银行卡中取钱，在 A 取钱的过程结束前，B 不能向这张卡转账。</p>\n<h2 id=\"数据库事务的四个特性（四种隔离状态）\"><a href=\"#数据库事务的四个特性（四种隔离状态）\" class=\"headerlink\" title=\"数据库事务的四个特性（四种隔离状态）\"></a><strong>数据库事务的四个特性（四种隔离状态）</strong></h2><p>事务具有4个基本特征，分别是：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Duration），简称ACID。</p>\n<ul>\n<li><p>原子性：事务由一个或多个行为捆绑在一起，好像是一个独立的工作单元。原子性保证事务内的操作要么都发生，要么都不发生。假如所有的操作都成功了，那么事务是成功的；假如任何一个操作失败，那么事务就会进行回滚</p>\n</li>\n<li><p>一致性：一旦一个事务结束了，不管是成功还是失败，系统所处的状态和业务规则是一致的。也就是说，数据应当不会被破坏</p>\n</li>\n<li><p>隔离性：事务应当允许多个用户操作同一个数据，一个用户的操作不应该和其他用户的操作相混淆。因此事务是相互隔离的，防止并行读写同一个数据的情况发生。注意：隔离性通常意味着要锁定数据库的表或行</p>\n<p><strong>不同的隔离级别</strong> ：</p>\n<ul>\n<li>Read Uncommitted（读取未提交[添加中文释义]内容）：最低的隔离级别，什么都不需要做，一个事务可以读到另一个事务未提交的结果。所有的并发事务问题都会发生</li>\n<li>Read Committed（读取提交内容）：只有在事务提交后，其更新结果才会被其他事务看见。可以解决脏读问题</li>\n<li>Repeated Read（可重复读）：在一个事务中，对于同一份数据的读取结果总是相同的，无论是否有其他事务对这份数据进行操作，以及这个事务是否提交。可以解决脏读、不可重复读</li>\n<li>Serialization（可串行化）：事务串行化执行，隔离级别最高，牺牲了系统的并发性。可以解决并发事务的所有问题</li>\n</ul>\n</li>\n<li><p>持久性：一旦事务完成，事务的结果应当持久化。这样不管什么样的系统崩溃，都不会造成数据异常。</p>\n</li>\n</ul>\n"},{"title":"使用MySqlDump备份","abbrlink":2178661577,"_content":"\n## 如何备份数据库\n\n### 语法\n\n```shell\nmysqldump [arguments] > file_name\n```\n\n### 要转储所有数据库，请使用以下选项调用\n\n```shell\nmysqldump --all-databases > dump.sql\n```\n\n### 要仅转储特定数据库，请在命令行上命名它们并使用以下\n\n```shell\nmysqldump --databases db1 db2 db3 > dump.sql\n```\n\n### 要转储单个数据库，请在命令行上将其命名\n\n```shell\nmysqldump --databases test > dump.sql\n```\n\n### 在单数据库情况下，可以忽略以下 --databases 选项\n\n```shell\nmysqldump test > dump.sql\n```\n\n### 要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名\n\n```shell\nmysqldump test t1 t3 t7 > dump.sql\n```\n\n### 备份到当前的目录（在对应目录下执行以下命令）\n\n```shell\nmysqldump -u root -p --opt database > database.sql\n```\n\n## 如何恢复数据库\n\n### 语法\n\n登录数据库\n\n```shell\nmysql -u root -p\n```\n\n进入对应的数据库\n\n```sql\nuse test;\n```\n\n执行恢复命令\n\n```shell\nsource /source /tmp/test.sql\n```\n\n","source":"_posts/Technology/MySQL/使用MySqlDump备份.md","raw":"---\ntitle: 使用MySqlDump备份\ncategories:\n  - 技术开发\n  - 数据库\n  - MySQL\nabbrlink: 2178661577\n---\n\n## 如何备份数据库\n\n### 语法\n\n```shell\nmysqldump [arguments] > file_name\n```\n\n### 要转储所有数据库，请使用以下选项调用\n\n```shell\nmysqldump --all-databases > dump.sql\n```\n\n### 要仅转储特定数据库，请在命令行上命名它们并使用以下\n\n```shell\nmysqldump --databases db1 db2 db3 > dump.sql\n```\n\n### 要转储单个数据库，请在命令行上将其命名\n\n```shell\nmysqldump --databases test > dump.sql\n```\n\n### 在单数据库情况下，可以忽略以下 --databases 选项\n\n```shell\nmysqldump test > dump.sql\n```\n\n### 要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名\n\n```shell\nmysqldump test t1 t3 t7 > dump.sql\n```\n\n### 备份到当前的目录（在对应目录下执行以下命令）\n\n```shell\nmysqldump -u root -p --opt database > database.sql\n```\n\n## 如何恢复数据库\n\n### 语法\n\n登录数据库\n\n```shell\nmysql -u root -p\n```\n\n进入对应的数据库\n\n```sql\nuse test;\n```\n\n执行恢复命令\n\n```shell\nsource /source /tmp/test.sql\n```\n\n","slug":"Technology/MySQL/使用MySqlDump备份","published":1,"date":"2021-04-16T13:45:54.001Z","updated":"2021-04-29T10:24:59.266Z","_id":"ckotdh5wz003skw8z56zp18p0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"如何备份数据库\"><a href=\"#如何备份数据库\" class=\"headerlink\" title=\"如何备份数据库\"></a>如何备份数据库</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump [arguments] &gt; file_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"要转储所有数据库，请使用以下选项调用\"><a href=\"#要转储所有数据库，请使用以下选项调用\" class=\"headerlink\" title=\"要转储所有数据库，请使用以下选项调用\"></a>要转储所有数据库，请使用以下选项调用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump --all-databases &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"要仅转储特定数据库，请在命令行上命名它们并使用以下\"><a href=\"#要仅转储特定数据库，请在命令行上命名它们并使用以下\" class=\"headerlink\" title=\"要仅转储特定数据库，请在命令行上命名它们并使用以下\"></a>要仅转储特定数据库，请在命令行上命名它们并使用以下</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump --databases db1 db2 db3 &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"要转储单个数据库，请在命令行上将其命名\"><a href=\"#要转储单个数据库，请在命令行上将其命名\" class=\"headerlink\" title=\"要转储单个数据库，请在命令行上将其命名\"></a>要转储单个数据库，请在命令行上将其命名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump --databases test &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在单数据库情况下，可以忽略以下-–databases-选项\"><a href=\"#在单数据库情况下，可以忽略以下-–databases-选项\" class=\"headerlink\" title=\"在单数据库情况下，可以忽略以下 –databases 选项\"></a>在单数据库情况下，可以忽略以下 –databases 选项</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump test &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名\"><a href=\"#要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名\" class=\"headerlink\" title=\"要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名\"></a>要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump test t1 t3 t7 &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备份到当前的目录（在对应目录下执行以下命令）\"><a href=\"#备份到当前的目录（在对应目录下执行以下命令）\" class=\"headerlink\" title=\"备份到当前的目录（在对应目录下执行以下命令）\"></a>备份到当前的目录（在对应目录下执行以下命令）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u root -p --opt database &gt; database.sql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何恢复数据库\"><a href=\"#如何恢复数据库\" class=\"headerlink\" title=\"如何恢复数据库\"></a>如何恢复数据库</h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>登录数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<p>进入对应的数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use test;</span><br></pre></td></tr></table></figure>\n\n<p>执行恢复命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /source /tmp/test.sql</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何备份数据库\"><a href=\"#如何备份数据库\" class=\"headerlink\" title=\"如何备份数据库\"></a>如何备份数据库</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump [arguments] &gt; file_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"要转储所有数据库，请使用以下选项调用\"><a href=\"#要转储所有数据库，请使用以下选项调用\" class=\"headerlink\" title=\"要转储所有数据库，请使用以下选项调用\"></a>要转储所有数据库，请使用以下选项调用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump --all-databases &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"要仅转储特定数据库，请在命令行上命名它们并使用以下\"><a href=\"#要仅转储特定数据库，请在命令行上命名它们并使用以下\" class=\"headerlink\" title=\"要仅转储特定数据库，请在命令行上命名它们并使用以下\"></a>要仅转储特定数据库，请在命令行上命名它们并使用以下</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump --databases db1 db2 db3 &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"要转储单个数据库，请在命令行上将其命名\"><a href=\"#要转储单个数据库，请在命令行上将其命名\" class=\"headerlink\" title=\"要转储单个数据库，请在命令行上将其命名\"></a>要转储单个数据库，请在命令行上将其命名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump --databases test &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在单数据库情况下，可以忽略以下-–databases-选项\"><a href=\"#在单数据库情况下，可以忽略以下-–databases-选项\" class=\"headerlink\" title=\"在单数据库情况下，可以忽略以下 –databases 选项\"></a>在单数据库情况下，可以忽略以下 –databases 选项</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump test &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名\"><a href=\"#要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名\" class=\"headerlink\" title=\"要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名\"></a>要仅转储数据库中的特定表，请在数据库名称后的命令行中将其命名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump test t1 t3 t7 &gt; dump.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备份到当前的目录（在对应目录下执行以下命令）\"><a href=\"#备份到当前的目录（在对应目录下执行以下命令）\" class=\"headerlink\" title=\"备份到当前的目录（在对应目录下执行以下命令）\"></a>备份到当前的目录（在对应目录下执行以下命令）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u root -p --opt database &gt; database.sql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何恢复数据库\"><a href=\"#如何恢复数据库\" class=\"headerlink\" title=\"如何恢复数据库\"></a>如何恢复数据库</h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>登录数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<p>进入对应的数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use test;</span><br></pre></td></tr></table></figure>\n\n<p>执行恢复命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /source /tmp/test.sql</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Ubuntu防火墙的使用和开放关闭端口","abbrlink":1879866913,"_content":"\n查看防火墙状态（Ubuntu系统默认是安装了ufw防火墙）\n\n```shell\nsudo ufw status\n```\n\n> `inactive`表示防火墙没有开启，并不是没有安装防火墙。\n\n安装防火墙：\n\n```shell\nsudo apt-get install ufw\n```\n\n开启防火墙\n\n```shell\nsudo ufw enable\n```\n\n开放22端口：\n\n```shell\nsudo ufw allow 22\n```\n\n开启完成，需要重启防火墙生效：\n\n```shell\nsudo ufw reload\n```\n\n查看22端口的监听状态：\n\n```shell\nsudo netstat -tunlp | grep 22      \n```\n\n防火墙关闭普通端口\n\n```shell\nsudo ufw delete allow 21\n```\n\n防火墙开放规定协议的端口\n\n```shell\nsudo ufw allow 8001/tcp\n```\n\n防火墙关闭指定协议端口\n\n```shell\nsudo ufw delete allow 8001/tcp \n```\n\n#### 防火墙开放限定ip地址端口\n\n开放指定ip所有操作\n\n```shell\nsudo ufw allow from 192.168.1.11\n```\n\n关闭指定ip所有操作\n\n```shell\nsudo ufw delete allow from 192.168.1.11\n```\n\n开放指定ip对应端口操作\n\n```shell\nsudo ufw allow from 192.168.1.12 to any port 3306\n```\n\n关闭指定ip对应端口操作\n\n```shell\nsudo ufw delete allow from 192.168.1.12 to any port 3306\n```\n\n关闭防火墙\n\n```shell\nsudo ufw disable\n```\n\n\n\n## 参考资料\n\n- https://blog.csdn.net/willingtolove/article/details/109863064\n\n","source":"_posts/Technology/Service/ubuntu防火墙的使用和开放关闭端口.md","raw":"---\ntitle: Ubuntu防火墙的使用和开放关闭端口\ncategories:\n  - 服务Server\ntags:\n  - 技术开发\n  - Ubuntu\nabbrlink: 1879866913\n---\n\n查看防火墙状态（Ubuntu系统默认是安装了ufw防火墙）\n\n```shell\nsudo ufw status\n```\n\n> `inactive`表示防火墙没有开启，并不是没有安装防火墙。\n\n安装防火墙：\n\n```shell\nsudo apt-get install ufw\n```\n\n开启防火墙\n\n```shell\nsudo ufw enable\n```\n\n开放22端口：\n\n```shell\nsudo ufw allow 22\n```\n\n开启完成，需要重启防火墙生效：\n\n```shell\nsudo ufw reload\n```\n\n查看22端口的监听状态：\n\n```shell\nsudo netstat -tunlp | grep 22      \n```\n\n防火墙关闭普通端口\n\n```shell\nsudo ufw delete allow 21\n```\n\n防火墙开放规定协议的端口\n\n```shell\nsudo ufw allow 8001/tcp\n```\n\n防火墙关闭指定协议端口\n\n```shell\nsudo ufw delete allow 8001/tcp \n```\n\n#### 防火墙开放限定ip地址端口\n\n开放指定ip所有操作\n\n```shell\nsudo ufw allow from 192.168.1.11\n```\n\n关闭指定ip所有操作\n\n```shell\nsudo ufw delete allow from 192.168.1.11\n```\n\n开放指定ip对应端口操作\n\n```shell\nsudo ufw allow from 192.168.1.12 to any port 3306\n```\n\n关闭指定ip对应端口操作\n\n```shell\nsudo ufw delete allow from 192.168.1.12 to any port 3306\n```\n\n关闭防火墙\n\n```shell\nsudo ufw disable\n```\n\n\n\n## 参考资料\n\n- https://blog.csdn.net/willingtolove/article/details/109863064\n\n","slug":"Technology/Service/ubuntu防火墙的使用和开放关闭端口","published":1,"date":"2021-04-16T13:53:51.909Z","updated":"2021-04-29T10:24:59.090Z","_id":"ckotdh5x0003tkw8z84k61ddd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看防火墙状态（Ubuntu系统默认是安装了ufw防火墙）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>inactive</code>表示防火墙没有开启，并不是没有安装防火墙。</p>\n</blockquote>\n<p>安装防火墙：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ufw</span><br></pre></td></tr></table></figure>\n\n<p>开启防火墙</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw enable</span><br></pre></td></tr></table></figure>\n\n<p>开放22端口：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 22</span><br></pre></td></tr></table></figure>\n\n<p>开启完成，需要重启防火墙生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw reload</span><br></pre></td></tr></table></figure>\n\n<p>查看22端口的监听状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tunlp | grep 22      </span><br></pre></td></tr></table></figure>\n\n<p>防火墙关闭普通端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow 21</span><br></pre></td></tr></table></figure>\n\n<p>防火墙开放规定协议的端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 8001/tcp</span><br></pre></td></tr></table></figure>\n\n<p>防火墙关闭指定协议端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow 8001/tcp </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"防火墙开放限定ip地址端口\"><a href=\"#防火墙开放限定ip地址端口\" class=\"headerlink\" title=\"防火墙开放限定ip地址端口\"></a>防火墙开放限定ip地址端口</h4><p>开放指定ip所有操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow from 192.168.1.11</span><br></pre></td></tr></table></figure>\n\n<p>关闭指定ip所有操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow from 192.168.1.11</span><br></pre></td></tr></table></figure>\n\n<p>开放指定ip对应端口操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow from 192.168.1.12 to any port 3306</span><br></pre></td></tr></table></figure>\n\n<p>关闭指定ip对应端口操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow from 192.168.1.12 to any port 3306</span><br></pre></td></tr></table></figure>\n\n<p>关闭防火墙</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw disable</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.csdn.net/willingtolove/article/details/109863064\">https://blog.csdn.net/willingtolove/article/details/109863064</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>查看防火墙状态（Ubuntu系统默认是安装了ufw防火墙）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>inactive</code>表示防火墙没有开启，并不是没有安装防火墙。</p>\n</blockquote>\n<p>安装防火墙：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ufw</span><br></pre></td></tr></table></figure>\n\n<p>开启防火墙</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw enable</span><br></pre></td></tr></table></figure>\n\n<p>开放22端口：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 22</span><br></pre></td></tr></table></figure>\n\n<p>开启完成，需要重启防火墙生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw reload</span><br></pre></td></tr></table></figure>\n\n<p>查看22端口的监听状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tunlp | grep 22      </span><br></pre></td></tr></table></figure>\n\n<p>防火墙关闭普通端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow 21</span><br></pre></td></tr></table></figure>\n\n<p>防火墙开放规定协议的端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 8001/tcp</span><br></pre></td></tr></table></figure>\n\n<p>防火墙关闭指定协议端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow 8001/tcp </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"防火墙开放限定ip地址端口\"><a href=\"#防火墙开放限定ip地址端口\" class=\"headerlink\" title=\"防火墙开放限定ip地址端口\"></a>防火墙开放限定ip地址端口</h4><p>开放指定ip所有操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow from 192.168.1.11</span><br></pre></td></tr></table></figure>\n\n<p>关闭指定ip所有操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow from 192.168.1.11</span><br></pre></td></tr></table></figure>\n\n<p>开放指定ip对应端口操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow from 192.168.1.12 to any port 3306</span><br></pre></td></tr></table></figure>\n\n<p>关闭指定ip对应端口操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow from 192.168.1.12 to any port 3306</span><br></pre></td></tr></table></figure>\n\n<p>关闭防火墙</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw disable</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.csdn.net/willingtolove/article/details/109863064\">https://blog.csdn.net/willingtolove/article/details/109863064</a></li>\n</ul>\n"},{"title":"linux系统scp文件传输","abbrlink":82110573,"_content":"\n## 命令格式\n\n```shell\nscp [参数] [原路径] [目标路径]\n```\n\n## 命令参数\n\n- -1 强制scp命令使用协议ssh1\n- -2 强制scp命令使用协议ssh2\n- -4 强制scp命令只使用IPv4寻址\n- -6 强制scp命令只使用IPv6寻址\n- -B 使用批处理模式（传输过程中不询问传输口令或短语）\n- -C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）\n- -p 保留原文件的修改时间，访问时间和访问权限。\n- -q 不显示传输进度条。\n- -r 递归复制整个目录。\n- -v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。\n- -c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。\n- -F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。\n- -i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。\n- -l limit 限定用户所能使用的带宽，以Kbit/s为单位。\n- -o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，\n- -P port 注意是大写的P, port是指定数据传输用到的端口号。\n- -S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。\n\n## 使用实例\n\n#### **从本地服务器复制到远程服务器：**\n\n**(1) 复制文件：**\n\n```shell\nscp local_file remote_username@remote_ip:remote_folder\n```\n\n```shell\nscp local_file remote_username@remote_ip:remote_file\n```\n\n```shell\nscp local_file remote_ip:remote_folder\n```\n\n```shell\nscp local_file remote_ip:remote_file\n```\n\n> 第1,2个已指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名。\n>\n> 第3,4个没有指定用户名，命令执行后需要输入用户名和用户密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名。\n\n**(2) 复制目录：**\n\n```shell\nscp -r local_folder remote_username@remote_ip:remote_folder\n```\n\n```shell\nscp -r local_folder remote_ip:remote_folder\n```\n\n**二、从远程服务器复制到本地服务器：**\n\n**(1) 从远处复制文件到本地目录:**\n\n```shell\nscp root@192.168.1.68:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/\n```\n\n> 从192.168.1.68机器上的/opt/soft/的目录中下载nginx-0.5.38.tar.gz 文件到本地/opt/soft/目录中\n\n**(2) 从远处复制目录到本地目录**\n\n```shell\nscp -r root@192.168.1.68:/opt/soft/mongodb /opt/soft/\n```\n\n> 从192.168.1.68机器上的/opt/soft/的目录中下载mongodb 目录到本地的/opt/soft/目录来。\n\n","source":"_posts/Technology/Service/linux系统scp文件传输.md","raw":"---\ntitle: linux系统scp文件传输\ncategories:\n  - 服务Server\ntags:\n  - 技术开发\n  - Linux\nabbrlink: 82110573\n---\n\n## 命令格式\n\n```shell\nscp [参数] [原路径] [目标路径]\n```\n\n## 命令参数\n\n- -1 强制scp命令使用协议ssh1\n- -2 强制scp命令使用协议ssh2\n- -4 强制scp命令只使用IPv4寻址\n- -6 强制scp命令只使用IPv6寻址\n- -B 使用批处理模式（传输过程中不询问传输口令或短语）\n- -C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）\n- -p 保留原文件的修改时间，访问时间和访问权限。\n- -q 不显示传输进度条。\n- -r 递归复制整个目录。\n- -v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。\n- -c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。\n- -F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。\n- -i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。\n- -l limit 限定用户所能使用的带宽，以Kbit/s为单位。\n- -o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，\n- -P port 注意是大写的P, port是指定数据传输用到的端口号。\n- -S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。\n\n## 使用实例\n\n#### **从本地服务器复制到远程服务器：**\n\n**(1) 复制文件：**\n\n```shell\nscp local_file remote_username@remote_ip:remote_folder\n```\n\n```shell\nscp local_file remote_username@remote_ip:remote_file\n```\n\n```shell\nscp local_file remote_ip:remote_folder\n```\n\n```shell\nscp local_file remote_ip:remote_file\n```\n\n> 第1,2个已指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名。\n>\n> 第3,4个没有指定用户名，命令执行后需要输入用户名和用户密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名。\n\n**(2) 复制目录：**\n\n```shell\nscp -r local_folder remote_username@remote_ip:remote_folder\n```\n\n```shell\nscp -r local_folder remote_ip:remote_folder\n```\n\n**二、从远程服务器复制到本地服务器：**\n\n**(1) 从远处复制文件到本地目录:**\n\n```shell\nscp root@192.168.1.68:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/\n```\n\n> 从192.168.1.68机器上的/opt/soft/的目录中下载nginx-0.5.38.tar.gz 文件到本地/opt/soft/目录中\n\n**(2) 从远处复制目录到本地目录**\n\n```shell\nscp -r root@192.168.1.68:/opt/soft/mongodb /opt/soft/\n```\n\n> 从192.168.1.68机器上的/opt/soft/的目录中下载mongodb 目录到本地的/opt/soft/目录来。\n\n","slug":"Technology/Service/linux系统scp文件传输","published":1,"date":"2021-04-16T13:53:51.916Z","updated":"2021-04-29T10:24:59.088Z","_id":"ckotdh5x1003vkw8z3h6fglju","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [参数] [原路径] [目标路径]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h2><ul>\n<li>-1 强制scp命令使用协议ssh1</li>\n<li>-2 强制scp命令使用协议ssh2</li>\n<li>-4 强制scp命令只使用IPv4寻址</li>\n<li>-6 强制scp命令只使用IPv6寻址</li>\n<li>-B 使用批处理模式（传输过程中不询问传输口令或短语）</li>\n<li>-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li>\n<li>-p 保留原文件的修改时间，访问时间和访问权限。</li>\n<li>-q 不显示传输进度条。</li>\n<li>-r 递归复制整个目录。</li>\n<li>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li>\n<li>-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li>\n<li>-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li>\n<li>-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li>\n<li>-l limit 限定用户所能使用的带宽，以Kbit/s为单位。</li>\n<li>-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，</li>\n<li>-P port 注意是大写的P, port是指定数据传输用到的端口号。</li>\n<li>-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li>\n</ul>\n<h2 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h2><h4 id=\"从本地服务器复制到远程服务器：\"><a href=\"#从本地服务器复制到远程服务器：\" class=\"headerlink\" title=\"从本地服务器复制到远程服务器：\"></a><strong>从本地服务器复制到远程服务器：</strong></h4><p><strong>(1) 复制文件：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp local_file remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp local_file remote_username@remote_ip:remote_file</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp local_file remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp local_file remote_ip:remote_file</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>第1,2个已指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名。</p>\n<p>第3,4个没有指定用户名，命令执行后需要输入用户名和用户密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名。</p>\n</blockquote>\n<p><strong>(2) 复制目录：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r local_folder remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r local_folder remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<p><strong>二、从远程服务器复制到本地服务器：</strong></p>\n<p><strong>(1) 从远处复制文件到本地目录:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp root@192.168.1.68:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从192.168.1.68机器上的/opt/soft/的目录中下载nginx-0.5.38.tar.gz 文件到本地/opt/soft/目录中</p>\n</blockquote>\n<p><strong>(2) 从远处复制目录到本地目录</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r root@192.168.1.68:/opt/soft/mongodb /opt/soft/</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从192.168.1.68机器上的/opt/soft/的目录中下载mongodb 目录到本地的/opt/soft/目录来。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [参数] [原路径] [目标路径]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h2><ul>\n<li>-1 强制scp命令使用协议ssh1</li>\n<li>-2 强制scp命令使用协议ssh2</li>\n<li>-4 强制scp命令只使用IPv4寻址</li>\n<li>-6 强制scp命令只使用IPv6寻址</li>\n<li>-B 使用批处理模式（传输过程中不询问传输口令或短语）</li>\n<li>-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li>\n<li>-p 保留原文件的修改时间，访问时间和访问权限。</li>\n<li>-q 不显示传输进度条。</li>\n<li>-r 递归复制整个目录。</li>\n<li>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li>\n<li>-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li>\n<li>-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li>\n<li>-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li>\n<li>-l limit 限定用户所能使用的带宽，以Kbit/s为单位。</li>\n<li>-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，</li>\n<li>-P port 注意是大写的P, port是指定数据传输用到的端口号。</li>\n<li>-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li>\n</ul>\n<h2 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h2><h4 id=\"从本地服务器复制到远程服务器：\"><a href=\"#从本地服务器复制到远程服务器：\" class=\"headerlink\" title=\"从本地服务器复制到远程服务器：\"></a><strong>从本地服务器复制到远程服务器：</strong></h4><p><strong>(1) 复制文件：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp local_file remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp local_file remote_username@remote_ip:remote_file</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp local_file remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp local_file remote_ip:remote_file</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>第1,2个已指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名。</p>\n<p>第3,4个没有指定用户名，命令执行后需要输入用户名和用户密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名。</p>\n</blockquote>\n<p><strong>(2) 复制目录：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r local_folder remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r local_folder remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<p><strong>二、从远程服务器复制到本地服务器：</strong></p>\n<p><strong>(1) 从远处复制文件到本地目录:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp root@192.168.1.68:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从192.168.1.68机器上的/opt/soft/的目录中下载nginx-0.5.38.tar.gz 文件到本地/opt/soft/目录中</p>\n</blockquote>\n<p><strong>(2) 从远处复制目录到本地目录</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r root@192.168.1.68:/opt/soft/mongodb /opt/soft/</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从192.168.1.68机器上的/opt/soft/的目录中下载mongodb 目录到本地的/opt/soft/目录来。</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckotdh5ua000fkw8z274gev5b","category_id":"ckotdh5u30009kw8zgf5364n6","_id":"ckotdh5uk000okw8z4g8i287i"},{"post_id":"ckotdh5u00006kw8zg2o0d0dh","category_id":"ckotdh5u30009kw8zgf5364n6","_id":"ckotdh5un000skw8zewkg0tre"},{"post_id":"ckotdh5ue000hkw8z1xoyhhh6","category_id":"ckotdh5u30009kw8zgf5364n6","_id":"ckotdh5uo000vkw8z4balglz5"},{"post_id":"ckotdh5ui000mkw8z9nlv8056","category_id":"ckotdh5u30009kw8zgf5364n6","_id":"ckotdh5us0010kw8zgj9k1n6b"},{"post_id":"ckotdh5u20008kw8z573m0lm2","category_id":"ckotdh5u30009kw8zgf5364n6","_id":"ckotdh5uu0013kw8za3lw66dx"},{"post_id":"ckotdh5uk000nkw8z2qh9a8dh","category_id":"ckotdh5u30009kw8zgf5364n6","_id":"ckotdh5uw0017kw8z4fcx23ek"},{"post_id":"ckotdh5u5000bkw8zeriqfxeb","category_id":"ckotdh5u30009kw8zgf5364n6","_id":"ckotdh5ux001akw8zhqlearod"},{"post_id":"ckotdh5ut0012kw8zce7v6muq","category_id":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5wb002jkw8zg3v523ii"},{"post_id":"ckotdh5ut0012kw8zce7v6muq","category_id":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5wc002lkw8zbk0yc0cy"},{"post_id":"ckotdh5ut0012kw8zce7v6muq","category_id":"ckotdh5vz002ckw8z7d4f937w","_id":"ckotdh5we002okw8zadprbh1c"},{"post_id":"ckotdh5um000rkw8z1il169ih","category_id":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5wi002wkw8zgfpo5xa5"},{"post_id":"ckotdh5um000rkw8z1il169ih","category_id":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5wk002ykw8z2zki1b4o"},{"post_id":"ckotdh5um000rkw8z1il169ih","category_id":"ckotdh5wd002nkw8z14td2igt","_id":"ckotdh5wl0031kw8za24padt9"},{"post_id":"ckotdh5uv0015kw8z4couhmln","category_id":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5wp0039kw8zayswc4na"},{"post_id":"ckotdh5uv0015kw8z4couhmln","category_id":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5wr003ckw8za3wv3a4x"},{"post_id":"ckotdh5uv0015kw8z4couhmln","category_id":"ckotdh5vz002ckw8z7d4f937w","_id":"ckotdh5ws003fkw8z96x0611u"},{"post_id":"ckotdh5ux0019kw8z7kqf3vip","category_id":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5ww003mkw8z79i614tg"},{"post_id":"ckotdh5ux0019kw8z7kqf3vip","category_id":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5wx003okw8z6kaua77c"},{"post_id":"ckotdh5ux0019kw8z7kqf3vip","category_id":"ckotdh5vz002ckw8z7d4f937w","_id":"ckotdh5wy003rkw8z3f4agnwe"},{"post_id":"ckotdh5uo000ukw8z5csdajg2","category_id":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5x2003ykw8z5pci4r8n"},{"post_id":"ckotdh5uo000ukw8z5csdajg2","category_id":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5x3003zkw8zb0wvgkkz"},{"post_id":"ckotdh5uo000ukw8z5csdajg2","category_id":"ckotdh5vz002ckw8z7d4f937w","_id":"ckotdh5x30042kw8z34lmg1wb"},{"post_id":"ckotdh5uz001ckw8z43crc623","category_id":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5x50048kw8zerk9c1e7"},{"post_id":"ckotdh5uz001ckw8z43crc623","category_id":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5x6004akw8z6dsx3o0f"},{"post_id":"ckotdh5uz001ckw8z43crc623","category_id":"ckotdh5vz002ckw8z7d4f937w","_id":"ckotdh5x6004ckw8z0m1pey9k"},{"post_id":"ckotdh5v1001fkw8zc1h8epd5","category_id":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5xa004hkw8z0r8f2rko"},{"post_id":"ckotdh5v1001fkw8zc1h8epd5","category_id":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5xb004ikw8zb81ic3f5"},{"post_id":"ckotdh5v1001fkw8zc1h8epd5","category_id":"ckotdh5vz002ckw8z7d4f937w","_id":"ckotdh5xc004kkw8zfwju50oa"},{"post_id":"ckotdh5uq000zkw8z23s60egd","category_id":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5xg004nkw8z9kjecfni"},{"post_id":"ckotdh5uq000zkw8z23s60egd","category_id":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5xg004okw8zf1846qei"},{"post_id":"ckotdh5uq000zkw8z23s60egd","category_id":"ckotdh5vz002ckw8z7d4f937w","_id":"ckotdh5xg004qkw8z587jbg92"},{"post_id":"ckotdh5v3001gkw8z52sbbfpy","category_id":"ckotdh5uq000ykw8z0jxo091s","_id":"ckotdh5xi004tkw8z8qqi2txu"},{"post_id":"ckotdh5v3001gkw8z52sbbfpy","category_id":"ckotdh5v4001hkw8zhqwe1x2m","_id":"ckotdh5xi004ukw8zcoww08ld"},{"post_id":"ckotdh5v3001gkw8z52sbbfpy","category_id":"ckotdh5vz002ckw8z7d4f937w","_id":"ckotdh5xj004vkw8z8l0o8der"},{"post_id":"ckotdh5vx002akw8z1ha7fb1w","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5xk004ykw8zcwby0vlk"},{"post_id":"ckotdh5vx002akw8z1ha7fb1w","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5xk004zkw8z5nyy13gr"},{"post_id":"ckotdh5v5001jkw8z71ofebv8","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5xk0050kw8zay27hpmf"},{"post_id":"ckotdh5v5001jkw8z71ofebv8","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5xl0052kw8z6dgca8xm"},{"post_id":"ckotdh5v6001kkw8z7h95hg3c","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5xo0059kw8z3rx7e0gw"},{"post_id":"ckotdh5v6001kkw8z7h95hg3c","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5xo005akw8z3kr25a7r"},{"post_id":"ckotdh5v8001mkw8zf6063sei","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5xq005ekw8z988i28kr"},{"post_id":"ckotdh5v8001mkw8zf6063sei","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5xq005fkw8z108z87l0"},{"post_id":"ckotdh5v9001nkw8z1fqp883a","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5xs005lkw8z3p5wbqs2"},{"post_id":"ckotdh5v9001nkw8z1fqp883a","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5xt005mkw8z0bovgsix"},{"post_id":"ckotdh5va001pkw8zcmczbbjw","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5xv005qkw8z12t5fmsh"},{"post_id":"ckotdh5va001pkw8zcmczbbjw","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5xv005rkw8zgxcmhety"},{"post_id":"ckotdh5vc001qkw8zeuo09020","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5xy005xkw8z0mk66h40"},{"post_id":"ckotdh5vc001qkw8zeuo09020","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5xy005ykw8z2gtw2wwx"},{"post_id":"ckotdh5ve001skw8z6fj94dj2","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5y10062kw8zc7sq4m2o"},{"post_id":"ckotdh5ve001skw8z6fj94dj2","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5y10063kw8z5mru0fy4"},{"post_id":"ckotdh5vf001tkw8zcnl04dk3","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5y40069kw8z8jr93g1y"},{"post_id":"ckotdh5vf001tkw8zcnl04dk3","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5y4006akw8z7hzjd6yo"},{"post_id":"ckotdh5vh001vkw8zb41p8d0o","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5y8006ekw8zhhh22pd1"},{"post_id":"ckotdh5vh001vkw8zb41p8d0o","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5y8006fkw8z4n1o0dgm"},{"post_id":"ckotdh5x0003tkw8z84k61ddd","category_id":"ckotdh5y8006gkw8z62t7f2u7","_id":"ckotdh5ya006jkw8z1sccasr5"},{"post_id":"ckotdh5x1003vkw8z3h6fglju","category_id":"ckotdh5y8006gkw8z62t7f2u7","_id":"ckotdh5yb006lkw8zcyr07an2"},{"post_id":"ckotdh5vi001wkw8zfnqd7cgi","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5yc006nkw8zhp3dfjt6"},{"post_id":"ckotdh5vi001wkw8zfnqd7cgi","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5yc006okw8zdh0x8v9i"},{"post_id":"ckotdh5vk001ykw8zf3g5f3oz","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5yd006qkw8z53xnda3e"},{"post_id":"ckotdh5vk001ykw8zf3g5f3oz","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5yd006rkw8z1uumgtqn"},{"post_id":"ckotdh5vl001zkw8z0kecheyy","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5ye006tkw8z7maebtkp"},{"post_id":"ckotdh5vl001zkw8z0kecheyy","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5yf006ukw8z9cedfg1w"},{"post_id":"ckotdh5vm0021kw8z4ai83he9","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5yf006wkw8zcxo3d6e8"},{"post_id":"ckotdh5vm0021kw8z4ai83he9","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5yg006xkw8zhgg0h74x"},{"post_id":"ckotdh5vq0022kw8zdgnr8qf4","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5yg006zkw8z686ucfor"},{"post_id":"ckotdh5vq0022kw8zdgnr8qf4","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5yh0070kw8za586866g"},{"post_id":"ckotdh5vr0024kw8z3pp35qcb","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5yi0072kw8z00vo2lzy"},{"post_id":"ckotdh5vr0024kw8z3pp35qcb","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5yj0073kw8zh18mhqi5"},{"post_id":"ckotdh5vs0025kw8z4ls57n4z","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5yj0075kw8z4nvvch7a"},{"post_id":"ckotdh5vs0025kw8z4ls57n4z","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5yk0076kw8z93oseheu"},{"post_id":"ckotdh5vv0027kw8z8l6xb8yh","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5yl0078kw8z35pv0wxg"},{"post_id":"ckotdh5vv0027kw8z8l6xb8yh","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5ym0079kw8zggibckfe"},{"post_id":"ckotdh5vw0028kw8zehyb7s0n","category_id":"ckotdh5vx0029kw8zhliw4l4w","_id":"ckotdh5ym007akw8zgdia756w"},{"post_id":"ckotdh5vw0028kw8zehyb7s0n","category_id":"ckotdh5xi004skw8z71899wvg","_id":"ckotdh5yo007ckw8z8mpw1x1p"},{"post_id":"ckotdh5vy002bkw8z7txo5ii3","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5yq007ekw8z3x2o610r"},{"post_id":"ckotdh5vy002bkw8z7txo5ii3","category_id":"ckotdh5yk0077kw8z8bl42hq0","_id":"ckotdh5yq007fkw8zcy7dd6nw"},{"post_id":"ckotdh5w0002dkw8z1x0aexdf","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5yq007gkw8z1sn07flf"},{"post_id":"ckotdh5w0002dkw8z1x0aexdf","category_id":"ckotdh5yk0077kw8z8bl42hq0","_id":"ckotdh5yt007ikw8z0lzhhaxh"},{"post_id":"ckotdh5w3002hkw8zflczhnmz","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5yu007mkw8zf2ofd1em"},{"post_id":"ckotdh5w3002hkw8zflczhnmz","category_id":"ckotdh5yt007jkw8z8nusb2q2","_id":"ckotdh5yv007nkw8zcaeb4mhj"},{"post_id":"ckotdh5w1002ekw8z0e093vj6","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5z8008bkw8z91edgll4"},{"post_id":"ckotdh5w1002ekw8z0e093vj6","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5z9008ckw8zd3ca3ei7"},{"post_id":"ckotdh5w1002ekw8z0e093vj6","category_id":"ckotdh5z60088kw8zgtj153kh","_id":"ckotdh5za008ekw8zakhy2ju4"},{"post_id":"ckotdh5w2002gkw8z23alafi3","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5za008fkw8z0jhxd5si"},{"post_id":"ckotdh5w2002gkw8z23alafi3","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5za008gkw8z6zzm2bxe"},{"post_id":"ckotdh5w2002gkw8z23alafi3","category_id":"ckotdh5z60088kw8zgtj153kh","_id":"ckotdh5zb008ikw8zcs7c2ee1"},{"post_id":"ckotdh5wb002kkw8zhki1dyn6","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zb008jkw8zdcsr9vzv"},{"post_id":"ckotdh5wb002kkw8zhki1dyn6","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zc008lkw8z31ox3jy7"},{"post_id":"ckotdh5wb002kkw8zhki1dyn6","category_id":"ckotdh5z60088kw8zgtj153kh","_id":"ckotdh5zd008mkw8z20oqb1fo"},{"post_id":"ckotdh5wd002mkw8zdd4aclgc","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zd008okw8zfyzb575p"},{"post_id":"ckotdh5wd002mkw8zdd4aclgc","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5ze008pkw8zccjh77ua"},{"post_id":"ckotdh5wd002mkw8zdd4aclgc","category_id":"ckotdh5z9008dkw8z9fs88rlq","_id":"ckotdh5zf008rkw8z7qu73nlc"},{"post_id":"ckotdh5we002pkw8zbwbch9yd","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zf008skw8zhng2h1ee"},{"post_id":"ckotdh5we002pkw8zbwbch9yd","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zg008ukw8zfudf9137"},{"post_id":"ckotdh5we002pkw8zbwbch9yd","category_id":"ckotdh5z9008dkw8z9fs88rlq","_id":"ckotdh5zg008vkw8z1cgugbof"},{"post_id":"ckotdh5wf002qkw8zc4rr7bus","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zg008xkw8z7p9x5y0c"},{"post_id":"ckotdh5wf002qkw8zc4rr7bus","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zh008ykw8z8eud4akg"},{"post_id":"ckotdh5wf002qkw8zc4rr7bus","category_id":"ckotdh5zc008kkw8zes8t16dh","_id":"ckotdh5zh0090kw8zgonlbh3u"},{"post_id":"ckotdh5wg002rkw8z95y6dnxw","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zh0091kw8z4du192ej"},{"post_id":"ckotdh5wg002rkw8z95y6dnxw","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zi0093kw8zgcgda7wg"},{"post_id":"ckotdh5wg002rkw8z95y6dnxw","category_id":"ckotdh5zc008kkw8zes8t16dh","_id":"ckotdh5zj0094kw8z38gq9ums"},{"post_id":"ckotdh5wh002tkw8z4rwfa9kr","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zj0096kw8z663gge4h"},{"post_id":"ckotdh5wh002tkw8z4rwfa9kr","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zk0097kw8z0u1h65ul"},{"post_id":"ckotdh5wh002tkw8z4rwfa9kr","category_id":"ckotdh5zc008kkw8zes8t16dh","_id":"ckotdh5zk0098kw8z6qjvay35"},{"post_id":"ckotdh5wi002ukw8z4g60d7o5","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zl009akw8z9d7o96e1"},{"post_id":"ckotdh5wi002ukw8z4g60d7o5","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zm009bkw8z9f87aybh"},{"post_id":"ckotdh5wi002ukw8z4g60d7o5","category_id":"ckotdh5zf008tkw8zff10a1ls","_id":"ckotdh5zm009dkw8zacku0ipt"},{"post_id":"ckotdh5wj002xkw8z90189kkz","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zm009ekw8z9npadbte"},{"post_id":"ckotdh5wj002xkw8z90189kkz","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zn009gkw8z4jxgaqrm"},{"post_id":"ckotdh5wj002xkw8z90189kkz","category_id":"ckotdh5zc008kkw8zes8t16dh","_id":"ckotdh5zo009hkw8zckot8qwm"},{"post_id":"ckotdh5wk002zkw8zfkep7wb8","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zo009jkw8z8f6e7t0z"},{"post_id":"ckotdh5wk002zkw8zfkep7wb8","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zq009kkw8zfawxfifd"},{"post_id":"ckotdh5wk002zkw8zfkep7wb8","category_id":"ckotdh5zh008zkw8zd7z63hr9","_id":"ckotdh5zr009mkw8z0thn20xq"},{"post_id":"ckotdh5wl0032kw8zg7qdagra","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zr009nkw8zf7z8bnpc"},{"post_id":"ckotdh5wl0032kw8zg7qdagra","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zs009pkw8z964najr7"},{"post_id":"ckotdh5wl0032kw8zg7qdagra","category_id":"ckotdh5zc008kkw8zes8t16dh","_id":"ckotdh5zs009qkw8z2ct56k85"},{"post_id":"ckotdh5wn0034kw8z56ep3evr","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zt009skw8z48v09ef4"},{"post_id":"ckotdh5wn0034kw8z56ep3evr","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zt009tkw8zfwvv55r6"},{"post_id":"ckotdh5wn0034kw8z56ep3evr","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh5zu009vkw8zgyz41sf2"},{"post_id":"ckotdh5wo0036kw8z1tme05xz","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zu009wkw8z3nysfxtc"},{"post_id":"ckotdh5wo0036kw8z1tme05xz","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zw009ykw8z5j2ohlr4"},{"post_id":"ckotdh5wo0036kw8z1tme05xz","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh5zw009zkw8z9j4v9zyl"},{"post_id":"ckotdh5wp0037kw8zabo6g1jt","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zw00a1kw8z16js8wsq"},{"post_id":"ckotdh5wp0037kw8zabo6g1jt","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zx00a2kw8zayj0dbrr"},{"post_id":"ckotdh5wp0037kw8zabo6g1jt","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh5zy00a4kw8z2w8k3h50"},{"post_id":"ckotdh5wq003bkw8zha6p5n33","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zy00a5kw8z54or3mq0"},{"post_id":"ckotdh5wq003bkw8zha6p5n33","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zy00a6kw8zhl1j8rxq"},{"post_id":"ckotdh5wq003bkw8zha6p5n33","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh5zy00a7kw8zeps2gf50"},{"post_id":"ckotdh5wr003dkw8z67hqbt0k","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zy00a8kw8zg8pk1wa8"},{"post_id":"ckotdh5wr003dkw8z67hqbt0k","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zz00a9kw8zaao81vra"},{"post_id":"ckotdh5wr003dkw8z67hqbt0k","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh5zz00aakw8z2hqaejtn"},{"post_id":"ckotdh5ws003gkw8zbeve42og","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zz00abkw8z5g97fdg5"},{"post_id":"ckotdh5ws003gkw8zbeve42og","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh5zz00ackw8z2b25eh66"},{"post_id":"ckotdh5ws003gkw8zbeve42og","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh5zz00adkw8zgmzqdxx8"},{"post_id":"ckotdh5wt003hkw8z9adw5oi2","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh5zz00aekw8z9ss9dwxg"},{"post_id":"ckotdh5wt003hkw8z9adw5oi2","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh60000afkw8zbs2v9nr4"},{"post_id":"ckotdh5wt003hkw8z9adw5oi2","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh60000agkw8z6612cw2r"},{"post_id":"ckotdh5wu003jkw8z9sgt9tvw","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh60000ahkw8z5cw99pe1"},{"post_id":"ckotdh5wu003jkw8z9sgt9tvw","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh60000aikw8zanoia3r5"},{"post_id":"ckotdh5wu003jkw8z9sgt9tvw","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh60000ajkw8zd2b2b596"},{"post_id":"ckotdh5wv003kkw8zeebg4rwy","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh60000akkw8zf7qq7k8o"},{"post_id":"ckotdh5wv003kkw8zeebg4rwy","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh60100alkw8zfl4t2dvm"},{"post_id":"ckotdh5wv003kkw8zeebg4rwy","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh60100amkw8zeg8pbosw"},{"post_id":"ckotdh5ww003nkw8z73o58k2u","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh60100ankw8z13t84xo6"},{"post_id":"ckotdh5ww003nkw8z73o58k2u","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh60100aokw8zbc3u7dd2"},{"post_id":"ckotdh5ww003nkw8z73o58k2u","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh60100apkw8z562i2jg8"},{"post_id":"ckotdh5wx003pkw8z2bvvaohd","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh60100aqkw8ze064f0qr"},{"post_id":"ckotdh5wx003pkw8z2bvvaohd","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh60200arkw8z7p69fpwr"},{"post_id":"ckotdh5wx003pkw8z2bvvaohd","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh60200askw8zchf272pj"},{"post_id":"ckotdh5wz003skw8z56zp18p0","category_id":"ckotdh5xk004xkw8z04zb7ge2","_id":"ckotdh60200atkw8zc8343bmg"},{"post_id":"ckotdh5wz003skw8z56zp18p0","category_id":"ckotdh5yp007dkw8z6xzidbk0","_id":"ckotdh60300aukw8zd2n21qif"},{"post_id":"ckotdh5wz003skw8z56zp18p0","category_id":"ckotdh5zj0095kw8zf4f4dv7i","_id":"ckotdh60300avkw8z4vsfanmi"},{"post_id":"ckotdh5ts0001kw8z4me65dic","category_id":"ckotdh63r00awkw8zewsyhvfg","_id":"ckotdh63w00aykw8z5fv99n0s"},{"post_id":"ckotdh5tw0003kw8zckwd8cp9","category_id":"ckotdh63r00awkw8zewsyhvfg","_id":"ckotdh63x00azkw8zbsc7196z"}],"PostTag":[{"post_id":"ckotdh5ts0001kw8z4me65dic","tag_id":"ckotdh5ty0004kw8zcu1b9nco","_id":"ckotdh5ua000dkw8zd75x5vqx"},{"post_id":"ckotdh5tw0003kw8zckwd8cp9","tag_id":"ckotdh5ty0004kw8zcu1b9nco","_id":"ckotdh5uh000kkw8zc8kabkll"},{"post_id":"ckotdh5u20008kw8z573m0lm2","tag_id":"ckotdh5uf000jkw8z4d3f6bl5","_id":"ckotdh5un000tkw8zep3fdrdh"},{"post_id":"ckotdh5uk000nkw8z2qh9a8dh","tag_id":"ckotdh5uf000jkw8z4d3f6bl5","_id":"ckotdh5up000wkw8z69vh1dt7"},{"post_id":"ckotdh5u5000bkw8zeriqfxeb","tag_id":"ckotdh5uf000jkw8z4d3f6bl5","_id":"ckotdh5ut0011kw8z0ie77fgd"},{"post_id":"ckotdh5ua000fkw8z274gev5b","tag_id":"ckotdh5uf000jkw8z4d3f6bl5","_id":"ckotdh5uw0018kw8z7j7p72ah"},{"post_id":"ckotdh5ue000hkw8z1xoyhhh6","tag_id":"ckotdh5uf000jkw8z4d3f6bl5","_id":"ckotdh5v1001ekw8zgktl3oq7"},{"post_id":"ckotdh5ui000mkw8z9nlv8056","tag_id":"ckotdh5uy001bkw8zdu5xgo34","_id":"ckotdh5v4001ikw8zcn43hurb"},{"post_id":"ckotdh5wk002zkw8zfkep7wb8","tag_id":"ckotdh5wm0033kw8zeyfg5s1i","_id":"ckotdh5wq003akw8z10cj035c"},{"post_id":"ckotdh5x0003tkw8z84k61ddd","tag_id":"ckotdh5x2003wkw8z1wmc4tv1","_id":"ckotdh5x50045kw8zaakm2zey"},{"post_id":"ckotdh5x0003tkw8z84k61ddd","tag_id":"ckotdh5x30040kw8zhdbeaqqj","_id":"ckotdh5x50046kw8zb702hc2h"},{"post_id":"ckotdh5x1003vkw8z3h6fglju","tag_id":"ckotdh5x2003wkw8z1wmc4tv1","_id":"ckotdh5x8004dkw8zfcwf0tad"},{"post_id":"ckotdh5x1003vkw8z3h6fglju","tag_id":"ckotdh5x60049kw8z2bzt76yp","_id":"ckotdh5x8004fkw8z757ccnnw"}],"Tag":[{"name":"面试","_id":"ckotdh5ty0004kw8zcu1b9nco"},{"name":"排序","_id":"ckotdh5uf000jkw8z4d3f6bl5"},{"name":"优秀网站","_id":"ckotdh5uy001bkw8zdu5xgo34"},{"name":"SSDB","_id":"ckotdh5wm0033kw8zeyfg5s1i"},{"name":"技术开发","_id":"ckotdh5x2003wkw8z1wmc4tv1"},{"name":"Ubuntu","_id":"ckotdh5x30040kw8zhdbeaqqj"},{"name":"Linux","_id":"ckotdh5x60049kw8z2bzt76yp"}]}}