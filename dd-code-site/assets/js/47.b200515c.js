(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{544:function(t,a,s){"use strict";s.r(a);var v=s(6),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"ci-持续集成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ci-持续集成"}},[t._v("#")]),t._v(" CI（持续集成）")]),t._v(" "),s("p",[t._v("通过持续集成，开发人员能够频繁地将其代码集成到公共代码仓库的主分支中。开发人员能够在任何时候多次向仓库提交作品，而不是独立的开发每个功能模块并在开发周期结束时提交。\nCI 的目标是将集成简化成一个简单、易于重复的日常开发任务，这样有助于降低总体的构建成本并在开发周期的早起发现缺陷。要想有效的使用 CI 必须转变团队的开发习惯，要鼓励频繁迭代构建，这样能在早期发现bug，早期积极解决。")]),t._v(" "),s("h2",{attrs:{id:"cd-持续交付"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cd-持续交付"}},[t._v("#")]),t._v(" CD（持续交付）")]),t._v(" "),s("p",[t._v("持续交付（CD）实际上是 CI 的扩展，其中软件交付流程进一步自动化，以便随时轻松的部署到生产环境中。")]),t._v(" "),s("p",[t._v("成熟的持续交付方案也展示了一个始终可部署的代码库。使用 CD 后，软件发布将成为一个没有任何紧张感的例行事件。开发团队可以在日常开发的任何时间进行产品级的发布，而不需要详细的发布方案或者特殊的后期测试。")]),t._v(" "),s("p",[t._v("CD 集中依赖于部署流水线，团队通过流水线自动化测试和部署过程。此流水线是一个自动化系统，可以针对构建执行一组渐进的测试套件。CD 具有高度的自动化，并且在一些云计算环境中也易于配置。")]),t._v(" "),s("p",[t._v("在流水线的每个阶段，如果构建无法通过关键测试回向团队发出警报。否则，将继续进入下一个测试，并在连续通过测试后自动进入下一个阶段。流水线的最后一个部分会将构建部署到和生产环境等效的环境中。这是一个整体的过程，因为构建、部署、环境都是在一起执行和测试的，它能让构建在实际的生产环境随时可部署、可测试。")]),t._v(" "),s("p",[s("u",[t._v("持续部署扩展了持续交付，以便软件构建通过所有测试时自动部署。在这样的流程中，不需要人为决定何时以及如何投入生产环境。CI/CD 系统的最后一步将在构建后的 组件/包 退出流水线时自动部署。此类自动部署可以配置为快速向客户分发组件、功能模块、修复补丁，并准确说明当前提供的内容。")])]),t._v(" "),s("p",[s("u",[t._v("采用持续部署的组织可以将新功能快速传递给用户，得到用户对新版本的快速反馈，并且可以迅速处理任何明显的缺陷。用户对无用或者误解需求的功能的快速反馈有助于团队规划投入，避免将经历集中于不容易产生回报的地方。")])]),t._v(" "),s("p",[t._v("​")])])}),[],!1,null,null,null);a.default=_.exports}}]);