(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{538:function(t,r,a){"use strict";a.r(r);var s=a(6),v=Object(s.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("将 Redis 发布订阅模式用作消息队列和 rabbitmq 的区别")]),t._v(" "),a("h2",{attrs:{id:"可靠性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可靠性"}},[t._v("#")]),t._v(" 可靠性")]),t._v(" "),a("p",[t._v("redis：没有相应的机制保证消息的可靠消费，如果发布者发布一条消息，而没有对应的订阅者的话，这条消息将会丢失，不会存在内存中")]),t._v(" "),a("p",[t._v("rabbitmq：具有消息消费确认机制，如果发布一条消息，还没有消费者消费该队列，那么这条消息将一直会放在队列中，知道消费者消费了该条消息，以此可以保证消息的可靠消费。")]),t._v(" "),a("h2",{attrs:{id:"实时性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实时性"}},[t._v("#")]),t._v(" 实时性")]),t._v(" "),a("p",[t._v("redis：实时性高，redis 作为高效的缓存服务器，所有数据都存在服务器中，所以具有更高的实时性")]),t._v(" "),a("h2",{attrs:{id:"消费者负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消费者负载均衡"}},[t._v("#")]),t._v(" 消费者负载均衡")]),t._v(" "),a("p",[t._v("rabbitmq 队列可以被多个消费者同时监控消费，但是每一条消息只能被消费一次，由于rabbitmq 的消费确认机制，因此它能够根据消费者的消费能力而调整它的负载")]),t._v(" "),a("p",[t._v("redis 订阅模式，一个队列可以被多个消费者同时订阅，当有消息到达时，会将该消息一次发送给每个订阅者")]),t._v(" "),a("h2",{attrs:{id:"持久性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久性"}},[t._v("#")]),t._v(" 持久性")]),t._v(" "),a("p",[t._v("redis 的持久化是针对整个redis缓存的内容，它可以将整个redi示例持久化到磁盘，以此来做数据备份，防止异常情况下导致数据丢失")]),t._v(" "),a("p",[t._v("rabbitmq：队列，消息都可以选择性持久化，持久化颗粒度更小，更灵活")]),t._v(" "),a("h2",{attrs:{id:"队列监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列监控"}},[t._v("#")]),t._v(" 队列监控")]),t._v(" "),a("p",[t._v("rabbitmq 实现了后台监控平台，可以在该平台上看到所有创建的队列的详细情况，良好的后台管理平台可以方便更好的使用")]),t._v(" "),a("p",[t._v("redis 自身没有所谓的后台监控")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("redis：轻量级、低延迟、高并发、低可靠性")]),t._v(" "),a("p",[t._v("rabbitmq：重量级、高可靠、异步、不保证实时")]),t._v(" "),a("p",[t._v("rabbitmp：是一个专门的 AMQP 协议队列，他的优势就在于提供可靠的队列服务，并且可以做到异步，")]),t._v(" "),a("p",[t._v("而 redis 主要用于缓存，redis 的发布订阅模块，可用于实现及时性，且可靠性低的功能。")])])}),[],!1,null,null,null);r.default=v.exports}}]);