(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{549:function(e,s,_){"use strict";_.r(s);var a=_(6),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,_=e._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h3",{attrs:{id:"_1-static-模式-静态模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-static-模式-静态模式"}},[e._v("#")]),e._v(" 1：static 模式（静态模式）")]),e._v(" "),_("p",[e._v("static 模式始终会保持一个固定数量的子进程，这个数量由"),_("code",[e._v("pm.max_children")]),e._v(" 的配置决定")]),e._v(" "),_("h3",{attrs:{id:"_2-dynamic-模式-动态模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-dynamic-模式-动态模式"}},[e._v("#")]),e._v(" 2：dynamic 模式（动态模式）")]),e._v(" "),_("p",[e._v("子进程的数量是动态变化的，启动时，会生成固定数量的子进程，可以理解为最小子进程数，通过 "),_("code",[e._v("pm.statr_servers")]),e._v(" 配置决定，而最大子进程数则由"),_("code",[e._v("pm.max_children")]),e._v(" 控制，子进程数会在"),_("code",[e._v("pm.start_servers")]),e._v(" ~ "),_("code",[e._v("pm.max_children")]),e._v(" 范围内波动，另外，闲置的子进程数还可以由 "),_("code",[e._v("pm.min_spare_servers")]),e._v("和 "),_("code",[e._v("pm.max_spare_servers")]),e._v("两个配置参数控制。总结：闲置的子进程也可以有最小数目和最大数目，而如果闲置的子进程超过"),_("code",[e._v("pm.max_spare_servers")]),e._v(",则会别杀死。")]),e._v(" "),_("h3",{attrs:{id:"_3-ondemand-模式-动态需求模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-ondemand-模式-动态需求模式"}},[e._v("#")]),e._v(" 3：ondemand 模式（动态需求模式）")]),e._v(" "),_("p",[e._v("这种模式和 dynamic 模式相反。因为这种模式把内存放在第一位，每个闲置进程在持续闲置了"),_("code",[e._v("pm.process_idle_timeout")]),e._v(" 秒后就会被杀死，因为这种模式，到了服务器低峰期的时候，内存就会降下来，如果服务器长时间没有请求，就只有一个主进程。其弊端是，遇到高峰期或者"),_("code",[e._v("pm.process_idle_timeout")]),e._v(" 设置太小，无法避免服务器频繁创建进程的问题。")]),e._v(" "),_("h2",{attrs:{id:"涉及到的参数配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#涉及到的参数配置"}},[e._v("#")]),e._v(" 涉及到的参数配置：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("pm.max_children")]),e._v(" ：静态方式下开启 php-fpm 进程数量")]),e._v(" "),_("li",[_("code",[e._v("pm.start_servers")]),e._v("：动态方式下的起始 php-fpm 进程数量")]),e._v(" "),_("li",[_("code",[e._v("pm.min_spare_servers")]),e._v("：动态方式下的最小 php-fpm 进程数量")]),e._v(" "),_("li",[_("code",[e._v("pm.max_spare_servers")]),e._v("：动态方式下的最大 php-fpm 进程数量")])]),e._v(" "),_("h2",{attrs:{id:"php-fpm-慢日志配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#php-fpm-慢日志配置"}},[e._v("#")]),e._v(" PHP-FPM 慢日志配置")]),e._v(" "),_("p",[e._v("配置文件："),_("code",[e._v("php-fpm.conf")])]),e._v(" "),_("p",[e._v("开启慢日志查询：")]),e._v(" "),_("div",{staticClass:"language-shell line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-shell"}},[_("code",[e._v("slowlog "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" /usr/local/log/php-fpm.log.slow\nrequest_slowlog_timeout "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" 5s\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br")])]),_("p",[e._v("意思是当某个请求时间超过了5秒，就写进慢日志，注意是5s，别忘了单位。其他单位还有m分，h时，php-fpm会记录对应的进程号，脚本名称，具体执行慢的代码行好等。")])])}),[],!1,null,null,null);s.default=t.exports}}]);